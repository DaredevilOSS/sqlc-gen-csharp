// auto-generated by sqlc at 08/04/2024 20:59 - do not edit
using System.Data;
using Npgsql;

namespace NpgsqlExample.Db;
public class QuerySql(string connectionString)
{
    private static byte[] GetBytes(IDataRecord reader, int ordinal)
    {
        const int bufferSize = 100000;
        ArgumentNullException.ThrowIfNull(reader);
        var buffer = new byte[bufferSize];
        var(bytesRead, offset) = (0, 0);
        while (bytesRead < bufferSize)
        {
            var read = (int)reader.GetBytes(ordinal, bufferSize + bytesRead, buffer, offset, bufferSize - bytesRead);
            if (read == 0)
                break;
            bytesRead += read;
            offset += read;
        }

        if (bytesRead < bufferSize)
            Array.Resize(ref buffer, bytesRead);
        return buffer;
    }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE  id  =  @id  LIMIT  1  ";  
    public readonly record struct GetAuthorRow(long Id, string Name, string Bio);
    public readonly record struct GetAuthorArgs(long Id);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(GetAuthorSql);
        command.Parameters.AddWithValue("@id", args.Id);
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
            return new GetAuthorRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2)
            };
        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
    public readonly record struct ListAuthorsRow(long Id, string Name, string Bio);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(ListAuthorsSql);
        await using var reader = await command.ExecuteReaderAsync();
        var rows = new List<ListAuthorsRow>();
        while (await reader.ReadAsync())
        {
            rows.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2) });
        }

        return rows;
    }

    private const string CreateAuthorSql = "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) RETURNING  id, name, bio ";  
    public readonly record struct CreateAuthorRow(long Id, string Name, string Bio);
    public readonly record struct CreateAuthorArgs(string Name, string Bio);
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(CreateAuthorSql);
        command.Parameters.AddWithValue("@name", args.Name);
        command.Parameters.AddWithValue("@bio", args.Bio);
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
            return new CreateAuthorRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2)
            };
        return null;
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE  id  =  @id  ";  
    public readonly record struct DeleteAuthorArgs(long Id);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(DeleteAuthorSql);
        command.Parameters.AddWithValue("@id", args.Id);
        await command.ExecuteScalarAsync();
    }
}