// auto-generated by sqlc - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
namespace SqliteExample
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Data.SQLite;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.connectionString = connectionString;
        }

        private string connectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE  id  =  ? LIMIT  1  ";  
        public class GetAuthorRow
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public int Id { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(GetAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetAuthorRow
                                {
                                    Id = reader.GetInt32(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
        public class ListAuthorsRow
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(ListAuthorsSql, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAuthorsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ListAuthorsRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors ( name , bio ) VALUES ( ?,  ? ) "; 
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(CreateAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors ( name , bio ) VALUES ( ?,  ? ) "; 
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(CreateAuthorReturnIdSql, connection))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        await command.ExecuteNonQueryAsync();
                        return connection.LastInsertRowId;
                    }
                }
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE  id  =  ? ";  
        public class DeleteAuthorArgs
        {
            public int Id { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            {
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(DeleteAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }
    }
}