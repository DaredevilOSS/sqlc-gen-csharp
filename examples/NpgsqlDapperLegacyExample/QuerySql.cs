// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace NpgsqlDapperLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Dapper;
    using Npgsql;
    using NpgsqlTypes;
    using System.Data;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
            Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
            Utils.ConfigureSqlMapper();
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("name", args.Name);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow>(GetAuthorSql, queryParams);
                return result;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
                return result.AsList();
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio) RETURNING id, name, bio";
        public class CreateAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class CreateAuthorArgs
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<CreateAuthorRow> CreateAuthor(CreateAuthorArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("id", args.Id);
                queryParams.Add("name", args.Name);
                queryParams.Add("bio", args.Bio);
                var result = await connection.QueryFirstOrDefaultAsync<CreateAuthorRow>(CreateAuthorSql, queryParams);
                return result;
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
        public class CreateAuthorReturnIdRow
        {
            public long Id { get; set; }
        };
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("name", args.Name);
                queryParams.Add("bio", args.Bio);
                return await connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams);
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("id", args.Id);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow>(GetAuthorByIdSql, queryParams);
                return result;
            }
        }

        private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE name LIKE COALESCE(@name_pattern, '%')";
        public class GetAuthorByNamePatternRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByNamePatternArgs
        {
            public string NamePattern { get; set; }
        };
        public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("name_pattern", args.NamePattern);
                var result = await connection.QueryAsync<GetAuthorByNamePatternRow>(GetAuthorByNamePatternSql, queryParams);
                return result.AsList();
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("name", args.Name);
                await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
            }
        }

        private const string TruncateAuthorsSql = "TRUNCATE TABLE authors CASCADE";
        public async Task TruncateAuthors()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncateAuthorsSql);
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("bio", args.Bio);
                return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
            }
        }

        private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[])";
        public class GetAuthorsByIdsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsArgs
        {
            public long[] LongArr1 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("longArr_1", args.LongArr1);
                var result = await connection.QueryAsync<GetAuthorsByIdsRow>(GetAuthorsByIdsSql, queryParams);
                return result.AsList();
            }
        }

        private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[]) AND name = ANY(@stringArr_2::TEXT[])";
        public class GetAuthorsByIdsAndNamesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsAndNamesArgs
        {
            public long[] LongArr1 { get; set; }
            public string[] StringArr2 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("longArr_1", args.LongArr1);
                queryParams.Add("stringArr_2", args.StringArr2);
                var result = await connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(GetAuthorsByIdsAndNamesSql, queryParams);
                return result.AsList();
            }
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id) RETURNING id";
        public class CreateBookRow
        {
            public long Id { get; set; }
        };
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task<long> CreateBook(CreateBookArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("name", args.Name);
                queryParams.Add("author_id", args.AuthorId);
                return await connection.QuerySingleAsync<long>(CreateBookSql, queryParams);
            }
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name";
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(ListAllAuthorsBooksSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAllAuthorsBooksRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  ";  
        public class GetDuplicateAuthorsRow
        {
            public Author Author { get; set; }
            public Author Author2 { get; set; }
        };
        public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetDuplicateAuthorsSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetDuplicateAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
        public class GetAuthorsByBookNameRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public Book Book { get; set; }
        };
        public class GetAuthorsByBookNameArgs
        {
            public string Name { get; set; }
        };
        public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorsByBookNameSql))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByBookNameRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string InsertPostgresTypesSql = "INSERT INTO postgres_types (c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea, c_text_array, c_integer_array) VALUES ( @c_boolean, @c_bit, @c_smallint, @c_integer, @c_bigint, @c_real, @c_numeric, @c_decimal, @c_double_precision, @c_money, @c_date, @c_time, @c_timestamp, @c_timestamp_with_tz, @c_char, @c_varchar, @c_character_varying, @c_text, @c_bytea, @c_text_array, @c_integer_array ) "; 
        public class InsertPostgresTypesArgs
        {
            public bool? CBoolean { get; set; }
            public byte[] CBit { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public async Task InsertPostgresTypes(InsertPostgresTypesArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("c_boolean", args.CBoolean);
                queryParams.Add("c_bit", args.CBit);
                queryParams.Add("c_smallint", args.CSmallint);
                queryParams.Add("c_integer", args.CInteger);
                queryParams.Add("c_bigint", args.CBigint);
                queryParams.Add("c_real", args.CReal);
                queryParams.Add("c_numeric", args.CNumeric);
                queryParams.Add("c_decimal", args.CDecimal);
                queryParams.Add("c_double_precision", args.CDoublePrecision);
                queryParams.Add("c_money", args.CMoney);
                queryParams.Add("c_date", args.CDate);
                queryParams.Add("c_time", args.CTime);
                queryParams.Add("c_timestamp", args.CTimestamp);
                queryParams.Add("c_timestamp_with_tz", args.CTimestampWithTz);
                queryParams.Add("c_char", args.CChar);
                queryParams.Add("c_varchar", args.CVarchar);
                queryParams.Add("c_character_varying", args.CCharacterVarying);
                queryParams.Add("c_text", args.CText);
                queryParams.Add("c_bytea", args.CBytea);
                queryParams.Add("c_text_array", args.CTextArray);
                queryParams.Add("c_integer_array", args.CIntegerArray);
                await connection.ExecuteAsync(InsertPostgresTypesSql, queryParams);
            }
        }

        private const string InsertPostgresTypesBatchSql = "COPY postgres_types (c_boolean, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea) FROM STDIN (FORMAT BINARY)";
        public class InsertPostgresTypesBatchArgs
        {
            public bool? CBoolean { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
        };
        public async Task InsertPostgresTypesBatch(List<InsertPostgresTypesBatchArgs> args)
        {
            using (var ds = NpgsqlDataSource.Create(ConnectionString))
            {
                var connection = ds.CreateConnection();
                await connection.OpenAsync();
                using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresTypesBatchSql))
                {
                    foreach (var row in args)
                    {
                        await writer.StartRowAsync();
                        await writer.WriteAsync(row.CBoolean);
                        await writer.WriteAsync(row.CSmallint, NpgsqlDbType.Smallint);
                        await writer.WriteAsync(row.CInteger, NpgsqlDbType.Integer);
                        await writer.WriteAsync(row.CBigint, NpgsqlDbType.Bigint);
                        await writer.WriteAsync(row.CReal, NpgsqlDbType.Real);
                        await writer.WriteAsync(row.CNumeric, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CDecimal, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CDoublePrecision, NpgsqlDbType.Double);
                        await writer.WriteAsync(row.CMoney, NpgsqlDbType.Money);
                        await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                        await writer.WriteAsync(row.CTime, NpgsqlDbType.Time);
                        await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                        await writer.WriteAsync(row.CTimestampWithTz, NpgsqlDbType.TimestampTz);
                        await writer.WriteAsync(row.CChar);
                        await writer.WriteAsync(row.CVarchar);
                        await writer.WriteAsync(row.CCharacterVarying);
                        await writer.WriteAsync(row.CText);
                        await writer.WriteAsync(row.CBytea);
                    }

                    await writer.CompleteAsync();
                }

                await connection.CloseAsync();
            }
        }

        private const string GetPostgresTypesSql = "SELECT c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json, c_text_array, c_integer_array FROM postgres_types LIMIT 1";
        public class GetPostgresTypesRow
        {
            public bool? CBoolean { get; set; }
            public byte[] CBit { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CNumeric { get; set; }
            public float? CReal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public byte[] CBytea { get; set; }
            public string CText { get; set; }
            public object CJson { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public async Task<GetPostgresTypesRow> GetPostgresTypes()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresTypesRow>(GetPostgresTypesSql);
                return result;
            }
        }

        private const string GetPostgresTypesCntSql = "SELECT COUNT(1) AS cnt ,  c_smallint , c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea FROM  postgres_types  GROUP  BY  c_smallint , c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea LIMIT  1  ";  
        public class GetPostgresTypesCntRow
        {
            public long Cnt { get; set; }
            public short? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
        };
        public async Task<GetPostgresTypesCntRow> GetPostgresTypesCnt()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresTypesCntRow>(GetPostgresTypesCntSql);
                return result;
            }
        }

        private const string GetPostgresFunctionsSql = "SELECT MAX(c_integer) AS max_integer, MAX(c_varchar) AS max_varchar, MAX(c_timestamp) AS max_timestamp FROM  postgres_types  ";  
        public class GetPostgresFunctionsRow
        {
            public object MaxInteger { get; set; }
            public object MaxVarchar { get; set; }
            public object MaxTimestamp { get; set; }
        };
        public async Task<GetPostgresFunctionsRow> GetPostgresFunctions()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresFunctionsRow>(GetPostgresFunctionsSql);
                return result;
            }
        }

        private const string InsertPostgresGeoTypesSql = "INSERT INTO postgres_geometric_types (c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle) VALUES ( @c_point , @c_line, @c_lseg, @c_box, @c_path, @c_polygon, @c_circle ) "; 
        public class InsertPostgresGeoTypesArgs
        {
            public NpgsqlPoint? CPoint { get; set; }
            public NpgsqlLine? CLine { get; set; }
            public NpgsqlLSeg? CLseg { get; set; }
            public NpgsqlBox? CBox { get; set; }
            public NpgsqlPath? CPath { get; set; }
            public NpgsqlPolygon? CPolygon { get; set; }
            public NpgsqlCircle? CCircle { get; set; }
        };
        public async Task InsertPostgresGeoTypes(InsertPostgresGeoTypesArgs args)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var queryParams = new Dictionary<string, object>();
                queryParams.Add("c_point", args.CPoint);
                queryParams.Add("c_line", args.CLine);
                queryParams.Add("c_lseg", args.CLseg);
                queryParams.Add("c_box", args.CBox);
                queryParams.Add("c_path", args.CPath);
                queryParams.Add("c_polygon", args.CPolygon);
                queryParams.Add("c_circle", args.CCircle);
                await connection.ExecuteAsync(InsertPostgresGeoTypesSql, queryParams);
            }
        }

        private const string GetPostgresGeoTypesSql = "SELECT c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle FROM postgres_geometric_types LIMIT 1";
        public class GetPostgresGeoTypesRow
        {
            public NpgsqlPoint? CPoint { get; set; }
            public NpgsqlLine? CLine { get; set; }
            public NpgsqlLSeg? CLseg { get; set; }
            public NpgsqlBox? CBox { get; set; }
            public NpgsqlPath? CPath { get; set; }
            public NpgsqlPolygon? CPolygon { get; set; }
            public NpgsqlCircle? CCircle { get; set; }
        };
        public async Task<GetPostgresGeoTypesRow> GetPostgresGeoTypes()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresGeoTypesRow>(GetPostgresGeoTypesSql);
                return result;
            }
        }

        private const string TruncatePostgresTypesSql = "TRUNCATE TABLE postgres_types";
        public async Task TruncatePostgresTypes()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncatePostgresTypesSql);
            }
        }

        private const string TruncatePostgresGeoTypesSql = "TRUNCATE TABLE postgres_geometric_types";
        public async Task TruncatePostgresGeoTypes()
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncatePostgresGeoTypesSql);
            }
        }
    }
}