// auto-generated by sqlc - do not edit
namespace NpgsqlDapperLegacyExampleGen
{
    using Dapper;
    using NodaTime;
    using NodaTime.Extensions;
    using NpgsqlTypes;
    using System;
    using System.Data;
    using System.Linq;
    using System.Net;
    using System.Net.NetworkInformation;
    using System.Text.Json;
    using System.Xml;

    public static class Utils
    {
        private class NodaInstantTypeHandler : SqlMapper.TypeHandler<Instant>
        {
            public override Instant Parse(object value)
            {
                if (value is DateTime dt)
                {
                    if (dt.Kind != DateTimeKind.Utc)
                        dt = DateTime.SpecifyKind(dt, DateTimeKind.Utc);
                    return dt.ToInstant();
                }

                throw new DataException($"Cannot convert {value?.GetType()} to Instant");
            }

            public override void SetValue(IDbDataParameter parameter, Instant value)
            {
                parameter.Value = value;
            }
        }

        private class JsonElementTypeHandler : SqlMapper.TypeHandler<JsonElement>
        {
            public override JsonElement Parse(object value)
            {
                if (value is string s)
                    return JsonDocument.Parse(s).RootElement;
                throw new DataException($"Cannot convert {value?.GetType()} to JsonElement");
            }

            public override void SetValue(IDbDataParameter parameter, JsonElement value)
            {
                parameter.Value = value;
            }
        }

        private class XmlDocumentTypeHandler : SqlMapper.TypeHandler<XmlDocument>
        {
            public override XmlDocument Parse(object value)
            {
                if (value is string s)
                {
                    var xmlDoc = new XmlDocument();
                    xmlDoc.LoadXml(s);
                    return xmlDoc;
                }

                throw new DataException($"Cannot convert {value?.GetType()} to XmlDocument");
            }

            public override void SetValue(IDbDataParameter parameter, XmlDocument value)
            {
                if (value is null)
                    return;
                parameter.Value = value.OuterXml;
            }
        }

        public static void ConfigureSqlMapper()
        {
            SqlMapper.AddTypeHandler(typeof(Instant), new NodaInstantTypeHandler());
            SqlMapper.AddTypeHandler(typeof(JsonElement), new JsonElementTypeHandler());
            SqlMapper.AddTypeHandler(typeof(XmlDocument), new XmlDocumentTypeHandler());
            SqlMapper.AddTypeHandler(typeof(NpgsqlPoint), new NpgsqlTypeHandler<NpgsqlPoint>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlLine), new NpgsqlTypeHandler<NpgsqlLine>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlLSeg), new NpgsqlTypeHandler<NpgsqlLSeg>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlBox), new NpgsqlTypeHandler<NpgsqlBox>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlPath), new NpgsqlTypeHandler<NpgsqlPath>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlPolygon), new NpgsqlTypeHandler<NpgsqlPolygon>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlCircle), new NpgsqlTypeHandler<NpgsqlCircle>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlCidr), new NpgsqlTypeHandler<NpgsqlCidr>());
            SqlMapper.AddTypeHandler(typeof(IPAddress), new NpgsqlTypeHandler<IPAddress>());
            SqlMapper.AddTypeHandler(typeof(PhysicalAddress), new NpgsqlTypeHandler<PhysicalAddress>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlTsQuery), new NpgsqlTypeHandler<NpgsqlTsQuery>());
            SqlMapper.AddTypeHandler(typeof(NpgsqlTsVector), new NpgsqlTypeHandler<NpgsqlTsVector>());
        }

        private class NpgsqlTypeHandler<T> : SqlMapper.TypeHandler<T>
        {
            public override T Parse(object value)
            {
                return (T)value;
            }

            public override void SetValue(IDbDataParameter parameter, T value)
            {
                parameter.Value = value;
            }
        }
    }
}