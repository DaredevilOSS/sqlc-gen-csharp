// auto-generated by sqlc - do not edit
namespace SqliteDapperExampleGen
{
    using Dapper;
    using NodaTime;
    using NodaTime.Extensions;
    using NodaTime.Text;
    using System;
    using System.Data;
    using System.Linq;
    using System.Text.RegularExpressions;

    public static class Utils
    {
        private class DateTimeTypeHandler : SqlMapper.TypeHandler<DateTime>
        {
            public override DateTime Parse(object value)
            {
                if (value is string s)
                    return DateTime.Parse(s);
                if (value is long l)
                    return DateTimeOffset.FromUnixTimeSeconds(l).DateTime;
                throw new DataException($"Cannot convert {value?.GetType()} to DateTime");
            }

            public override void SetValue(IDbDataParameter parameter, DateTime value)
            {
                parameter.Value = value;
            }
        }

        private class NodaInstantTypeHandler : SqlMapper.TypeHandler<Instant>
        {
            public override Instant Parse(object value)
            {
                if (value is string s)
                    return InstantPattern.CreateWithInvariantCulture("yyyy-MM-dd HH:mm:ss").Parse(s).Value;
                if (value is long l)
                    return Instant.FromUnixTimeSeconds(l);
                throw new DataException($"Cannot convert {value?.GetType()} to Instant");
            }

            public override void SetValue(IDbDataParameter parameter, Instant value)
            {
                parameter.Value = value;
            }
        }

        public static void ConfigureSqlMapper()
        {
            SqlMapper.AddTypeHandler(typeof(DateTime), new DateTimeTypeHandler());
            SqlMapper.AddTypeHandler(typeof(Instant), new NodaInstantTypeHandler());
        }

        public static string TransformQueryForSliceArgs(string originalSql, int sliceSize, string paramName)
        {
            var paramArgs = Enumerable.Range(0, sliceSize).Select(i => $"@{paramName}Arg{i}").ToList();
            return originalSql.Replace($"/*SLICE:{paramName}*/@{paramName}", string.Join(",", paramArgs));
        }

        private static readonly Regex ValuesRegex = new Regex(@"VALUES\s*\((?<params>[^)]*)\)", RegexOptions.IgnoreCase);
        public static string TransformQueryForSqliteBatch(string originalSql, int cntRecords)
        {
            var match = ValuesRegex.Match(originalSql);
            if (!match.Success)
                throw new ArgumentException("The query does not contain a valid VALUES clause.");
            var valuesParams = match.Groups["params"].Value.Split(',').Select(p => p.Trim()).ToList();
            var batchRows = Enumerable.Range(0, cntRecords).Select(i => "(" + string.Join(", ", valuesParams.Select(p => $"{p}{i}")) + ")");
            var batchValuesClause = "VALUES " + string.Join(",\n", batchRows);
            return ValuesRegex.Replace(originalSql, batchValuesClause);
        }
    }
}