// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Dapper;
using Microsoft.Data.Sqlite;

namespace SqliteDapperExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
    public class GetAuthorRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public class GetAuthorArgs
    {
        public string Name { get; set; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, queryParams);
            return result;
        }
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
    public class ListAuthorsRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
            return result.AsList();
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public class CreateAuthorArgs
    {
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("bio", args.Bio);
            await connection.ExecuteAsync(CreateAuthorSql, queryParams);
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public class CreateAuthorReturnIdRow
    {
        public int Id { get; set; }
    };
    public class CreateAuthorReturnIdArgs
    {
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public async Task<int> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("bio", args.Bio);
            return await connection.QuerySingleAsync<int>(CreateAuthorReturnIdSql, queryParams);
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public class GetAuthorByIdRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public class GetAuthorByIdArgs
    {
        public int Id { get; set; }
    };
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("id", args.Id);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow?>(GetAuthorByIdSql, queryParams);
            return result;
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public class UpdateAuthorsArgs
    {
        public string? Bio { get; set; }
    };
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("bio", args.Bio);
            return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
        }
    }

    private const string SelectAuthorsWithSliceSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
    public class SelectAuthorsWithSliceRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public class SelectAuthorsWithSliceArgs
    {
        public int[] Ids { get; set; }
    };
    public async Task<List<SelectAuthorsWithSliceRow>> SelectAuthorsWithSlice(SelectAuthorsWithSliceArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var sqlText = SelectAuthorsWithSliceSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            var result = await connection.QueryAsync<SelectAuthorsWithSliceRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string SelectAuthorsWithTwoSlicesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names)";
    public class SelectAuthorsWithTwoSlicesRow
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public class SelectAuthorsWithTwoSlicesArgs
    {
        public int[] Ids { get; set; }
        public string[] Names { get; set; }
    };
    public async Task<List<SelectAuthorsWithTwoSlicesRow>> SelectAuthorsWithTwoSlices(SelectAuthorsWithTwoSlicesArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var sqlText = SelectAuthorsWithTwoSlicesSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            sqlText = Utils.GetTransformedString(sqlText, args.Names, "Names", "names");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            for (int i = 0; i < args.Names.Length; i++)
                queryParams.Add($"@NamesArg{i}", args.Names[i]);
            var result = await connection.QueryAsync<SelectAuthorsWithTwoSlicesRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public class DeleteAuthorArgs
    {
        public string Name { get; set; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
    public class CreateBookArgs
    {
        public string Name { get; set; }
        public int AuthorId { get; set; }
    };
    public async Task CreateBook(CreateBookArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("author_id", args.AuthorId);
            await connection.ExecuteAsync(CreateBookSql, queryParams);
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name";
    public class ListAllAuthorsBooksRow
    {
        public Author Author { get; set; }
        public Book Book { get; set; }
    };
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var result = await connection.QueryAsync<ListAllAuthorsBooksRow>(ListAllAuthorsBooksSql);
            return result.AsList();
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id > authors2 . id  ";  
    public class GetDuplicateAuthorsRow
    {
        public Author Author { get; set; }
        public Author Author2 { get; set; }
    };
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var result = await connection.QueryAsync<GetDuplicateAuthorsRow>(GetDuplicateAuthorsSql);
            return result.AsList();
        }
    }

    private const string DeleteAllAuthorsSql = "DELETE FROM authors";
    public async Task DeleteAllAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            await connection.ExecuteAsync(DeleteAllAuthorsSql);
        }
    }

    private const string DeleteAllBooksSql = "DELETE FROM books";
    public async Task DeleteAllBooks()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            await connection.ExecuteAsync(DeleteAllBooksSql);
        }
    }
}