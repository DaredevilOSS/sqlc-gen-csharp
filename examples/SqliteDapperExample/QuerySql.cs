// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Dapper;
using Microsoft.Data.Sqlite;

namespace SqliteDapperExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
    public class GetAuthorRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, queryParams);
            return result;
        }
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
    public class ListAuthorsRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
            return result.AsList();
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public class CreateAuthorArgs
    {
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            await connection.ExecuteAsync(CreateAuthorSql, queryParams);
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public class CreateAuthorReturnIdRow
    {
        public int Id { get; init; }
    };
    public class CreateAuthorReturnIdArgs
    {
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<int> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            return await connection.QuerySingleAsync<int>(CreateAuthorReturnIdSql, queryParams);
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public class GetAuthorByIdRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorByIdArgs
    {
        public int Id { get; init; }
    };
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("id", args.Id);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow?>(GetAuthorByIdSql, queryParams);
            return result;
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public class UpdateAuthorsArgs
    {
        public string? Bio { get; init; }
    };
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
        }
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
    public class GetAuthorsByIdsRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorsByIdsArgs
    {
        public required int[] Ids { get; init; }
    };
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var sqlText = GetAuthorsByIdsSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            var result = await connection.QueryAsync<GetAuthorsByIdsRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names)";
    public class GetAuthorsByIdsAndNamesRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorsByIdsAndNamesArgs
    {
        public required int[] Ids { get; init; }
        public required string[] Names { get; init; }
    };
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var sqlText = GetAuthorsByIdsAndNamesSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            sqlText = Utils.GetTransformedString(sqlText, args.Names, "Names", "names");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            for (int i = 0; i < args.Names.Length; i++)
                queryParams.Add($"@NamesArg{i}", args.Names[i]);
            var result = await connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public class DeleteAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
    public class CreateBookArgs
    {
        public required string Name { get; init; }
        public int AuthorId { get; init; }
    };
    public async Task CreateBook(CreateBookArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("author_id", args.AuthorId);
            await connection.ExecuteAsync(CreateBookSql, queryParams);
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name  ";  
    public class ListAllAuthorsBooksRow
    {
        public Author Author { get; init; }
        public Book Book { get; init; }
    };
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(ListAllAuthorsBooksSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt32(3), Name = reader.GetString(4), AuthorId = reader.GetInt32(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id > authors2 . id  ";  
    public class GetDuplicateAuthorsRow
    {
        public Author Author { get; init; }
        public Author Author2 { get; init; }
    };
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetDuplicateAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt32(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
    public class GetAuthorsByBookNameRow
    {
        public int Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public Book Book { get; init; }
    };
    public class GetAuthorsByBookNameArgs
    {
        public required string Name { get; init; }
    };
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetAuthorsByBookNameSql, connection))
            {
                if (args.Name != null)
                    command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt32(3), Name = reader.GetString(4), AuthorId = reader.GetInt32(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string DeleteAllAuthorsSql = "DELETE FROM authors";
    public async Task DeleteAllAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            await connection.ExecuteAsync(DeleteAllAuthorsSql);
        }
    }
}