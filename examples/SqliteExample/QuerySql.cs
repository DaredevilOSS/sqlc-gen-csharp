// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Data.Sqlite;

namespace SqliteExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(int Id, string Name, string? Bio);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt32(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(int Id, string Name, string? Bio);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(ListAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAuthorsRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public readonly record struct CreateAuthorArgs(string Name, string? Bio);
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(CreateAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public readonly record struct CreateAuthorReturnIdRow(int Id);
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<int> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(CreateAuthorReturnIdSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt32(result);
            }
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(int Id, string Name, string? Bio);
    public readonly record struct GetAuthorByIdArgs(int Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetAuthorByIdSql, connection))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorByIdRow
                        {
                            Id = reader.GetInt32(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(UpdateAuthorsSql, connection))
            {
                command.Parameters.AddWithValue("@bio", args.Bio!);
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
    public readonly record struct GetAuthorsByIdsRow(int Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsArgs(int[] Ids);
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            var sqlText = GetAuthorsByIdsSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            using (var command = new SqliteCommand(sqlText, connection))
            {
                for (int i = 0; i < args.Ids.Length; i++)
                    command.Parameters.AddWithValue($"@IdsArg{i}", args.Ids[i]);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names)";
    public readonly record struct GetAuthorsByIdsAndNamesRow(int Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsAndNamesArgs(int[] Ids, string[] Names);
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            var sqlText = GetAuthorsByIdsAndNamesSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            sqlText = Utils.GetTransformedString(sqlText, args.Names, "Names", "names");
            using (var command = new SqliteCommand(sqlText, connection))
            {
                for (int i = 0; i < args.Ids.Length; i++)
                    command.Parameters.AddWithValue($"@IdsArg{i}", args.Ids[i]);
                for (int i = 0; i < args.Names.Length; i++)
                    command.Parameters.AddWithValue($"@NamesArg{i}", args.Names[i]);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsAndNamesRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(DeleteAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
    public readonly record struct CreateBookArgs(string Name, int AuthorId);
    public async Task CreateBook(CreateBookArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(CreateBookSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@author_id", args.AuthorId);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name  ";  
    public readonly record struct ListAllAuthorsBooksRow(Author Author, Book Book);
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(ListAllAuthorsBooksSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt32(3), Name = reader.GetString(4), AuthorId = reader.GetInt32(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id > authors2 . id  ";  
    public readonly record struct GetDuplicateAuthorsRow(Author Author, Author Author2);
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetDuplicateAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt32(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
    public readonly record struct GetAuthorsByBookNameRow(int Id, string Name, string? Bio, Book Book);
    public readonly record struct GetAuthorsByBookNameArgs(string Name);
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(GetAuthorsByBookNameSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt32(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt32(3), Name = reader.GetString(4), AuthorId = reader.GetInt32(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string DeleteAllAuthorsSql = "DELETE FROM authors";
    public async Task DeleteAllAuthors()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(DeleteAllAuthorsSql, connection))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string DeleteAllBooksSql = "DELETE FROM books";
    public async Task DeleteAllBooks()
    {
        using (var connection = new SqliteConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new SqliteCommand(DeleteAllBooksSql, connection))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }
}