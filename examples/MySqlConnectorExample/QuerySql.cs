// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;
using System.Globalization;
using System.IO;
using CsvHelper;
using CsvHelper.Configuration;
using System.Linq;

namespace MySqlConnectorExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(GetAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Created = reader.GetDateTime(3)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(long Id, string Name, string? Bio, DateTime Created);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(ListAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) });
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public readonly record struct CreateAuthorArgs(string Name, string? Bio);
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(CreateAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(CreateAuthorReturnIdSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                await command.ExecuteNonQueryAsync();
                return command.LastInsertedId;
            }
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorByIdArgs(long Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(GetAuthorByIdSql, connection))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorByIdRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Created = reader.GetDateTime(3)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(DeleteAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors";
    public async Task TruncateAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(TruncateAuthorsSql, connection))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(UpdateAuthorsSql, connection))
            {
                command.Parameters.AddWithValue("@bio", args.Bio!);
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    private const string SelectAuthorsWithSliceSql = "SELECT id, name, bio, created FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
    public readonly record struct SelectAuthorsWithSliceRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct SelectAuthorsWithSliceArgs(long[] Ids);
    public async Task<List<SelectAuthorsWithSliceRow>> SelectAuthorsWithSlice(SelectAuthorsWithSliceArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            var transformSql = SelectAuthorsWithSliceSql;
            var IdsArgs = Enumerable.Range(0, args.Ids.Length).Select(i => $"@{nameof(args.Ids)}Arg{i}").ToList();
            transformSql = transformSql.Replace("/*SLICE:ids*/@ids", string.Join(",", IdsArgs));
            using (var command = new MySqlCommand(transformSql, connection))
            {
                foreach (var(value, i)in args.Ids.Select((v, i) => (v, i)))
                {
                    command.Parameters.AddWithValue($"@{nameof(args.Ids)}Arg{i}", value);
                }

                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<SelectAuthorsWithSliceRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new SelectAuthorsWithSliceRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) });
                    }

                    return result;
                }
            }
        }
    }

    private const string TruncateCopyToTestsSql = "TRUNCATE TABLE copy_tests";
    public async Task TruncateCopyToTests()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(TruncateCopyToTestsSql, connection))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string CopyToTestsSql = "INSERT INTO copy_tests (c_int, c_varchar, c_date, c_timestamp) VALUES (@c_int, @c_varchar, @c_date, @c_timestamp)";
    public readonly record struct CopyToTestsArgs(int CInt, string CVarchar, DateTime CDate, DateTime CTimestamp);
    public async Task CopyToTests(List<CopyToTestsArgs> args)
    {
        var config = new CsvConfiguration(CultureInfo.CurrentCulture)
        {
            Delimiter = ","
        };
        using (var writer = new StreamWriter("input.csv"))
        using (var csvWriter = new CsvWriter(writer, config))
            await csvWriter.WriteRecordsAsync(args);
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            var loader = new MySqlBulkLoader(connection)
            {
                Local = true,
                TableName = "copy_tests",
                FieldTerminator = ",",
                FileName = "input.csv",
                NumberOfLinesToSkip = 1
            };
            await loader.LoadAsync();
            await connection.CloseAsync();
        }
    }

    private const string CountCopyRowsSql = "SELECT COUNT(1) AS cnt FROM copy_tests";
    public readonly record struct CountCopyRowsRow(long Cnt);
    public async Task<CountCopyRowsRow?> CountCopyRows()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(CountCopyRowsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new CountCopyRowsRow
                        {
                            Cnt = reader.GetInt64(0)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string TestSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM node_mysql_types LIMIT 1";
    public readonly record struct TestRow(byte[]? CBit, int? CTinyint, int? CBool, int? CBoolean, int? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, long CSerial, string? CDecimal, string? CDec, string? CNumeric, string? CFixed, double? CFloat, double? CDouble, double? CDoublePrecision, DateTime? CDate, string? CTime, DateTime? CDatetime, DateTime? CTimestamp, int? CYear, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, string? CTinytext, byte[]? CBlob, string? CText, byte[]? CMediumblob, string? CMediumtext, byte[]? CLongblob, string? CLongtext, object? CJson);
    public async Task<TestRow?> Test()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            connection.Open();
            using (var command = new MySqlCommand(TestSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new TestRow
                        {
                            CBit = reader.IsDBNull(0) ? null : Utils.GetBytes(reader, 0),
                            CTinyint = reader.IsDBNull(1) ? null : reader.GetInt32(1),
                            CBool = reader.IsDBNull(2) ? null : reader.GetInt32(2),
                            CBoolean = reader.IsDBNull(3) ? null : reader.GetInt32(3),
                            CSmallint = reader.IsDBNull(4) ? null : reader.GetInt32(4),
                            CMediumint = reader.IsDBNull(5) ? null : reader.GetInt32(5),
                            CInt = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                            CInteger = reader.IsDBNull(7) ? null : reader.GetInt32(7),
                            CBigint = reader.IsDBNull(8) ? null : reader.GetInt64(8),
                            CSerial = reader.GetInt64(9),
                            CDecimal = reader.IsDBNull(10) ? null : reader.GetString(10),
                            CDec = reader.IsDBNull(11) ? null : reader.GetString(11),
                            CNumeric = reader.IsDBNull(12) ? null : reader.GetString(12),
                            CFixed = reader.IsDBNull(13) ? null : reader.GetString(13),
                            CFloat = reader.IsDBNull(14) ? null : reader.GetDouble(14),
                            CDouble = reader.IsDBNull(15) ? null : reader.GetDouble(15),
                            CDoublePrecision = reader.IsDBNull(16) ? null : reader.GetDouble(16),
                            CDate = reader.IsDBNull(17) ? null : reader.GetDateTime(17),
                            CTime = reader.IsDBNull(18) ? null : reader.GetString(18),
                            CDatetime = reader.IsDBNull(19) ? null : reader.GetDateTime(19),
                            CTimestamp = reader.IsDBNull(20) ? null : reader.GetDateTime(20),
                            CYear = reader.IsDBNull(21) ? null : reader.GetInt32(21),
                            CChar = reader.IsDBNull(22) ? null : reader.GetString(22),
                            CNchar = reader.IsDBNull(23) ? null : reader.GetString(23),
                            CNationalChar = reader.IsDBNull(24) ? null : reader.GetString(24),
                            CVarchar = reader.IsDBNull(25) ? null : reader.GetString(25),
                            CBinary = reader.IsDBNull(26) ? null : Utils.GetBytes(reader, 26),
                            CVarbinary = reader.IsDBNull(27) ? null : Utils.GetBytes(reader, 27),
                            CTinyblob = reader.IsDBNull(28) ? null : Utils.GetBytes(reader, 28),
                            CTinytext = reader.IsDBNull(29) ? null : reader.GetString(29),
                            CBlob = reader.IsDBNull(30) ? null : Utils.GetBytes(reader, 30),
                            CText = reader.IsDBNull(31) ? null : reader.GetString(31),
                            CMediumblob = reader.IsDBNull(32) ? null : Utils.GetBytes(reader, 32),
                            CMediumtext = reader.IsDBNull(33) ? null : reader.GetString(33),
                            CLongblob = reader.IsDBNull(34) ? null : Utils.GetBytes(reader, 34),
                            CLongtext = reader.IsDBNull(35) ? null : reader.GetString(35),
                            CJson = reader.IsDBNull(36) ? null : reader.GetString(36)
                        };
                    }
                }
            }
        }

        return null;
    }
}