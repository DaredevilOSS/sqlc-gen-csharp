// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Text.Json;
using MySqlConnector;
using System.Globalization;
using System.IO;
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using System.Text;

namespace MySqlConnectorExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private QuerySql(MySqlTransaction transaction)
    {
        this.Transaction = transaction;
    }

    public static QuerySql WithTransaction(MySqlTransaction transaction)
    {
        return new QuerySql(transaction);
    }

    private MySqlTransaction? Transaction { get; }
    private string? ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetAuthorRow
                    {
                        Id = reader.GetInt64(0),
                        Name = reader.GetString(1),
                        Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                    };
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
    public readonly record struct ListAuthorsRow(long Id, string Name, string? Bio);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(ListAuthorsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = ListAuthorsSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<ListAuthorsRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                }

                return result;
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio)";
    public readonly record struct CreateAuthorArgs(long Id, string Name, string? Bio);
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = CreateAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@id", args.Id);
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateAuthorReturnIdSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    await command.ExecuteNonQueryAsync();
                    return command.LastInsertedId;
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = CreateAuthorReturnIdSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
            await command.ExecuteNonQueryAsync();
            return command.LastInsertedId;
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorByIdArgs(long Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorByIdSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorByIdRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorByIdSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@id", args.Id);
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetAuthorByIdRow
                    {
                        Id = reader.GetInt64(0),
                        Name = reader.GetString(1),
                        Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                    };
                }
            }
        }

        return null;
    }

    private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE  name  LIKE  COALESCE ( @name_pattern ,  '%' ) ";  
    public readonly record struct GetAuthorByNamePatternRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorByNamePatternArgs(string? NamePattern);
    public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorByNamePatternSql, connection))
                {
                    command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorByNamePatternRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorByNamePatternSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetAuthorByNamePatternRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                }

                return result;
            }
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE  name  =  @name  ";  
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(DeleteAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = DeleteAuthorSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string DeleteAllAuthorsSql = "DELETE FROM authors";
    public async Task DeleteAllAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(DeleteAllAuthorsSql, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = DeleteAllAuthorsSql;
            command.Transaction = this.Transaction;
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(UpdateAuthorsSql, connection))
                {
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    return await command.ExecuteNonQueryAsync();
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = UpdateAuthorsSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
            return await command.ExecuteNonQueryAsync();
        }
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
    public readonly record struct GetAuthorsByIdsRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsArgs(long[] Ids);
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        var transformedSql = GetAuthorsByIdsSql;
        transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(transformedSql, connection))
                {
                    for (int i = 0; i < args.Ids.Length; i++)
                        command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = transformedSql;
            command.Transaction = this.Transaction;
            for (int i = 0; i < args.Ids.Length; i++)
                command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetAuthorsByIdsRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                }

                return result;
            }
        }
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names)";
    public readonly record struct GetAuthorsByIdsAndNamesRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsAndNamesArgs(long[] Ids, string[] Names);
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        var transformedSql = GetAuthorsByIdsAndNamesSql;
        transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
        transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Names.Length, "names");
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(transformedSql, connection))
                {
                    for (int i = 0; i < args.Ids.Length; i++)
                        command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
                    for (int i = 0; i < args.Names.Length; i++)
                        command.Parameters.AddWithValue($"@namesArg{i}", args.Names[i]);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsAndNamesRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = transformedSql;
            command.Transaction = this.Transaction;
            for (int i = 0; i < args.Ids.Length; i++)
                command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
            for (int i = 0; i < args.Names.Length; i++)
                command.Parameters.AddWithValue($"@namesArg{i}", args.Names[i]);
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetAuthorsByIdsAndNamesRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                }

                return result;
            }
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
    public readonly record struct CreateBookArgs(string Name, long AuthorId);
    public async Task<long> CreateBook(CreateBookArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateBookSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@author_id", args.AuthorId);
                    await command.ExecuteNonQueryAsync();
                    return command.LastInsertedId;
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = CreateBookSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@author_id", args.AuthorId);
            await command.ExecuteNonQueryAsync();
            return command.LastInsertedId;
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name  ";  
    public readonly record struct ListAllAuthorsBooksRow(Author? Author, Book? Book);
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(ListAllAuthorsBooksSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAllAuthorsBooksRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = ListAllAuthorsBooksSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<ListAllAuthorsBooksRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                }

                return result;
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  ";  
    public readonly record struct GetDuplicateAuthorsRow(Author? Author, Author? Author2);
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetDuplicateAuthorsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetDuplicateAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetDuplicateAuthorsSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetDuplicateAuthorsRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                }

                return result;
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
    public readonly record struct GetAuthorsByBookNameRow(long Id, string Name, string? Bio, Book? Book);
    public readonly record struct GetAuthorsByBookNameArgs(string Name);
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorsByBookNameSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByBookNameRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorsByBookNameSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetAuthorsByBookNameRow>();
                while (await reader.ReadAsync())
                {
                    result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                }

                return result;
            }
        }
    }

    private const string InsertMysqlTypesSql = "INSERT INTO mysql_types (c_bit, c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob) VALUES ( @c_bit, @c_bool, @c_boolean, @c_tinyint, @c_smallint, @c_mediumint, @c_int, @c_integer, @c_bigint, @c_decimal, @c_dec, @c_numeric, @c_fixed, @c_float, @c_double, @c_double_precision, @c_char, @c_nchar, @c_national_char, @c_varchar, @c_tinytext, @c_mediumtext, @c_text, @c_longtext, @c_enum, @c_json, @c_json_string_override, @c_year, @c_date, @c_datetime, @c_timestamp, @c_binary, @c_varbinary, @c_tinyblob, @c_blob, @c_mediumblob, @c_longblob ) "; 
    public readonly record struct InsertMysqlTypesArgs(byte? CBit, bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, decimal? CDecimal, decimal? CDec, decimal? CNumeric, decimal? CFixed, double? CFloat, double? CDouble, double? CDoublePrecision, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, MysqlTypesCEnum? CEnum, JsonElement? CJson, string? CJsonStringOverride, short? CYear, DateTime? CDate, DateTime? CDatetime, DateTime? CTimestamp, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
    public async Task InsertMysqlTypes(InsertMysqlTypesArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(InsertMysqlTypesSql, connection))
                {
                    command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_bool", args.CBool ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinyint", args.CTinyint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumint", args.CMediumint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_int", args.CInt ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_dec", args.CDec ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_fixed", args.CFixed ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_float", args.CFloat ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_double", args.CDouble ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_nchar", args.CNchar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_national_char", args.CNationalChar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinytext", args.CTinytext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumtext", args.CMediumtext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_longtext", args.CLongtext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_enum", args.CEnum ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_json", args.CJson.HasValue ? args.CJson.Value.GetRawText() : (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_json_string_override", args.CJsonStringOverride ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_year", args.CYear ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_datetime", args.CDatetime ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_binary", args.CBinary ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_varbinary", args.CVarbinary ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinyblob", args.CTinyblob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_blob", args.CBlob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumblob", args.CMediumblob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_longblob", args.CLongblob ?? (object)DBNull.Value);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = InsertMysqlTypesSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_bool", args.CBool ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_tinyint", args.CTinyint ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_mediumint", args.CMediumint ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_int", args.CInt ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_dec", args.CDec ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_fixed", args.CFixed ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_float", args.CFloat ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_double", args.CDouble ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_nchar", args.CNchar ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_national_char", args.CNationalChar ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_tinytext", args.CTinytext ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_mediumtext", args.CMediumtext ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_longtext", args.CLongtext ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_enum", args.CEnum ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_json", args.CJson.HasValue ? args.CJson.Value.GetRawText() : (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_json_string_override", args.CJsonStringOverride ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_year", args.CYear ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_datetime", args.CDatetime ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_binary", args.CBinary ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_varbinary", args.CVarbinary ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_tinyblob", args.CTinyblob ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_blob", args.CBlob ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_mediumblob", args.CMediumblob ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@c_longblob", args.CLongblob ?? (object)DBNull.Value);
            await command.ExecuteNonQueryAsync();
        }
    }

    public readonly record struct InsertMysqlTypesBatchArgs(byte? CBit, bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CNumeric, decimal? CDecimal, decimal? CDec, decimal? CFixed, double? CDouble, double? CDoublePrecision, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, MysqlTypesCEnum? CEnum, JsonElement? CJson, string? CJsonStringOverride, short? CYear, DateTime? CDate, DateTime? CDatetime, DateTime? CTimestamp, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
    public async Task InsertMysqlTypesBatch(List<InsertMysqlTypesBatchArgs> args)
    {
        const string supportedDateTimeFormat = "yyyy-MM-dd H:mm:ss";
        var config = new CsvConfiguration(CultureInfo.CurrentCulture)
        {
            Delimiter = ",",
            NewLine = "\n"
        };
        var nullConverterFn = new Utils.NullToStringCsvConverter();
        using (var writer = new StreamWriter("input.csv", false, new UTF8Encoding(false)))
        using (var csvWriter = new CsvWriter(writer, config))
        {
            var options = new TypeConverterOptions
            {
                Formats = new[]
                {
                    supportedDateTimeFormat
                }
            };
            csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime>(options);
            csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime?>(options);
            csvWriter.Context.TypeConverterCache.AddConverter<bool>(new Utils.BoolToBitCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<bool?>(new Utils.BoolToBitCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<byte>(new Utils.ByteCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<byte?>(new Utils.ByteCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<byte[]>(new Utils.ByteArrayCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<byte[]?>(new Utils.ByteArrayCsvConverter());
            csvWriter.Context.TypeConverterCache.AddConverter<short?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<int?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<long?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<float?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<decimal?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<double?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<DateTime?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<string?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<JsonElement?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<object?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<MysqlTypesCEnum?>(nullConverterFn);
            csvWriter.Context.TypeConverterCache.AddConverter<ExtendedBiosBioType?>(nullConverterFn);
            await csvWriter.WriteRecordsAsync(args);
        }

        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            var loader = new MySqlBulkLoader(connection)
            {
                Local = true,
                TableName = "mysql_types",
                FileName = "input.csv",
                FieldTerminator = ",",
                FieldQuotationCharacter = '"',
                FieldQuotationOptional = true,
                NumberOfLinesToSkip = 1,
                LineTerminator = "\n"
            };
            loader.Columns.AddRange(new List<string> { "c_bit", "c_bool", "c_boolean", "c_tinyint", "c_smallint", "c_mediumint", "c_int", "c_integer", "c_bigint", "c_float", "c_numeric", "c_decimal", "c_dec", "c_fixed", "c_double", "c_double_precision", "c_char", "c_nchar", "c_national_char", "c_varchar", "c_tinytext", "c_mediumtext", "c_text", "c_longtext", "c_enum", "c_json", "c_json_string_override", "c_year", "c_date", "c_datetime", "c_timestamp", "c_binary", "c_varbinary", "c_tinyblob", "c_blob", "c_mediumblob", "c_longblob" });
            await loader.LoadAsync();
            await connection.CloseAsync();
        }
    }

    private const string GetMysqlTypesSql = "SELECT c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_decimal, c_dec, c_numeric, c_fixed, c_double, c_double_precision, c_year, c_date, c_time, c_datetime, c_timestamp, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_bit, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM mysql_types LIMIT 1";
    public readonly record struct GetMysqlTypesRow(bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CDecimal, decimal? CDec, decimal? CNumeric, decimal? CFixed, double? CDouble, double? CDoublePrecision, short? CYear, DateTime? CDate, string? CTime, DateTime? CDatetime, DateTime? CTimestamp, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, MysqlTypesCEnum? CEnum, JsonElement? CJson, string? CJsonStringOverride, byte? CBit, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
    public async Task<GetMysqlTypesRow?> GetMysqlTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetMysqlTypesSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetMysqlTypesRow
                            {
                                CBool = reader.IsDBNull(0) ? null : reader.GetBoolean(0),
                                CBoolean = reader.IsDBNull(1) ? null : reader.GetBoolean(1),
                                CTinyint = reader.IsDBNull(2) ? null : reader.GetInt16(2),
                                CSmallint = reader.IsDBNull(3) ? null : reader.GetInt16(3),
                                CMediumint = reader.IsDBNull(4) ? null : reader.GetInt32(4),
                                CInt = reader.IsDBNull(5) ? null : reader.GetInt32(5),
                                CInteger = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                                CBigint = reader.IsDBNull(7) ? null : reader.GetInt64(7),
                                CFloat = reader.IsDBNull(8) ? null : reader.GetDouble(8),
                                CDecimal = reader.IsDBNull(9) ? null : reader.GetDecimal(9),
                                CDec = reader.IsDBNull(10) ? null : reader.GetDecimal(10),
                                CNumeric = reader.IsDBNull(11) ? null : reader.GetDecimal(11),
                                CFixed = reader.IsDBNull(12) ? null : reader.GetDecimal(12),
                                CDouble = reader.IsDBNull(13) ? null : reader.GetDouble(13),
                                CDoublePrecision = reader.IsDBNull(14) ? null : reader.GetDouble(14),
                                CYear = reader.IsDBNull(15) ? null : reader.GetInt16(15),
                                CDate = reader.IsDBNull(16) ? null : reader.GetDateTime(16),
                                CTime = reader.IsDBNull(17) ? null : reader.GetString(17),
                                CDatetime = reader.IsDBNull(18) ? null : reader.GetDateTime(18),
                                CTimestamp = reader.IsDBNull(19) ? null : reader.GetDateTime(19),
                                CChar = reader.IsDBNull(20) ? null : reader.GetString(20),
                                CNchar = reader.IsDBNull(21) ? null : reader.GetString(21),
                                CNationalChar = reader.IsDBNull(22) ? null : reader.GetString(22),
                                CVarchar = reader.IsDBNull(23) ? null : reader.GetString(23),
                                CTinytext = reader.IsDBNull(24) ? null : reader.GetString(24),
                                CMediumtext = reader.IsDBNull(25) ? null : reader.GetString(25),
                                CText = reader.IsDBNull(26) ? null : reader.GetString(26),
                                CLongtext = reader.IsDBNull(27) ? null : reader.GetString(27),
                                CEnum = reader.IsDBNull(28) ? null : reader.GetString(28).ToMysqlTypesCEnum(),
                                CJson = reader.IsDBNull(29) ? null : JsonSerializer.Deserialize<JsonElement>(reader.GetString(29)),
                                CJsonStringOverride = reader.IsDBNull(30) ? null : reader.GetString(30),
                                CBit = reader.IsDBNull(31) ? null : reader.GetFieldValue<byte>(31),
                                CBinary = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                                CVarbinary = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                                CTinyblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34),
                                CBlob = reader.IsDBNull(35) ? null : reader.GetFieldValue<byte[]>(35),
                                CMediumblob = reader.IsDBNull(36) ? null : reader.GetFieldValue<byte[]>(36),
                                CLongblob = reader.IsDBNull(37) ? null : reader.GetFieldValue<byte[]>(37)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetMysqlTypesSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetMysqlTypesRow
                    {
                        CBool = reader.IsDBNull(0) ? null : reader.GetBoolean(0),
                        CBoolean = reader.IsDBNull(1) ? null : reader.GetBoolean(1),
                        CTinyint = reader.IsDBNull(2) ? null : reader.GetInt16(2),
                        CSmallint = reader.IsDBNull(3) ? null : reader.GetInt16(3),
                        CMediumint = reader.IsDBNull(4) ? null : reader.GetInt32(4),
                        CInt = reader.IsDBNull(5) ? null : reader.GetInt32(5),
                        CInteger = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                        CBigint = reader.IsDBNull(7) ? null : reader.GetInt64(7),
                        CFloat = reader.IsDBNull(8) ? null : reader.GetDouble(8),
                        CDecimal = reader.IsDBNull(9) ? null : reader.GetDecimal(9),
                        CDec = reader.IsDBNull(10) ? null : reader.GetDecimal(10),
                        CNumeric = reader.IsDBNull(11) ? null : reader.GetDecimal(11),
                        CFixed = reader.IsDBNull(12) ? null : reader.GetDecimal(12),
                        CDouble = reader.IsDBNull(13) ? null : reader.GetDouble(13),
                        CDoublePrecision = reader.IsDBNull(14) ? null : reader.GetDouble(14),
                        CYear = reader.IsDBNull(15) ? null : reader.GetInt16(15),
                        CDate = reader.IsDBNull(16) ? null : reader.GetDateTime(16),
                        CTime = reader.IsDBNull(17) ? null : reader.GetString(17),
                        CDatetime = reader.IsDBNull(18) ? null : reader.GetDateTime(18),
                        CTimestamp = reader.IsDBNull(19) ? null : reader.GetDateTime(19),
                        CChar = reader.IsDBNull(20) ? null : reader.GetString(20),
                        CNchar = reader.IsDBNull(21) ? null : reader.GetString(21),
                        CNationalChar = reader.IsDBNull(22) ? null : reader.GetString(22),
                        CVarchar = reader.IsDBNull(23) ? null : reader.GetString(23),
                        CTinytext = reader.IsDBNull(24) ? null : reader.GetString(24),
                        CMediumtext = reader.IsDBNull(25) ? null : reader.GetString(25),
                        CText = reader.IsDBNull(26) ? null : reader.GetString(26),
                        CLongtext = reader.IsDBNull(27) ? null : reader.GetString(27),
                        CEnum = reader.IsDBNull(28) ? null : reader.GetString(28).ToMysqlTypesCEnum(),
                        CJson = reader.IsDBNull(29) ? null : JsonSerializer.Deserialize<JsonElement>(reader.GetString(29)),
                        CJsonStringOverride = reader.IsDBNull(30) ? null : reader.GetString(30),
                        CBit = reader.IsDBNull(31) ? null : reader.GetFieldValue<byte>(31),
                        CBinary = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                        CVarbinary = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                        CTinyblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34),
                        CBlob = reader.IsDBNull(35) ? null : reader.GetFieldValue<byte[]>(35),
                        CMediumblob = reader.IsDBNull(36) ? null : reader.GetFieldValue<byte[]>(36),
                        CLongblob = reader.IsDBNull(37) ? null : reader.GetFieldValue<byte[]>(37)
                    };
                }
            }
        }

        return null;
    }

    private const string GetMysqlTypesCntSql = "SELECT COUNT(1) AS cnt, c_bool, c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint,  c_float , c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM  mysql_types  GROUP  BY  c_bool , c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob LIMIT  1  ";  
    public readonly record struct GetMysqlTypesCntRow(long Cnt, bool? CBool, bool? CBoolean, byte? CBit, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CNumeric, decimal? CDecimal, decimal? CDec, decimal? CFixed, double? CDouble, double? CDoublePrecision, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, MysqlTypesCEnum? CEnum, JsonElement? CJson, string? CJsonStringOverride, short? CYear, DateTime? CDate, DateTime? CDatetime, DateTime? CTimestamp, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
    public async Task<GetMysqlTypesCntRow?> GetMysqlTypesCnt()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetMysqlTypesCntSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetMysqlTypesCntRow
                            {
                                Cnt = reader.GetInt64(0),
                                CBool = reader.IsDBNull(1) ? null : reader.GetBoolean(1),
                                CBoolean = reader.IsDBNull(2) ? null : reader.GetBoolean(2),
                                CBit = reader.IsDBNull(3) ? null : reader.GetFieldValue<byte>(3),
                                CTinyint = reader.IsDBNull(4) ? null : reader.GetInt16(4),
                                CSmallint = reader.IsDBNull(5) ? null : reader.GetInt16(5),
                                CMediumint = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                                CInt = reader.IsDBNull(7) ? null : reader.GetInt32(7),
                                CInteger = reader.IsDBNull(8) ? null : reader.GetInt32(8),
                                CBigint = reader.IsDBNull(9) ? null : reader.GetInt64(9),
                                CFloat = reader.IsDBNull(10) ? null : reader.GetDouble(10),
                                CNumeric = reader.IsDBNull(11) ? null : reader.GetDecimal(11),
                                CDecimal = reader.IsDBNull(12) ? null : reader.GetDecimal(12),
                                CDec = reader.IsDBNull(13) ? null : reader.GetDecimal(13),
                                CFixed = reader.IsDBNull(14) ? null : reader.GetDecimal(14),
                                CDouble = reader.IsDBNull(15) ? null : reader.GetDouble(15),
                                CDoublePrecision = reader.IsDBNull(16) ? null : reader.GetDouble(16),
                                CChar = reader.IsDBNull(17) ? null : reader.GetString(17),
                                CNchar = reader.IsDBNull(18) ? null : reader.GetString(18),
                                CNationalChar = reader.IsDBNull(19) ? null : reader.GetString(19),
                                CVarchar = reader.IsDBNull(20) ? null : reader.GetString(20),
                                CTinytext = reader.IsDBNull(21) ? null : reader.GetString(21),
                                CMediumtext = reader.IsDBNull(22) ? null : reader.GetString(22),
                                CText = reader.IsDBNull(23) ? null : reader.GetString(23),
                                CLongtext = reader.IsDBNull(24) ? null : reader.GetString(24),
                                CEnum = reader.IsDBNull(25) ? null : reader.GetString(25).ToMysqlTypesCEnum(),
                                CJson = reader.IsDBNull(26) ? null : JsonSerializer.Deserialize<JsonElement>(reader.GetString(26)),
                                CJsonStringOverride = reader.IsDBNull(27) ? null : reader.GetString(27),
                                CYear = reader.IsDBNull(28) ? null : reader.GetInt16(28),
                                CDate = reader.IsDBNull(29) ? null : reader.GetDateTime(29),
                                CDatetime = reader.IsDBNull(30) ? null : reader.GetDateTime(30),
                                CTimestamp = reader.IsDBNull(31) ? null : reader.GetDateTime(31),
                                CBinary = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                                CVarbinary = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                                CTinyblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34),
                                CBlob = reader.IsDBNull(35) ? null : reader.GetFieldValue<byte[]>(35),
                                CMediumblob = reader.IsDBNull(36) ? null : reader.GetFieldValue<byte[]>(36),
                                CLongblob = reader.IsDBNull(37) ? null : reader.GetFieldValue<byte[]>(37)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetMysqlTypesCntSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetMysqlTypesCntRow
                    {
                        Cnt = reader.GetInt64(0),
                        CBool = reader.IsDBNull(1) ? null : reader.GetBoolean(1),
                        CBoolean = reader.IsDBNull(2) ? null : reader.GetBoolean(2),
                        CBit = reader.IsDBNull(3) ? null : reader.GetFieldValue<byte>(3),
                        CTinyint = reader.IsDBNull(4) ? null : reader.GetInt16(4),
                        CSmallint = reader.IsDBNull(5) ? null : reader.GetInt16(5),
                        CMediumint = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                        CInt = reader.IsDBNull(7) ? null : reader.GetInt32(7),
                        CInteger = reader.IsDBNull(8) ? null : reader.GetInt32(8),
                        CBigint = reader.IsDBNull(9) ? null : reader.GetInt64(9),
                        CFloat = reader.IsDBNull(10) ? null : reader.GetDouble(10),
                        CNumeric = reader.IsDBNull(11) ? null : reader.GetDecimal(11),
                        CDecimal = reader.IsDBNull(12) ? null : reader.GetDecimal(12),
                        CDec = reader.IsDBNull(13) ? null : reader.GetDecimal(13),
                        CFixed = reader.IsDBNull(14) ? null : reader.GetDecimal(14),
                        CDouble = reader.IsDBNull(15) ? null : reader.GetDouble(15),
                        CDoublePrecision = reader.IsDBNull(16) ? null : reader.GetDouble(16),
                        CChar = reader.IsDBNull(17) ? null : reader.GetString(17),
                        CNchar = reader.IsDBNull(18) ? null : reader.GetString(18),
                        CNationalChar = reader.IsDBNull(19) ? null : reader.GetString(19),
                        CVarchar = reader.IsDBNull(20) ? null : reader.GetString(20),
                        CTinytext = reader.IsDBNull(21) ? null : reader.GetString(21),
                        CMediumtext = reader.IsDBNull(22) ? null : reader.GetString(22),
                        CText = reader.IsDBNull(23) ? null : reader.GetString(23),
                        CLongtext = reader.IsDBNull(24) ? null : reader.GetString(24),
                        CEnum = reader.IsDBNull(25) ? null : reader.GetString(25).ToMysqlTypesCEnum(),
                        CJson = reader.IsDBNull(26) ? null : JsonSerializer.Deserialize<JsonElement>(reader.GetString(26)),
                        CJsonStringOverride = reader.IsDBNull(27) ? null : reader.GetString(27),
                        CYear = reader.IsDBNull(28) ? null : reader.GetInt16(28),
                        CDate = reader.IsDBNull(29) ? null : reader.GetDateTime(29),
                        CDatetime = reader.IsDBNull(30) ? null : reader.GetDateTime(30),
                        CTimestamp = reader.IsDBNull(31) ? null : reader.GetDateTime(31),
                        CBinary = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                        CVarbinary = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                        CTinyblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34),
                        CBlob = reader.IsDBNull(35) ? null : reader.GetFieldValue<byte[]>(35),
                        CMediumblob = reader.IsDBNull(36) ? null : reader.GetFieldValue<byte[]>(36),
                        CLongblob = reader.IsDBNull(37) ? null : reader.GetFieldValue<byte[]>(37)
                    };
                }
            }
        }

        return null;
    }

    private const string GetMysqlFunctionsSql = "SELECT MAX(c_int) AS max_int, MAX(c_varchar) AS max_varchar, MAX(c_timestamp) AS max_timestamp FROM  mysql_types  ";  
    public readonly record struct GetMysqlFunctionsRow(int? MaxInt, string? MaxVarchar, DateTime MaxTimestamp);
    public async Task<GetMysqlFunctionsRow?> GetMysqlFunctions()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetMysqlFunctionsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetMysqlFunctionsRow
                            {
                                MaxInt = reader.IsDBNull(0) ? null : reader.GetInt32(0),
                                MaxVarchar = reader.IsDBNull(1) ? null : reader.GetString(1),
                                MaxTimestamp = reader.GetDateTime(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetMysqlFunctionsSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetMysqlFunctionsRow
                    {
                        MaxInt = reader.IsDBNull(0) ? null : reader.GetInt32(0),
                        MaxVarchar = reader.IsDBNull(1) ? null : reader.GetString(1),
                        MaxTimestamp = reader.GetDateTime(2)
                    };
                }
            }
        }

        return null;
    }

    private const string TruncateMysqlTypesSql = "TRUNCATE TABLE mysql_types";
    public async Task TruncateMysqlTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(TruncateMysqlTypesSql, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = TruncateMysqlTypesSql;
            command.Transaction = this.Transaction;
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string CreateExtendedBioSql = "INSERT INTO extended.bios (author_name, name, bio_type) VALUES (@author_name, @name, @bio_type)";
    public readonly record struct CreateExtendedBioArgs(string? AuthorName, string? Name, ExtendedBiosBioType? BioType);
    public async Task CreateExtendedBio(CreateExtendedBioArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateExtendedBioSql, connection))
                {
                    command.Parameters.AddWithValue("@author_name", args.AuthorName ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@name", args.Name ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@bio_type", args.BioType ?? (object)DBNull.Value);
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = CreateExtendedBioSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@author_name", args.AuthorName ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@name", args.Name ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@bio_type", args.BioType ?? (object)DBNull.Value);
            await command.ExecuteNonQueryAsync();
        }
    }

    private const string GetFirstExtendedBioByTypeSql = "SELECT author_name, name, bio_type FROM extended.bios WHERE bio_type = @bio_type LIMIT 1";
    public readonly record struct GetFirstExtendedBioByTypeRow(string? AuthorName, string? Name, ExtendedBiosBioType? BioType);
    public readonly record struct GetFirstExtendedBioByTypeArgs(ExtendedBiosBioType? BioType);
    public async Task<GetFirstExtendedBioByTypeRow?> GetFirstExtendedBioByType(GetFirstExtendedBioByTypeArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetFirstExtendedBioByTypeSql, connection))
                {
                    command.Parameters.AddWithValue("@bio_type", args.BioType ?? (object)DBNull.Value);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetFirstExtendedBioByTypeRow
                            {
                                AuthorName = reader.IsDBNull(0) ? null : reader.GetString(0),
                                Name = reader.IsDBNull(1) ? null : reader.GetString(1),
                                BioType = reader.IsDBNull(2) ? null : reader.GetString(2).ToExtendedBiosBioType()
                            };
                        }
                    }
                }
            }

            return null;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetFirstExtendedBioByTypeSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@bio_type", args.BioType ?? (object)DBNull.Value);
            using (var reader = await command.ExecuteReaderAsync())
            {
                if (await reader.ReadAsync())
                {
                    return new GetFirstExtendedBioByTypeRow
                    {
                        AuthorName = reader.IsDBNull(0) ? null : reader.GetString(0),
                        Name = reader.IsDBNull(1) ? null : reader.GetString(1),
                        BioType = reader.IsDBNull(2) ? null : reader.GetString(2).ToExtendedBiosBioType()
                    };
                }
            }
        }

        return null;
    }

    private const string TruncateExtendedBiosSql = "TRUNCATE TABLE extended.bios";
    public async Task TruncateExtendedBios()
    {
        if (this.Transaction == null)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(TruncateExtendedBiosSql, connection))
                {
                    await command.ExecuteNonQueryAsync();
                }
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = TruncateExtendedBiosSql;
            command.Transaction = this.Transaction;
            await command.ExecuteNonQueryAsync();
        }
    }
}