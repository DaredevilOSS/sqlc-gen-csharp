// auto-generated by sqlc - do not edit
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using System.Collections.Generic;
using System.Linq;

namespace MySqlConnectorExampleGen;
public static class Utils
{
    public static string TransformQueryForSliceArgs(string originalSql, int sliceSize, string paramName)
    {
        var paramArgs = Enumerable.Range(0, sliceSize).Select(i => $"@{paramName}Arg{i}").ToList();
        return originalSql.Replace($"/*SLICE:{paramName}*/@{paramName}", string.Join(",", paramArgs));
    }

    public class MysqlTypesCSetCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is HashSet<MysqlTypesCSet> setVal)
                return string.Join(",", setVal);
            return base.ConvertToString(value, row, memberMapData);
        }
    }

    public class NullToStringCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            return value == null ? @"\N" : base.ConvertToString(value, row, memberMapData);
        }
    }

    public class BoolToBitCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            switch (value)
            {
                case null:
                    return @"\N";
                case bool b:
                    return b ? "1" : "0";
                default:
                    return base.ConvertToString(value, row, memberMapData);
            }
        }
    }

    public class ByteCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is byte byteVal)
                return System.Text.Encoding.UTF8.GetString(new byte[] { byteVal });
            return base.ConvertToString(value, row, memberMapData);
        }
    }

    public class ByteArrayCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is byte[] byteArray)
                return System.Text.Encoding.UTF8.GetString(byteArray);
            return base.ConvertToString(value, row, memberMapData);
        }
    }
}