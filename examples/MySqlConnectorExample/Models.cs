// auto-generated by sqlc - do not edit
using System;
using System.Collections.Generic;

namespace MySqlConnectorExampleGen;
public readonly record struct Author(long Id, string Name, string? Bio);
public readonly record struct Book(long Id, string Name, long AuthorId, string? Description);
public readonly record struct MysqlType(bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CDecimal, decimal? CDec, decimal? CNumeric, decimal? CFixed, double? CDouble, double? CDoublePrecision, short? CYear, DateTime? CDate, string? CTime, DateTime? CDatetime, DateTime? CTimestamp, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, MysqlTypesCEnum? CEnum, byte? CBit, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
public readonly record struct ExtendedBiographie(string? AuthorName, string? Name, ExtendedBiographiesBioType? BioType);
public enum MysqlTypesCEnum
{
    Invalid = 0, // reserved for invalid enum value
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class MysqlTypesCEnumExtensions
{
    private static readonly Dictionary<string, MysqlTypesCEnum> StringToEnum = new Dictionary<string, MysqlTypesCEnum>()
    {
        [string.Empty] = MysqlTypesCEnum.Invalid,
        ["small"] = MysqlTypesCEnum.Small,
        ["medium"] = MysqlTypesCEnum.Medium,
        ["big"] = MysqlTypesCEnum.Big
    };
    public static MysqlTypesCEnum ToMysqlTypesCEnum(this string me)
    {
        return StringToEnum[me];
    }
}

public enum ExtendedBiographiesBioType
{
    Invalid = 0, // reserved for invalid enum value
    Autobiography = 1,
    Biography = 2,
    Memoir = 3
}

public static class ExtendedBiographiesBioTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBiographiesBioType> StringToEnum = new Dictionary<string, ExtendedBiographiesBioType>()
    {
        [string.Empty] = ExtendedBiographiesBioType.Invalid,
        ["Autobiography"] = ExtendedBiographiesBioType.Autobiography,
        ["Biography"] = ExtendedBiographiesBioType.Biography,
        ["Memoir"] = ExtendedBiographiesBioType.Memoir
    };
    public static ExtendedBiographiesBioType ToExtendedBiographiesBioType(this string me)
    {
        return StringToEnum[me];
    }
}