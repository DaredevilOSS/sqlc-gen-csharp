// auto-generated by sqlc - do not edit
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace MySqlConnectorExampleGen;
public readonly record struct Author(long Id, string Name, string? Bio);
public readonly record struct Book(long Id, string Name, long AuthorId, string? Description);
public readonly record struct MysqlType(bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CDecimal, decimal? CDec, decimal? CNumeric, decimal? CFixed, double? CDouble, double? CDoublePrecision, short? CYear, DateTime? CDate, string? CTime, DateTime? CDatetime, DateTime? CTimestamp, string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, JsonElement? CJson, JsonElement? CJsonStringOverride, MysqlTypesCEnum? CEnum, MysqlTypesCSet[]? CSet, byte? CBit, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
public readonly record struct ExtendedBio(string? AuthorName, string? Name, ExtendedBiosBioType? BioType, ExtendedBiosAuthorType[]? AuthorType);
public enum MysqlTypesCEnum
{
    Invalid = 0, // reserved for invalid enum value
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class MysqlTypesCEnumExtensions
{
    private static readonly Dictionary<string, MysqlTypesCEnum> StringToEnum = new Dictionary<string, MysqlTypesCEnum>()
    {
        [string.Empty] = MysqlTypesCEnum.Invalid,
        ["small"] = MysqlTypesCEnum.Small,
        ["medium"] = MysqlTypesCEnum.Medium,
        ["big"] = MysqlTypesCEnum.Big
    };
    public static MysqlTypesCEnum ToMysqlTypesCEnum(this string me)
    {
        return StringToEnum[me];
    }

    public static MysqlTypesCEnum[] ToMysqlTypesCEnumArr(this string me)
    {
        return me.Split(',').ToList().Select(v => StringToEnum[v]).ToArray();
    }
}

public enum MysqlTypesCSet
{
    Invalid = 0, // reserved for invalid enum value
    Tea = 1,
    Coffee = 2,
    Milk = 3
}

public static class MysqlTypesCSetExtensions
{
    private static readonly Dictionary<string, MysqlTypesCSet> StringToEnum = new Dictionary<string, MysqlTypesCSet>()
    {
        [string.Empty] = MysqlTypesCSet.Invalid,
        ["tea"] = MysqlTypesCSet.Tea,
        ["coffee"] = MysqlTypesCSet.Coffee,
        ["milk"] = MysqlTypesCSet.Milk
    };
    public static MysqlTypesCSet ToMysqlTypesCSet(this string me)
    {
        return StringToEnum[me];
    }

    public static MysqlTypesCSet[] ToMysqlTypesCSetArr(this string me)
    {
        return me.Split(',').ToList().Select(v => StringToEnum[v]).ToArray();
    }
}

public enum ExtendedBiosBioType
{
    Invalid = 0, // reserved for invalid enum value
    Autobiography = 1,
    Biography = 2,
    Memoir = 3
}

public static class ExtendedBiosBioTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBiosBioType> StringToEnum = new Dictionary<string, ExtendedBiosBioType>()
    {
        [string.Empty] = ExtendedBiosBioType.Invalid,
        ["Autobiography"] = ExtendedBiosBioType.Autobiography,
        ["Biography"] = ExtendedBiosBioType.Biography,
        ["Memoir"] = ExtendedBiosBioType.Memoir
    };
    public static ExtendedBiosBioType ToExtendedBiosBioType(this string me)
    {
        return StringToEnum[me];
    }

    public static ExtendedBiosBioType[] ToExtendedBiosBioTypeArr(this string me)
    {
        return me.Split(',').ToList().Select(v => StringToEnum[v]).ToArray();
    }
}

public enum ExtendedBiosAuthorType
{
    Invalid = 0, // reserved for invalid enum value
    Author = 1,
    Editor = 2,
    Translator = 3
}

public static class ExtendedBiosAuthorTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBiosAuthorType> StringToEnum = new Dictionary<string, ExtendedBiosAuthorType>()
    {
        [string.Empty] = ExtendedBiosAuthorType.Invalid,
        ["Author"] = ExtendedBiosAuthorType.Author,
        ["Editor"] = ExtendedBiosAuthorType.Editor,
        ["Translator"] = ExtendedBiosAuthorType.Translator
    };
    public static ExtendedBiosAuthorType ToExtendedBiosAuthorType(this string me)
    {
        return StringToEnum[me];
    }

    public static ExtendedBiosAuthorType[] ToExtendedBiosAuthorTypeArr(this string me)
    {
        return me.Split(',').ToList().Select(v => StringToEnum[v]).ToArray();
    }
}