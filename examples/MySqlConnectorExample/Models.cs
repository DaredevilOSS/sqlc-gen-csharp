// auto-generated by sqlc - do not edit
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace MySqlConnectorExampleGen;
public readonly record struct MysqlNumericType(bool? CBool, bool? CBoolean, short? CTinyint, short? CSmallint, int? CMediumint, int? CInt, int? CInteger, long? CBigint, double? CFloat, decimal? CDecimal, decimal? CDec, decimal? CNumeric, decimal? CFixed, double? CDouble, double? CDoublePrecision);
public readonly record struct MysqlStringType(string? CChar, string? CNchar, string? CNationalChar, string? CVarchar, string? CTinytext, string? CMediumtext, string? CText, string? CLongtext, JsonElement? CJson, JsonElement? CJsonStringOverride, MysqlStringTypesCEnum? CEnum, HashSet<MysqlStringTypesCSet>? CSet);
public readonly record struct MysqlDatetimeType(short? CYear, DateTime? CDate, DateTime? CDatetime, DateTime? CTimestamp, TimeSpan? CTime);
public readonly record struct MysqlBinaryType(byte? CBit, byte[]? CBinary, byte[]? CVarbinary, byte[]? CTinyblob, byte[]? CBlob, byte[]? CMediumblob, byte[]? CLongblob);
public readonly record struct Author(long Id, string Name, string? Bio);
public readonly record struct Book(long Id, string Name, long AuthorId, string? Description);
public readonly record struct ExtendedBio(string? AuthorName, string? Name, ExtendedBiosBioType? BioType, HashSet<ExtendedBiosAuthorType>? AuthorType);
public enum MysqlStringTypesCEnum
{
    Invalid = 0, // reserved for invalid enum value
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class MysqlStringTypesCEnumExtensions
{
    private static readonly Dictionary<string, MysqlStringTypesCEnum> StringToEnum = new Dictionary<string, MysqlStringTypesCEnum>()
    {
        [string.Empty] = MysqlStringTypesCEnum.Invalid,
        ["small"] = MysqlStringTypesCEnum.Small,
        ["medium"] = MysqlStringTypesCEnum.Medium,
        ["big"] = MysqlStringTypesCEnum.Big
    };
    private static readonly Dictionary<MysqlStringTypesCEnum, string> EnumToString = new Dictionary<MysqlStringTypesCEnum, string>()
    {
        [MysqlStringTypesCEnum.Invalid] = string.Empty,
        [MysqlStringTypesCEnum.Small] = "small",
        [MysqlStringTypesCEnum.Medium] = "medium",
        [MysqlStringTypesCEnum.Big] = "big"
    };
    public static MysqlStringTypesCEnum ToMysqlStringTypesCEnum(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this MysqlStringTypesCEnum me)
    {
        return EnumToString[me];
    }

    public static HashSet<MysqlStringTypesCEnum> ToMysqlStringTypesCEnumSet(this string me)
    {
        return new HashSet<MysqlStringTypesCEnum>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum MysqlStringTypesCSet
{
    Invalid = 0, // reserved for invalid enum value
    Tea = 1,
    Coffee = 2,
    Milk = 3
}

public static class MysqlStringTypesCSetExtensions
{
    private static readonly Dictionary<string, MysqlStringTypesCSet> StringToEnum = new Dictionary<string, MysqlStringTypesCSet>()
    {
        [string.Empty] = MysqlStringTypesCSet.Invalid,
        ["tea"] = MysqlStringTypesCSet.Tea,
        ["coffee"] = MysqlStringTypesCSet.Coffee,
        ["milk"] = MysqlStringTypesCSet.Milk
    };
    private static readonly Dictionary<MysqlStringTypesCSet, string> EnumToString = new Dictionary<MysqlStringTypesCSet, string>()
    {
        [MysqlStringTypesCSet.Invalid] = string.Empty,
        [MysqlStringTypesCSet.Tea] = "tea",
        [MysqlStringTypesCSet.Coffee] = "coffee",
        [MysqlStringTypesCSet.Milk] = "milk"
    };
    public static MysqlStringTypesCSet ToMysqlStringTypesCSet(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this MysqlStringTypesCSet me)
    {
        return EnumToString[me];
    }

    public static HashSet<MysqlStringTypesCSet> ToMysqlStringTypesCSetSet(this string me)
    {
        return new HashSet<MysqlStringTypesCSet>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum ExtendedBiosBioType
{
    Invalid = 0, // reserved for invalid enum value
    Autobiography = 1,
    Biography = 2,
    Memoir = 3
}

public static class ExtendedBiosBioTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBiosBioType> StringToEnum = new Dictionary<string, ExtendedBiosBioType>()
    {
        [string.Empty] = ExtendedBiosBioType.Invalid,
        ["Autobiography"] = ExtendedBiosBioType.Autobiography,
        ["Biography"] = ExtendedBiosBioType.Biography,
        ["Memoir"] = ExtendedBiosBioType.Memoir
    };
    private static readonly Dictionary<ExtendedBiosBioType, string> EnumToString = new Dictionary<ExtendedBiosBioType, string>()
    {
        [ExtendedBiosBioType.Invalid] = string.Empty,
        [ExtendedBiosBioType.Autobiography] = "Autobiography",
        [ExtendedBiosBioType.Biography] = "Biography",
        [ExtendedBiosBioType.Memoir] = "Memoir"
    };
    public static ExtendedBiosBioType ToExtendedBiosBioType(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this ExtendedBiosBioType me)
    {
        return EnumToString[me];
    }

    public static HashSet<ExtendedBiosBioType> ToExtendedBiosBioTypeSet(this string me)
    {
        return new HashSet<ExtendedBiosBioType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum ExtendedBiosAuthorType
{
    Invalid = 0, // reserved for invalid enum value
    Author = 1,
    Editor = 2,
    Translator = 3
}

public static class ExtendedBiosAuthorTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBiosAuthorType> StringToEnum = new Dictionary<string, ExtendedBiosAuthorType>()
    {
        [string.Empty] = ExtendedBiosAuthorType.Invalid,
        ["Author"] = ExtendedBiosAuthorType.Author,
        ["Editor"] = ExtendedBiosAuthorType.Editor,
        ["Translator"] = ExtendedBiosAuthorType.Translator
    };
    private static readonly Dictionary<ExtendedBiosAuthorType, string> EnumToString = new Dictionary<ExtendedBiosAuthorType, string>()
    {
        [ExtendedBiosAuthorType.Invalid] = string.Empty,
        [ExtendedBiosAuthorType.Author] = "Author",
        [ExtendedBiosAuthorType.Editor] = "Editor",
        [ExtendedBiosAuthorType.Translator] = "Translator"
    };
    public static ExtendedBiosAuthorType ToExtendedBiosAuthorType(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this ExtendedBiosAuthorType me)
    {
        return EnumToString[me];
    }

    public static HashSet<ExtendedBiosAuthorType> ToExtendedBiosAuthorTypeSet(this string me)
    {
        return new HashSet<ExtendedBiosAuthorType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}