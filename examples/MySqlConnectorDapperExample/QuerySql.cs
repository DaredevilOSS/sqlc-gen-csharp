// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Dapper;
using MySqlConnector;
using System.Globalization;
using System.IO;
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using System.Text;

namespace MySqlConnectorDapperExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1; SELECT LAST_INSERT_ID()";
    public class GetAuthorRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
    };
    public class GetAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, queryParams);
            return result;
        }
    }

    private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name; SELECT LAST_INSERT_ID()";
    public class ListAuthorsRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
            return result.AsList();
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio); SELECT LAST_INSERT_ID()";
    public class CreateAuthorArgs
    {
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            await connection.ExecuteAsync(CreateAuthorSql, queryParams);
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio); SELECT LAST_INSERT_ID()";
    public class CreateAuthorReturnIdArgs
    {
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            return await connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams);
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1; SELECT LAST_INSERT_ID()";
    public class GetAuthorByIdRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
    };
    public class GetAuthorByIdArgs
    {
        public long Id { get; init; }
    };
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("id", args.Id);
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow?>(GetAuthorByIdSql, queryParams);
            return result;
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name; SELECT LAST_INSERT_ID()";
    public class DeleteAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
        }
    }

    private const string DeleteAllAuthorsSql = "DELETE FROM authors; SELECT LAST_INSERT_ID()";
    public async Task DeleteAllAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.ExecuteAsync(DeleteAllAuthorsSql);
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL ; SELECT  LAST_INSERT_ID ( ) "; 
    public class UpdateAuthorsArgs
    {
        public string? Bio { get; init; }
    };
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            if (args.Bio != null)
                queryParams.Add("bio", args.Bio);
            return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
        }
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio, created FROM authors WHERE id IN (/*SLICE:ids*/@ids); SELECT LAST_INSERT_ID()";
    public class GetAuthorsByIdsRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
    };
    public class GetAuthorsByIdsArgs
    {
        public required long[] Ids { get; init; }
    };
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var sqlText = GetAuthorsByIdsSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            var result = await connection.QueryAsync<GetAuthorsByIdsRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio, created FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names); SELECT LAST_INSERT_ID()";
    public class GetAuthorsByIdsAndNamesRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
    };
    public class GetAuthorsByIdsAndNamesArgs
    {
        public required long[] Ids { get; init; }
        public required string[] Names { get; init; }
    };
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var sqlText = GetAuthorsByIdsAndNamesSql;
            sqlText = Utils.GetTransformedString(sqlText, args.Ids, "Ids", "ids");
            sqlText = Utils.GetTransformedString(sqlText, args.Names, "Names", "names");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@IdsArg{i}", args.Ids[i]);
            for (int i = 0; i < args.Names.Length; i++)
                queryParams.Add($"@NamesArg{i}", args.Names[i]);
            var result = await connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(sqlText, queryParams);
            return result.AsList();
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id); SELECT LAST_INSERT_ID()";
    public class CreateBookArgs
    {
        public required string Name { get; init; }
        public long AuthorId { get; init; }
    };
    public async Task CreateBook(CreateBookArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("author_id", args.AuthorId);
            await connection.ExecuteAsync(CreateBookSql, queryParams);
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, authors.created, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name ; SELECT  LAST_INSERT_ID ( ) "; 
    public class ListAllAuthorsBooksRow
    {
        public Author Author { get; init; }
        public Book Book { get; init; }
    };
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(ListAllAuthorsBooksSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) }, Book = new Book { Id = reader.GetInt64(4), Name = reader.GetString(5), AuthorId = reader.GetInt64(6), Description = reader.IsDBNull(7) ? null : reader.GetString(7) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors1.created, authors2.id, authors2.name, authors2.bio, authors2.created FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id > authors2 . id ; SELECT  LAST_INSERT_ID ( ) "; 
    public class GetDuplicateAuthorsRow
    {
        public Author Author { get; init; }
        public Author Author2 { get; init; }
    };
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(GetDuplicateAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) }, Author2 = new Author { Id = reader.GetInt64(4), Name = reader.GetString(5), Bio = reader.IsDBNull(6) ? null : reader.GetString(6), Created = reader.GetDateTime(7) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, authors.created, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name ; SELECT  LAST_INSERT_ID ( ) "; 
    public class GetAuthorsByBookNameRow
    {
        public long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public DateTime Created { get; init; }
        public Book Book { get; init; }
    };
    public class GetAuthorsByBookNameArgs
    {
        public required string Name { get; init; }
    };
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(GetAuthorsByBookNameSql, connection))
            {
                if (args.Name != null)
                    command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3), Book = new Book { Id = reader.GetInt64(4), Name = reader.GetString(5), AuthorId = reader.GetInt64(6), Description = reader.IsDBNull(7) ? null : reader.GetString(7) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string InsertMysqlTypesBatchSql = "INSERT INTO mysql_types (c_int, c_varchar, c_date, c_timestamp) VALUES (@c_int, @c_varchar, @c_date, @c_timestamp); SELECT LAST_INSERT_ID()";
    public class InsertMysqlTypesBatchArgs
    {
        public int? CInt { get; init; }
        public string? CVarchar { get; init; }
        public DateTime? CDate { get; init; }
        public DateTime? CTimestamp { get; init; }
    };
    public async Task InsertMysqlTypesBatch(List<InsertMysqlTypesBatchArgs> args)
    {
        const string supportedDateTimeFormat = "yyyy-MM-dd H:mm:ss";
        var config = new CsvConfiguration(CultureInfo.CurrentCulture)
        {
            Delimiter = ","
        };
        using (var writer = new StreamWriter("input.csv", false, new UTF8Encoding(false)))
        using (var csvWriter = new CsvWriter(writer, config))
        {
            var options = new TypeConverterOptions
            {
                Formats = new[]
                {
                    supportedDateTimeFormat
                }
            };
            csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime>(options);
            csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime?>(options);
            await csvWriter.WriteRecordsAsync(args);
        }

        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            var loader = new MySqlBulkLoader(connection)
            {
                Local = true,
                TableName = "mysql_types",
                FieldTerminator = ",",
                FileName = "input.csv",
                FieldQuotationCharacter = '"',
                NumberOfLinesToSkip = 1
            };
            loader.Columns.AddRange(new List<string> { "c_int", "c_varchar", "c_date", "c_timestamp" });
            await loader.LoadAsync();
            await connection.CloseAsync();
        }
    }

    private const string GetMysqlTypesSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM mysql_types LIMIT 1; SELECT LAST_INSERT_ID()";
    public class GetMysqlTypesRow
    {
        public byte[]? CBit { get; init; }
        public int? CTinyint { get; init; }
        public int? CBool { get; init; }
        public int? CBoolean { get; init; }
        public int? CSmallint { get; init; }
        public int? CMediumint { get; init; }
        public int? CInt { get; init; }
        public int? CInteger { get; init; }
        public long? CBigint { get; init; }
        public long CSerial { get; init; }
        public string? CDecimal { get; init; }
        public string? CDec { get; init; }
        public string? CNumeric { get; init; }
        public string? CFixed { get; init; }
        public double? CFloat { get; init; }
        public double? CDouble { get; init; }
        public double? CDoublePrecision { get; init; }
        public DateTime? CDate { get; init; }
        public string? CTime { get; init; }
        public DateTime? CDatetime { get; init; }
        public DateTime? CTimestamp { get; init; }
        public int? CYear { get; init; }
        public string? CChar { get; init; }
        public string? CNchar { get; init; }
        public string? CNationalChar { get; init; }
        public string? CVarchar { get; init; }
        public byte[]? CBinary { get; init; }
        public byte[]? CVarbinary { get; init; }
        public byte[]? CTinyblob { get; init; }
        public string? CTinytext { get; init; }
        public byte[]? CBlob { get; init; }
        public string? CText { get; init; }
        public byte[]? CMediumblob { get; init; }
        public string? CMediumtext { get; init; }
        public byte[]? CLongblob { get; init; }
        public string? CLongtext { get; init; }
        public string? CJson { get; init; }
    };
    public async Task<GetMysqlTypesRow?> GetMysqlTypes()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var result = await connection.QueryFirstOrDefaultAsync<GetMysqlTypesRow?>(GetMysqlTypesSql);
            return result;
        }
    }

    private const string GetMysqlTypesAggSql = "SELECT COUNT(1) AS cnt , c_int, c_varchar, c_date, c_timestamp FROM  mysql_types  GROUP  BY  c_int , c_varchar, c_date, c_timestamp LIMIT  1 ; SELECT  LAST_INSERT_ID ( ) "; 
    public class GetMysqlTypesAggRow
    {
        public long Cnt { get; init; }
        public int? CInt { get; init; }
        public string? CVarchar { get; init; }
        public DateTime? CDate { get; init; }
        public DateTime? CTimestamp { get; init; }
    };
    public async Task<GetMysqlTypesAggRow?> GetMysqlTypesAgg()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var result = await connection.QueryFirstOrDefaultAsync<GetMysqlTypesAggRow?>(GetMysqlTypesAggSql);
            return result;
        }
    }

    private const string TruncateMysqlTypesSql = "TRUNCATE TABLE mysql_types; SELECT LAST_INSERT_ID()";
    public async Task TruncateMysqlTypes()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.ExecuteAsync(TruncateMysqlTypesSql);
        }
    }
}