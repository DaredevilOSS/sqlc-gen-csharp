// auto-generated by sqlc - do not edit
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using Dapper;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text.Json;

namespace MySqlConnectorDapperExampleGen;
public static class Utils
{
    private class JsonElementTypeHandler : SqlMapper.TypeHandler<JsonElement>
    {
        public override JsonElement Parse(object value)
        {
            if (value is string s)
                return JsonDocument.Parse(s).RootElement;
            throw new DataException($"Cannot convert {value?.GetType()} to JsonElement");
        }

        public override void SetValue(IDbDataParameter parameter, JsonElement value)
        {
            parameter.Value = value.GetRawText();
        }
    }

    public static void ConfigureSqlMapper()
    {
        SqlMapper.AddTypeHandler(typeof(JsonElement), new JsonElementTypeHandler());
        SqlMapper.AddTypeHandler(typeof(HashSet<ExtendedBiosAuthorType>), new ExtendedBiosAuthorTypeTypeHandler());
        SqlMapper.AddTypeHandler(typeof(HashSet<MysqlStringTypesCSet>), new MysqlStringTypesCSetTypeHandler());
    }

    public static string TransformQueryForSliceArgs(string originalSql, int sliceSize, string paramName)
    {
        var paramArgs = Enumerable.Range(0, sliceSize).Select(i => $"@{paramName}Arg{i}").ToList();
        return originalSql.Replace($"/*SLICE:{paramName}*/@{paramName}", string.Join(",", paramArgs));
    }

    private class ExtendedBiosAuthorTypeTypeHandler : SqlMapper.TypeHandler<HashSet<ExtendedBiosAuthorType>>
    {
        public override HashSet<ExtendedBiosAuthorType> Parse(object value)
        {
            if (value is string s)
                return s.ToExtendedBiosAuthorTypeSet();
            throw new DataException($"Cannot convert {value?.GetType()} to HashSet<ExtendedBiosAuthorType>");
        }

        public override void SetValue(IDbDataParameter parameter, HashSet<ExtendedBiosAuthorType> value)
        {
            parameter.Value = string.Join(",", value);
        }
    }

    private class MysqlStringTypesCSetTypeHandler : SqlMapper.TypeHandler<HashSet<MysqlStringTypesCSet>>
    {
        public override HashSet<MysqlStringTypesCSet> Parse(object value)
        {
            if (value is string s)
                return s.ToMysqlStringTypesCSetSet();
            throw new DataException($"Cannot convert {value?.GetType()} to HashSet<MysqlStringTypesCSet>");
        }

        public override void SetValue(IDbDataParameter parameter, HashSet<MysqlStringTypesCSet> value)
        {
            parameter.Value = string.Join(",", value);
        }
    }

    public class MysqlStringTypesCSetCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is HashSet<MysqlStringTypesCSet> setVal)
                return string.Join(",", setVal);
            return base.ConvertToString(value, row, memberMapData);
        }
    }

    public class NullToStringCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            return value == null ? @"\N" : base.ConvertToString(value, row, memberMapData);
        }
    }

    public class BoolToBitCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            switch (value)
            {
                case null:
                    return @"\N";
                case bool b:
                    return b ? "1" : "0";
                default:
                    return base.ConvertToString(value, row, memberMapData);
            }
        }
    }

    public class ByteCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is byte byteVal)
                return System.Text.Encoding.UTF8.GetString(new byte[] { byteVal });
            return base.ConvertToString(value, row, memberMapData);
        }
    }

    public class ByteArrayCsvConverter : DefaultTypeConverter
    {
        public override string? ConvertToString(object? value, IWriterRow row, MemberMapData memberMapData)
        {
            if (value == null)
                return @"\N";
            if (value is byte[] byteArray)
                return System.Text.Encoding.UTF8.GetString(byteArray);
            return base.ConvertToString(value, row, memberMapData);
        }
    }
}