// auto-generated by sqlc - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace NpgsqlLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Npgsql;
    using NpgsqlTypes;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetAuthorRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                    Created = reader.GetDateTime(3)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(ListAuthorsSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAuthorsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) });
                            }

                            return result;
                        }
                    }
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id, name, bio, created";
        public class CreateAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<CreateAuthorRow> CreateAuthor(CreateAuthorArgs args)
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(CreateAuthorSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new CreateAuthorRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                    Created = reader.GetDateTime(3)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(DeleteAuthorSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string TruncateAuthorsSql = "TRUNCATE TABLE authors";
        public async Task TruncateAuthors()
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TruncateAuthorsSql))
                    {
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(UpdateAuthorsSql))
                    {
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        return await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }

        private const string TruncateCopyToTestsSql = "TRUNCATE TABLE copy_tests";
        public async Task TruncateCopyToTests()
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TruncateCopyToTestsSql))
                    {
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string CopyToTestsSql = "COPY copy_tests (c_int, c_varchar, c_date, c_timestamp) FROM STDIN (FORMAT BINARY)";
        public class CopyToTestsArgs
        {
            public int CInt { get; set; }
            public string CVarchar { get; set; }
            public DateTime CDate { get; set; }
            public DateTime CTimestamp { get; set; }
        };
        public async Task CopyToTests(List<CopyToTestsArgs> args)
        {
            {
                using (var ds = NpgsqlDataSource.Create(ConnectionString))
                {
                    var connection = ds.CreateConnection();
                    await connection.OpenAsync();
                    using (var writer = await connection.BeginBinaryImportAsync(CopyToTestsSql))
                    {
                        foreach (var row in args)
                        {
                            await writer.StartRowAsync();
                            await writer.WriteAsync(row.CInt, NpgsqlDbType.Integer);
                            await writer.WriteAsync(row.CVarchar, NpgsqlDbType.Varchar);
                            await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                            await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                        }

                        await writer.CompleteAsync();
                    }

                    await connection.CloseAsync();
                }
            }
        }

        private const string CountCopyRowsSql = "SELECT COUNT(1) AS cnt FROM copy_tests";
        public class CountCopyRowsRow
        {
            public long Cnt { get; set; }
        };
        public async Task<CountCopyRowsRow> CountCopyRows()
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(CountCopyRowsSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new CountCopyRowsRow
                                {
                                    Cnt = reader.GetInt64(0)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }

        private const string TestSql = "SELECT c_bit, c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_double_precision, c_date, c_time, c_timestamp, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json FROM node_postgres_types LIMIT 1";
        public class TestRow
        {
            public byte[] CBit { get; set; }
            public int? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public int? CSerial { get; set; }
            public float? CDecimal { get; set; }
            public float? CNumeric { get; set; }
            public float? CReal { get; set; }
            public float? CDoublePrecision { get; set; }
            public DateTime? CDate { get; set; }
            public string CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public byte[] CBytea { get; set; }
            public string CText { get; set; }
            public object CJson { get; set; }
        };
        public async Task<TestRow> Test()
        {
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TestSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new TestRow
                                {
                                    CBit = reader.IsDBNull(0) ? null : Utils.GetBytes(reader, 0),
                                    CSmallint = reader.IsDBNull(1) ? (int? )null : reader.GetInt32(1),
                                    CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                                    CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                                    CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                                    CSerial = reader.IsDBNull(5) ? (int? )null : reader.GetInt32(5),
                                    CDecimal = reader.IsDBNull(6) ? (float? )null : reader.GetFloat(6),
                                    CNumeric = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                                    CReal = reader.IsDBNull(8) ? (float? )null : reader.GetFloat(8),
                                    CDoublePrecision = reader.IsDBNull(9) ? (float? )null : reader.GetFloat(9),
                                    CDate = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10),
                                    CTime = reader.IsDBNull(11) ? string.Empty : reader.GetString(11),
                                    CTimestamp = reader.IsDBNull(12) ? (DateTime? )null : reader.GetDateTime(12),
                                    CChar = reader.IsDBNull(13) ? string.Empty : reader.GetString(13),
                                    CVarchar = reader.IsDBNull(14) ? string.Empty : reader.GetString(14),
                                    CCharacterVarying = reader.IsDBNull(15) ? string.Empty : reader.GetString(15),
                                    CBytea = reader.IsDBNull(16) ? null : Utils.GetBytes(reader, 16),
                                    CText = reader.IsDBNull(17) ? string.Empty : reader.GetString(17),
                                    CJson = reader.IsDBNull(18) ? null : reader.GetString(18)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }
    }
}