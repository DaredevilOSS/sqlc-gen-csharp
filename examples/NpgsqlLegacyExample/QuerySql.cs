// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace NpgsqlLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Npgsql;
    using NpgsqlTypes;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                Created = reader.GetDateTime(3)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(ListAuthorsSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id, name, bio, created";
        public class CreateAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<CreateAuthorRow> CreateAuthor(CreateAuthorArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(CreateAuthorSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    if (args.Bio != null)
                        command.Parameters.AddWithValue("@bio", args.Bio);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new CreateAuthorRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                Created = reader.GetDateTime(3)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
        public class CreateAuthorReturnIdRow
        {
            public long Id { get; set; }
        };
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(CreateAuthorReturnIdSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    if (args.Bio != null)
                        command.Parameters.AddWithValue("@bio", args.Bio);
                    var result = await command.ExecuteScalarAsync();
                    return Convert.ToInt64(result);
                }
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorByIdSql))
                {
                    if (args.Id != null)
                        command.Parameters.AddWithValue("@id", args.Id);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorByIdRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                Created = reader.GetDateTime(3)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(DeleteAuthorSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string TruncateAuthorsSql = "TRUNCATE TABLE authors CASCADE";
        public async Task TruncateAuthors()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(TruncateAuthorsSql))
                {
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(UpdateAuthorsSql))
                {
                    if (args.Bio != null)
                        command.Parameters.AddWithValue("@bio", args.Bio);
                    return await command.ExecuteNonQueryAsync();
                }
            }
        }

        private const string GetAuthorsByIdsSql = "SELECT id, name, bio, created FROM authors WHERE id = ANY(@longArr_1::BIGINT[])";
        public class GetAuthorsByIdsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorsByIdsArgs
        {
            public long[] LongArr1 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorsByIdsSql))
                {
                    if (args.LongArr1 != null)
                        command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio, created FROM authors WHERE id = ANY(@longArr_1::BIGINT[]) AND name = ANY(@stringArr_2::TEXT[])";
        public class GetAuthorsByIdsAndNamesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorsByIdsAndNamesArgs
        {
            public long[] LongArr1 { get; set; }
            public string[] StringArr2 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorsByIdsAndNamesSql))
                {
                    if (args.LongArr1 != null)
                        command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                    if (args.StringArr2 != null)
                        command.Parameters.AddWithValue("@stringArr_2", args.StringArr2);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsAndNamesRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task CreateBook(CreateBookArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(CreateBookSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    if (args.AuthorId != null)
                        command.Parameters.AddWithValue("@author_id", args.AuthorId);
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, authors.created, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name";
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(ListAllAuthorsBooksSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAllAuthorsBooksRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) }, Book = new Book { Id = reader.GetInt64(4), Name = reader.GetString(5), AuthorId = reader.GetInt64(6), Description = reader.IsDBNull(7) ? string.Empty : reader.GetString(7) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors1.created, authors2.id, authors2.name, authors2.bio, authors2.created FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id > authors2 . id  ";  
        public class GetDuplicateAuthorsRow
        {
            public Author Author { get; set; }
            public Author Author2 { get; set; }
        };
        public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetDuplicateAuthorsSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetDuplicateAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3) }, Author2 = new Author { Id = reader.GetInt64(4), Name = reader.GetString(5), Bio = reader.IsDBNull(6) ? string.Empty : reader.GetString(6), Created = reader.GetDateTime(7) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, authors.created, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
        public class GetAuthorsByBookNameRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
            public Book Book { get; set; }
        };
        public class GetAuthorsByBookNameArgs
        {
            public string Name { get; set; }
        };
        public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorsByBookNameSql))
                {
                    if (args.Name != null)
                        command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByBookNameRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2), Created = reader.GetDateTime(3), Book = new Book { Id = reader.GetInt64(4), Name = reader.GetString(5), AuthorId = reader.GetInt64(6), Description = reader.IsDBNull(7) ? string.Empty : reader.GetString(7) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string InsertPostgresTypesSql = "INSERT INTO postgres_types (c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text, c_text_array, c_integer_array) VALUES ( @c_smallint , @c_boolean, @c_integer, @c_bigint, @c_serial, @c_decimal, @c_numeric, @c_real, @c_date, @c_timestamp, @c_char, @c_varchar, @c_character_varying, @c_text, @c_text_array, @c_integer_array ) RETURNING  id  "; 
        public class InsertPostgresTypesRow
        {
            public long Id { get; set; }
        };
        public class InsertPostgresTypesArgs
        {
            public int? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public int? CSerial { get; set; }
            public float? CDecimal { get; set; }
            public float? CNumeric { get; set; }
            public float? CReal { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CTimestamp { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public async Task<long> InsertPostgresTypes(InsertPostgresTypesArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(InsertPostgresTypesSql))
                {
                    if (args.CSmallint != null)
                        command.Parameters.AddWithValue("@c_smallint", args.CSmallint);
                    if (args.CBoolean != null)
                        command.Parameters.AddWithValue("@c_boolean", args.CBoolean);
                    if (args.CInteger != null)
                        command.Parameters.AddWithValue("@c_integer", args.CInteger);
                    if (args.CBigint != null)
                        command.Parameters.AddWithValue("@c_bigint", args.CBigint);
                    if (args.CSerial != null)
                        command.Parameters.AddWithValue("@c_serial", args.CSerial);
                    if (args.CDecimal != null)
                        command.Parameters.AddWithValue("@c_decimal", args.CDecimal);
                    if (args.CNumeric != null)
                        command.Parameters.AddWithValue("@c_numeric", args.CNumeric);
                    if (args.CReal != null)
                        command.Parameters.AddWithValue("@c_real", args.CReal);
                    if (args.CDate != null)
                        command.Parameters.AddWithValue("@c_date", args.CDate);
                    if (args.CTimestamp != null)
                        command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp);
                    if (args.CChar != null)
                        command.Parameters.AddWithValue("@c_char", args.CChar);
                    if (args.CVarchar != null)
                        command.Parameters.AddWithValue("@c_varchar", args.CVarchar);
                    if (args.CCharacterVarying != null)
                        command.Parameters.AddWithValue("@c_character_varying", args.CCharacterVarying);
                    if (args.CText != null)
                        command.Parameters.AddWithValue("@c_text", args.CText);
                    if (args.CTextArray != null)
                        command.Parameters.AddWithValue("@c_text_array", args.CTextArray);
                    if (args.CIntegerArray != null)
                        command.Parameters.AddWithValue("@c_integer_array", args.CIntegerArray);
                    var result = await command.ExecuteScalarAsync();
                    return Convert.ToInt64(result);
                }
            }
        }

        private const string InsertPostgresTypesBatchSql = "COPY postgres_types (c_smallint, c_boolean, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_varchar, c_date, c_timestamp) FROM STDIN (FORMAT BINARY)";
        public class InsertPostgresTypesBatchArgs
        {
            public int? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CDecimal { get; set; }
            public float? CNumeric { get; set; }
            public float? CReal { get; set; }
            public string CVarchar { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CTimestamp { get; set; }
        };
        public async Task InsertPostgresTypesBatch(List<InsertPostgresTypesBatchArgs> args)
        {
            using (var ds = NpgsqlDataSource.Create(ConnectionString))
            {
                var connection = ds.CreateConnection();
                await connection.OpenAsync();
                using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresTypesBatchSql))
                {
                    foreach (var row in args)
                    {
                        await writer.StartRowAsync();
                        await writer.WriteAsync(row.CSmallint, NpgsqlDbType.Smallint);
                        await writer.WriteAsync(row.CBoolean);
                        await writer.WriteAsync(row.CInteger, NpgsqlDbType.Integer);
                        await writer.WriteAsync(row.CBigint, NpgsqlDbType.Bigint);
                        await writer.WriteAsync(row.CDecimal, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CNumeric, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CReal, NpgsqlDbType.Real);
                        await writer.WriteAsync(row.CVarchar, NpgsqlDbType.Varchar);
                        await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                        await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                    }

                    await writer.CompleteAsync();
                }

                await connection.CloseAsync();
            }
        }

        private const string GetPostgresTypesSql = "SELECT id, c_bit, c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_double_precision, c_date, c_time, c_timestamp, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json, c_text_array, c_integer_array FROM postgres_types WHERE id = @id LIMIT 1";
        public class GetPostgresTypesRow
        {
            public long Id { get; set; }
            public byte[] CBit { get; set; }
            public int? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public int? CSerial { get; set; }
            public float? CDecimal { get; set; }
            public float? CNumeric { get; set; }
            public float? CReal { get; set; }
            public float? CDoublePrecision { get; set; }
            public DateTime? CDate { get; set; }
            public string CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public byte[] CBytea { get; set; }
            public string CText { get; set; }
            public object CJson { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public class GetPostgresTypesArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetPostgresTypesRow> GetPostgresTypes(GetPostgresTypesArgs args)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetPostgresTypesSql))
                {
                    if (args.Id != null)
                        command.Parameters.AddWithValue("@id", args.Id);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetPostgresTypesRow
                            {
                                Id = reader.GetInt64(0),
                                CBit = reader.IsDBNull(1) ? null : Utils.GetBytes(reader, 1),
                                CSmallint = reader.IsDBNull(2) ? (int? )null : reader.GetInt32(2),
                                CBoolean = reader.IsDBNull(3) ? (bool? )null : reader.GetBoolean(3),
                                CInteger = reader.IsDBNull(4) ? (int? )null : reader.GetInt32(4),
                                CBigint = reader.IsDBNull(5) ? (long? )null : reader.GetInt64(5),
                                CSerial = reader.IsDBNull(6) ? (int? )null : reader.GetInt32(6),
                                CDecimal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                                CNumeric = reader.IsDBNull(8) ? (float? )null : reader.GetFloat(8),
                                CReal = reader.IsDBNull(9) ? (float? )null : reader.GetFloat(9),
                                CDoublePrecision = reader.IsDBNull(10) ? (float? )null : reader.GetFloat(10),
                                CDate = reader.IsDBNull(11) ? (DateTime? )null : reader.GetDateTime(11),
                                CTime = reader.IsDBNull(12) ? string.Empty : reader.GetString(12),
                                CTimestamp = reader.IsDBNull(13) ? (DateTime? )null : reader.GetDateTime(13),
                                CChar = reader.IsDBNull(14) ? string.Empty : reader.GetString(14),
                                CVarchar = reader.IsDBNull(15) ? string.Empty : reader.GetString(15),
                                CCharacterVarying = reader.IsDBNull(16) ? string.Empty : reader.GetString(16),
                                CBytea = reader.IsDBNull(17) ? null : Utils.GetBytes(reader, 17),
                                CText = reader.IsDBNull(18) ? string.Empty : reader.GetString(18),
                                CJson = reader.IsDBNull(19) ? null : reader.GetString(19),
                                CTextArray = reader.IsDBNull(20) ? null : reader.GetFieldValue<string[]>(20),
                                CIntegerArray = reader.IsDBNull(21) ? null : reader.GetFieldValue<int[]>(21)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string GetPostgresTypesAggSql = "SELECT COUNT(1) AS cnt , c_smallint, c_boolean, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_varchar, c_date, c_timestamp FROM  postgres_types  GROUP  BY  c_smallint , c_boolean, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_varchar, c_date, c_timestamp LIMIT  1  ";  
        public class GetPostgresTypesAggRow
        {
            public long Cnt { get; set; }
            public int? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CDecimal { get; set; }
            public float? CNumeric { get; set; }
            public float? CReal { get; set; }
            public string CVarchar { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CTimestamp { get; set; }
        };
        public async Task<GetPostgresTypesAggRow> GetPostgresTypesAgg()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetPostgresTypesAggSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetPostgresTypesAggRow
                            {
                                Cnt = reader.GetInt64(0),
                                CSmallint = reader.IsDBNull(1) ? (int? )null : reader.GetInt32(1),
                                CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                                CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                                CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                                CDecimal = reader.IsDBNull(5) ? (float? )null : reader.GetFloat(5),
                                CNumeric = reader.IsDBNull(6) ? (float? )null : reader.GetFloat(6),
                                CReal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                                CVarchar = reader.IsDBNull(8) ? string.Empty : reader.GetString(8),
                                CDate = reader.IsDBNull(9) ? (DateTime? )null : reader.GetDateTime(9),
                                CTimestamp = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string TruncatePostgresTypesSql = "TRUNCATE TABLE postgres_types";
        public async Task TruncatePostgresTypes()
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(TruncatePostgresTypesSql))
                {
                    await command.ExecuteScalarAsync();
                }
            }
        }
    }
}