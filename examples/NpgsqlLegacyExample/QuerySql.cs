// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace NpgsqlLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Npgsql;
    using NpgsqlTypes;
    using System.Data;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public QuerySql(NpgsqlTransaction transaction)
        {
            this.Transaction = transaction;
        }

        private NpgsqlTransaction Transaction { get; }
        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetAuthorRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                        };
                    }
                }
            }

            return null;
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(ListAuthorsSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAuthorsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = ListAuthorsSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio) RETURNING id, name, bio";
        public class CreateAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class CreateAuthorArgs
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<CreateAuthorRow> CreateAuthor(CreateAuthorArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(CreateAuthorSql))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new CreateAuthorRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = CreateAuthorSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@id", args.Id);
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new CreateAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                        };
                    }
                }
            }

            return null;
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
        public class CreateAuthorReturnIdRow
        {
            public long Id { get; set; }
        };
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(CreateAuthorReturnIdSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                        var result = await command.ExecuteScalarAsync();
                        return Convert.ToInt64(result);
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = CreateAuthorReturnIdSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorByIdSql))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetAuthorByIdRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorByIdSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorByIdRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                        };
                    }
                }
            }

            return null;
        }

        private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE name LIKE COALESCE(@name_pattern, '%')";
        public class GetAuthorByNamePatternRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByNamePatternArgs
        {
            public string NamePattern { get; set; }
        };
        public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorByNamePatternSql))
                    {
                        command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetAuthorByNamePatternRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorByNamePatternSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorByNamePatternRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(DeleteAuthorSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = DeleteAuthorSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                await command.ExecuteNonQueryAsync();
            }
        }

        private const string TruncateAuthorsSql = "TRUNCATE TABLE authors CASCADE";
        public async Task TruncateAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TruncateAuthorsSql))
                    {
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = TruncateAuthorsSql;
                command.Transaction = this.Transaction;
                await command.ExecuteNonQueryAsync();
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(UpdateAuthorsSql))
                    {
                        command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                        return await command.ExecuteNonQueryAsync();
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = UpdateAuthorsSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                return await command.ExecuteNonQueryAsync();
            }
        }

        private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[])";
        public class GetAuthorsByIdsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsArgs
        {
            public long[] LongArr1 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorsByIdsSql))
                    {
                        command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetAuthorsByIdsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorsByIdsSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }

        private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[]) AND name = ANY(@stringArr_2::TEXT[])";
        public class GetAuthorsByIdsAndNamesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsAndNamesArgs
        {
            public long[] LongArr1 { get; set; }
            public string[] StringArr2 { get; set; }
        };
        public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorsByIdsAndNamesSql))
                    {
                        command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                        command.Parameters.AddWithValue("@stringArr_2", args.StringArr2);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetAuthorsByIdsAndNamesRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorsByIdsAndNamesSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                command.Parameters.AddWithValue("@stringArr_2", args.StringArr2);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsAndNamesRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id) RETURNING id";
        public class CreateBookRow
        {
            public long Id { get; set; }
        };
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task<long> CreateBook(CreateBookArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(CreateBookSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@author_id", args.AuthorId);
                        var result = await command.ExecuteScalarAsync();
                        return Convert.ToInt64(result);
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = CreateBookSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@author_id", args.AuthorId);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name";
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(ListAllAuthorsBooksSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAllAuthorsBooksRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = ListAllAuthorsBooksSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }

        private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  ";  
        public class GetDuplicateAuthorsRow
        {
            public Author Author { get; set; }
            public Author Author2 { get; set; }
        };
        public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetDuplicateAuthorsSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetDuplicateAuthorsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetDuplicateAuthorsSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                    }

                    return result;
                }
            }
        }

        private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
        public class GetAuthorsByBookNameRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public Book Book { get; set; }
        };
        public class GetAuthorsByBookNameArgs
        {
            public string Name { get; set; }
        };
        public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetAuthorsByBookNameSql))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetAuthorsByBookNameRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                            }

                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorsByBookNameSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }

        private const string InsertPostgresTypesSql = "INSERT INTO postgres_types (c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea, c_text_array, c_integer_array) VALUES ( @c_boolean, @c_bit, @c_smallint, @c_integer, @c_bigint, @c_real, @c_numeric, @c_decimal, @c_double_precision, @c_money, @c_date, @c_time, @c_timestamp, @c_timestamp_with_tz, @c_char, @c_varchar, @c_character_varying, @c_text, @c_bytea, @c_text_array, @c_integer_array ) "; 
        public class InsertPostgresTypesArgs
        {
            public bool? CBoolean { get; set; }
            public byte[] CBit { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public async Task InsertPostgresTypes(InsertPostgresTypesArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(InsertPostgresTypesSql))
                    {
                        command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_real", args.CReal ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_money", args.CMoney ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_time", args.CTime ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_timestamp_with_tz", args.CTimestampWithTz ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_character_varying", args.CCharacterVarying ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_bytea", args.CBytea ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_text_array", args.CTextArray ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_integer_array", args.CIntegerArray ?? (object)DBNull.Value);
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = InsertPostgresTypesSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_real", args.CReal ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_money", args.CMoney ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_time", args.CTime ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_timestamp_with_tz", args.CTimestampWithTz ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_character_varying", args.CCharacterVarying ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bytea", args.CBytea ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_text_array", args.CTextArray ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_integer_array", args.CIntegerArray ?? (object)DBNull.Value);
                await command.ExecuteNonQueryAsync();
            }
        }

        private const string InsertPostgresTypesBatchSql = "COPY postgres_types (c_boolean, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea) FROM STDIN (FORMAT BINARY)";
        public class InsertPostgresTypesBatchArgs
        {
            public bool? CBoolean { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
        };
        public async Task InsertPostgresTypesBatch(List<InsertPostgresTypesBatchArgs> args)
        {
            using (var ds = NpgsqlDataSource.Create(ConnectionString))
            {
                var connection = ds.CreateConnection();
                await connection.OpenAsync();
                using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresTypesBatchSql))
                {
                    foreach (var row in args)
                    {
                        await writer.StartRowAsync();
                        await writer.WriteAsync(row.CBoolean);
                        await writer.WriteAsync(row.CSmallint, NpgsqlDbType.Smallint);
                        await writer.WriteAsync(row.CInteger, NpgsqlDbType.Integer);
                        await writer.WriteAsync(row.CBigint, NpgsqlDbType.Bigint);
                        await writer.WriteAsync(row.CReal, NpgsqlDbType.Real);
                        await writer.WriteAsync(row.CNumeric, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CDecimal, NpgsqlDbType.Numeric);
                        await writer.WriteAsync(row.CDoublePrecision, NpgsqlDbType.Double);
                        await writer.WriteAsync(row.CMoney, NpgsqlDbType.Money);
                        await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                        await writer.WriteAsync(row.CTime, NpgsqlDbType.Time);
                        await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                        await writer.WriteAsync(row.CTimestampWithTz, NpgsqlDbType.TimestampTz);
                        await writer.WriteAsync(row.CChar);
                        await writer.WriteAsync(row.CVarchar);
                        await writer.WriteAsync(row.CCharacterVarying);
                        await writer.WriteAsync(row.CText);
                        await writer.WriteAsync(row.CBytea);
                    }

                    await writer.CompleteAsync();
                }

                await connection.CloseAsync();
            }
        }

        private const string GetPostgresTypesSql = "SELECT c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json, c_text_array, c_integer_array FROM postgres_types LIMIT 1";
        public class GetPostgresTypesRow
        {
            public bool? CBoolean { get; set; }
            public byte[] CBit { get; set; }
            public short? CSmallint { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CNumeric { get; set; }
            public float? CReal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public byte[] CBytea { get; set; }
            public string CText { get; set; }
            public object CJson { get; set; }
            public string[] CTextArray { get; set; }
            public int[] CIntegerArray { get; set; }
        };
        public async Task<GetPostgresTypesRow> GetPostgresTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetPostgresTypesSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetPostgresTypesRow
                                {
                                    CBoolean = reader.IsDBNull(0) ? (bool? )null : reader.GetBoolean(0),
                                    CBit = reader.IsDBNull(1) ? null : reader.GetFieldValue<byte[]>(1),
                                    CSmallint = reader.IsDBNull(2) ? (short? )null : reader.GetInt16(2),
                                    CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                                    CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                                    CDecimal = reader.IsDBNull(5) ? (decimal? )null : reader.GetDecimal(5),
                                    CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                                    CReal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                                    CDoublePrecision = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                                    CMoney = reader.IsDBNull(9) ? (decimal? )null : reader.GetDecimal(9),
                                    CDate = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10),
                                    CTime = reader.IsDBNull(11) ? (TimeSpan? )null : reader.GetFieldValue<TimeSpan>(11),
                                    CTimestamp = reader.IsDBNull(12) ? (DateTime? )null : reader.GetDateTime(12),
                                    CTimestampWithTz = reader.IsDBNull(13) ? (DateTime? )null : reader.GetDateTime(13),
                                    CChar = reader.IsDBNull(14) ? null : reader.GetString(14),
                                    CVarchar = reader.IsDBNull(15) ? null : reader.GetString(15),
                                    CCharacterVarying = reader.IsDBNull(16) ? null : reader.GetString(16),
                                    CBytea = reader.IsDBNull(17) ? null : reader.GetFieldValue<byte[]>(17),
                                    CText = reader.IsDBNull(18) ? null : reader.GetString(18),
                                    CJson = reader.IsDBNull(19) ? null : reader.GetString(19),
                                    CTextArray = reader.IsDBNull(20) ? null : reader.GetFieldValue<string[]>(20),
                                    CIntegerArray = reader.IsDBNull(21) ? null : reader.GetFieldValue<int[]>(21)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetPostgresTypesSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetPostgresTypesRow
                        {
                            CBoolean = reader.IsDBNull(0) ? (bool? )null : reader.GetBoolean(0),
                            CBit = reader.IsDBNull(1) ? null : reader.GetFieldValue<byte[]>(1),
                            CSmallint = reader.IsDBNull(2) ? (short? )null : reader.GetInt16(2),
                            CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                            CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                            CDecimal = reader.IsDBNull(5) ? (decimal? )null : reader.GetDecimal(5),
                            CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                            CReal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                            CDoublePrecision = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                            CMoney = reader.IsDBNull(9) ? (decimal? )null : reader.GetDecimal(9),
                            CDate = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10),
                            CTime = reader.IsDBNull(11) ? (TimeSpan? )null : reader.GetFieldValue<TimeSpan>(11),
                            CTimestamp = reader.IsDBNull(12) ? (DateTime? )null : reader.GetDateTime(12),
                            CTimestampWithTz = reader.IsDBNull(13) ? (DateTime? )null : reader.GetDateTime(13),
                            CChar = reader.IsDBNull(14) ? null : reader.GetString(14),
                            CVarchar = reader.IsDBNull(15) ? null : reader.GetString(15),
                            CCharacterVarying = reader.IsDBNull(16) ? null : reader.GetString(16),
                            CBytea = reader.IsDBNull(17) ? null : reader.GetFieldValue<byte[]>(17),
                            CText = reader.IsDBNull(18) ? null : reader.GetString(18),
                            CJson = reader.IsDBNull(19) ? null : reader.GetString(19),
                            CTextArray = reader.IsDBNull(20) ? null : reader.GetFieldValue<string[]>(20),
                            CIntegerArray = reader.IsDBNull(21) ? null : reader.GetFieldValue<int[]>(21)
                        };
                    }
                }
            }

            return null;
        }

        private const string GetPostgresTypesAggSql = "SELECT COUNT(1) AS cnt ,  c_smallint , c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea FROM  postgres_types  GROUP  BY  c_smallint , c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_text, c_bytea LIMIT  1  ";  
        public class GetPostgresTypesAggRow
        {
            public long Cnt { get; set; }
            public short? CSmallint { get; set; }
            public bool? CBoolean { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public float? CReal { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public double? CDoublePrecision { get; set; }
            public decimal? CMoney { get; set; }
            public DateTime? CDate { get; set; }
            public TimeSpan? CTime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public DateTime? CTimestampWithTz { get; set; }
            public string CChar { get; set; }
            public string CVarchar { get; set; }
            public string CCharacterVarying { get; set; }
            public string CText { get; set; }
            public byte[] CBytea { get; set; }
        };
        public async Task<GetPostgresTypesAggRow> GetPostgresTypesAgg()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetPostgresTypesAggSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetPostgresTypesAggRow
                                {
                                    Cnt = reader.GetInt64(0),
                                    CSmallint = reader.IsDBNull(1) ? (short? )null : reader.GetInt16(1),
                                    CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                                    CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                                    CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                                    CReal = reader.IsDBNull(5) ? (float? )null : reader.GetFloat(5),
                                    CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                                    CDecimal = reader.IsDBNull(7) ? (decimal? )null : reader.GetDecimal(7),
                                    CDoublePrecision = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                                    CMoney = reader.IsDBNull(9) ? (decimal? )null : reader.GetDecimal(9),
                                    CDate = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10),
                                    CTime = reader.IsDBNull(11) ? (TimeSpan? )null : reader.GetFieldValue<TimeSpan>(11),
                                    CTimestamp = reader.IsDBNull(12) ? (DateTime? )null : reader.GetDateTime(12),
                                    CTimestampWithTz = reader.IsDBNull(13) ? (DateTime? )null : reader.GetDateTime(13),
                                    CChar = reader.IsDBNull(14) ? null : reader.GetString(14),
                                    CVarchar = reader.IsDBNull(15) ? null : reader.GetString(15),
                                    CCharacterVarying = reader.IsDBNull(16) ? null : reader.GetString(16),
                                    CText = reader.IsDBNull(17) ? null : reader.GetString(17),
                                    CBytea = reader.IsDBNull(18) ? null : reader.GetFieldValue<byte[]>(18)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetPostgresTypesAggSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetPostgresTypesAggRow
                        {
                            Cnt = reader.GetInt64(0),
                            CSmallint = reader.IsDBNull(1) ? (short? )null : reader.GetInt16(1),
                            CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                            CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                            CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                            CReal = reader.IsDBNull(5) ? (float? )null : reader.GetFloat(5),
                            CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                            CDecimal = reader.IsDBNull(7) ? (decimal? )null : reader.GetDecimal(7),
                            CDoublePrecision = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                            CMoney = reader.IsDBNull(9) ? (decimal? )null : reader.GetDecimal(9),
                            CDate = reader.IsDBNull(10) ? (DateTime? )null : reader.GetDateTime(10),
                            CTime = reader.IsDBNull(11) ? (TimeSpan? )null : reader.GetFieldValue<TimeSpan>(11),
                            CTimestamp = reader.IsDBNull(12) ? (DateTime? )null : reader.GetDateTime(12),
                            CTimestampWithTz = reader.IsDBNull(13) ? (DateTime? )null : reader.GetDateTime(13),
                            CChar = reader.IsDBNull(14) ? null : reader.GetString(14),
                            CVarchar = reader.IsDBNull(15) ? null : reader.GetString(15),
                            CCharacterVarying = reader.IsDBNull(16) ? null : reader.GetString(16),
                            CText = reader.IsDBNull(17) ? null : reader.GetString(17),
                            CBytea = reader.IsDBNull(18) ? null : reader.GetFieldValue<byte[]>(18)
                        };
                    }
                }
            }

            return null;
        }

        private const string InsertPostgresGeoTypesSql = "INSERT INTO postgres_geometric_types (c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle) VALUES ( @c_point , @c_line, @c_lseg, @c_box, @c_path, @c_polygon, @c_circle ) "; 
        public class InsertPostgresGeoTypesArgs
        {
            public NpgsqlPoint? CPoint { get; set; }
            public NpgsqlLine? CLine { get; set; }
            public NpgsqlLSeg? CLseg { get; set; }
            public NpgsqlBox? CBox { get; set; }
            public NpgsqlPath? CPath { get; set; }
            public NpgsqlPolygon? CPolygon { get; set; }
            public NpgsqlCircle? CCircle { get; set; }
        };
        public async Task InsertPostgresGeoTypes(InsertPostgresGeoTypesArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(InsertPostgresGeoTypesSql))
                    {
                        command.Parameters.AddWithValue("@c_point", args.CPoint ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_line", args.CLine ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_lseg", args.CLseg ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_box", args.CBox ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_path", args.CPath ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_polygon", args.CPolygon ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@c_circle", args.CCircle ?? (object)DBNull.Value);
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = InsertPostgresGeoTypesSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@c_point", args.CPoint ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_line", args.CLine ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_lseg", args.CLseg ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_box", args.CBox ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_path", args.CPath ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_polygon", args.CPolygon ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_circle", args.CCircle ?? (object)DBNull.Value);
                await command.ExecuteNonQueryAsync();
            }
        }

        private const string GetPostgresGeoTypesSql = "SELECT c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle FROM postgres_geometric_types LIMIT 1";
        public class GetPostgresGeoTypesRow
        {
            public NpgsqlPoint? CPoint { get; set; }
            public NpgsqlLine? CLine { get; set; }
            public NpgsqlLSeg? CLseg { get; set; }
            public NpgsqlBox? CBox { get; set; }
            public NpgsqlPath? CPath { get; set; }
            public NpgsqlPolygon? CPolygon { get; set; }
            public NpgsqlCircle? CCircle { get; set; }
        };
        public async Task<GetPostgresGeoTypesRow> GetPostgresGeoTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(GetPostgresGeoTypesSql))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetPostgresGeoTypesRow
                                {
                                    CPoint = reader.IsDBNull(0) ? (NpgsqlPoint? )null : reader.GetFieldValue<NpgsqlPoint>(0),
                                    CLine = reader.IsDBNull(1) ? (NpgsqlLine? )null : reader.GetFieldValue<NpgsqlLine>(1),
                                    CLseg = reader.IsDBNull(2) ? (NpgsqlLSeg? )null : reader.GetFieldValue<NpgsqlLSeg>(2),
                                    CBox = reader.IsDBNull(3) ? (NpgsqlBox? )null : reader.GetFieldValue<NpgsqlBox>(3),
                                    CPath = reader.IsDBNull(4) ? (NpgsqlPath? )null : reader.GetFieldValue<NpgsqlPath>(4),
                                    CPolygon = reader.IsDBNull(5) ? (NpgsqlPolygon? )null : reader.GetFieldValue<NpgsqlPolygon>(5),
                                    CCircle = reader.IsDBNull(6) ? (NpgsqlCircle? )null : reader.GetFieldValue<NpgsqlCircle>(6)
                                };
                            }
                        }
                    }
                }

                return null;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetPostgresGeoTypesSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetPostgresGeoTypesRow
                        {
                            CPoint = reader.IsDBNull(0) ? (NpgsqlPoint? )null : reader.GetFieldValue<NpgsqlPoint>(0),
                            CLine = reader.IsDBNull(1) ? (NpgsqlLine? )null : reader.GetFieldValue<NpgsqlLine>(1),
                            CLseg = reader.IsDBNull(2) ? (NpgsqlLSeg? )null : reader.GetFieldValue<NpgsqlLSeg>(2),
                            CBox = reader.IsDBNull(3) ? (NpgsqlBox? )null : reader.GetFieldValue<NpgsqlBox>(3),
                            CPath = reader.IsDBNull(4) ? (NpgsqlPath? )null : reader.GetFieldValue<NpgsqlPath>(4),
                            CPolygon = reader.IsDBNull(5) ? (NpgsqlPolygon? )null : reader.GetFieldValue<NpgsqlPolygon>(5),
                            CCircle = reader.IsDBNull(6) ? (NpgsqlCircle? )null : reader.GetFieldValue<NpgsqlCircle>(6)
                        };
                    }
                }
            }

            return null;
        }

        private const string TruncatePostgresTypesSql = "TRUNCATE TABLE postgres_types";
        public async Task TruncatePostgresTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TruncatePostgresTypesSql))
                    {
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = TruncatePostgresTypesSql;
                command.Transaction = this.Transaction;
                await command.ExecuteNonQueryAsync();
            }
        }

        private const string TruncatePostgresGeoTypesSql = "TRUNCATE TABLE postgres_geometric_types";
        public async Task TruncatePostgresGeoTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = NpgsqlDataSource.Create(ConnectionString))
                {
                    using (var command = connection.CreateCommand(TruncatePostgresGeoTypesSql))
                    {
                        await command.ExecuteNonQueryAsync();
                    }
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = TruncatePostgresGeoTypesSql;
                command.Transaction = this.Transaction;
                await command.ExecuteNonQueryAsync();
            }
        }
    }
}