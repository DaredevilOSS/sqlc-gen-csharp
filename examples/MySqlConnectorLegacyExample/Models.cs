// auto-generated by sqlc - do not edit
namespace MySqlConnectorLegacyExampleGen
{
    using NodaTime;
    using NodaTime.Extensions;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text.Json;

    public class Author
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Bio { get; set; }
    };
    public class Book
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public long AuthorId { get; set; }
        public string Description { get; set; }
    };
    public class MysqlNumericType
    {
        public bool? CBool { get; set; }
        public bool? CBoolean { get; set; }
        public short? CTinyint { get; set; }
        public short? CSmallint { get; set; }
        public int? CMediumint { get; set; }
        public int? CInt { get; set; }
        public int? CInteger { get; set; }
        public long? CBigint { get; set; }
        public double? CFloat { get; set; }
        public decimal? CDecimal { get; set; }
        public decimal? CDec { get; set; }
        public decimal? CNumeric { get; set; }
        public decimal? CFixed { get; set; }
        public double? CDouble { get; set; }
        public double? CDoublePrecision { get; set; }
    };
    public class MysqlStringType
    {
        public string CChar { get; set; }
        public string CNchar { get; set; }
        public string CNationalChar { get; set; }
        public string CVarchar { get; set; }
        public string CTinytext { get; set; }
        public string CMediumtext { get; set; }
        public string CText { get; set; }
        public string CLongtext { get; set; }
        public JsonElement? CJson { get; set; }
        public JsonElement? CJsonStringOverride { get; set; }
        public MysqlStringTypesCEnum? CEnum { get; set; }
        public HashSet<MysqlStringTypesCSet> CSet { get; set; }
    };
    public class MysqlDatetimeType
    {
        public short? CYear { get; set; }
        public DateTime? CDate { get; set; }
        public DateTime? CDatetime { get; set; }
        public DateTime? CTimestamp { get; set; }
        public TimeSpan? CTime { get; set; }
        public DateTime? CTimestampNodaInstantOverride { get; set; }
    };
    public class MysqlBinaryType
    {
        public byte? CBit { get; set; }
        public byte[] CBinary { get; set; }
        public byte[] CVarbinary { get; set; }
        public byte[] CTinyblob { get; set; }
        public byte[] CBlob { get; set; }
        public byte[] CMediumblob { get; set; }
        public byte[] CLongblob { get; set; }
    };
    public class ExtendedBio
    {
        public string AuthorName { get; set; }
        public string Name { get; set; }
        public BiosBioType? BioType { get; set; }
        public HashSet<BiosAuthorType> AuthorType { get; set; }
    };
    public enum BiosBioType
    {
        Invalid = 0, // reserved for invalid enum value
        Autobiography = 1,
        Biography = 2,
        Memoir = 3
    }

    public static class BiosBioTypeExtensions
    {
        private static readonly Dictionary<string, BiosBioType> StringToEnum = new Dictionary<string, BiosBioType>()
        {
            [string.Empty] = BiosBioType.Invalid,
            ["Autobiography"] = BiosBioType.Autobiography,
            ["Biography"] = BiosBioType.Biography,
            ["Memoir"] = BiosBioType.Memoir
        };
        public static BiosBioType ToBiosBioType(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<BiosBioType> ToBiosBioTypeSet(this string me)
        {
            return new HashSet<BiosBioType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum BiosAuthorType
    {
        Invalid = 0, // reserved for invalid enum value
        Author = 1,
        Editor = 2,
        Translator = 3
    }

    public static class BiosAuthorTypeExtensions
    {
        private static readonly Dictionary<string, BiosAuthorType> StringToEnum = new Dictionary<string, BiosAuthorType>()
        {
            [string.Empty] = BiosAuthorType.Invalid,
            ["Author"] = BiosAuthorType.Author,
            ["Editor"] = BiosAuthorType.Editor,
            ["Translator"] = BiosAuthorType.Translator
        };
        public static BiosAuthorType ToBiosAuthorType(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<BiosAuthorType> ToBiosAuthorTypeSet(this string me)
        {
            return new HashSet<BiosAuthorType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum MysqlStringTypesCEnum
    {
        Invalid = 0, // reserved for invalid enum value
        Small = 1,
        Medium = 2,
        Big = 3
    }

    public static class MysqlStringTypesCEnumExtensions
    {
        private static readonly Dictionary<string, MysqlStringTypesCEnum> StringToEnum = new Dictionary<string, MysqlStringTypesCEnum>()
        {
            [string.Empty] = MysqlStringTypesCEnum.Invalid,
            ["small"] = MysqlStringTypesCEnum.Small,
            ["medium"] = MysqlStringTypesCEnum.Medium,
            ["big"] = MysqlStringTypesCEnum.Big
        };
        public static MysqlStringTypesCEnum ToMysqlStringTypesCEnum(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<MysqlStringTypesCEnum> ToMysqlStringTypesCEnumSet(this string me)
        {
            return new HashSet<MysqlStringTypesCEnum>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum MysqlStringTypesCSet
    {
        Invalid = 0, // reserved for invalid enum value
        Tea = 1,
        Coffee = 2,
        Milk = 3
    }

    public static class MysqlStringTypesCSetExtensions
    {
        private static readonly Dictionary<string, MysqlStringTypesCSet> StringToEnum = new Dictionary<string, MysqlStringTypesCSet>()
        {
            [string.Empty] = MysqlStringTypesCSet.Invalid,
            ["tea"] = MysqlStringTypesCSet.Tea,
            ["coffee"] = MysqlStringTypesCSet.Coffee,
            ["milk"] = MysqlStringTypesCSet.Milk
        };
        public static MysqlStringTypesCSet ToMysqlStringTypesCSet(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<MysqlStringTypesCSet> ToMysqlStringTypesCSetSet(this string me)
        {
            return new HashSet<MysqlStringTypesCSet>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }
}