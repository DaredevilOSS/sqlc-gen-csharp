// auto-generated by sqlc - do not edit
namespace MySqlConnectorLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text.Json;

    public class MysqlType
    {
        public bool? CBool { get; set; }
        public bool? CBoolean { get; set; }
        public short? CTinyint { get; set; }
        public short? CSmallint { get; set; }
        public int? CMediumint { get; set; }
        public int? CInt { get; set; }
        public int? CInteger { get; set; }
        public long? CBigint { get; set; }
        public double? CFloat { get; set; }
        public decimal? CDecimal { get; set; }
        public decimal? CDec { get; set; }
        public decimal? CNumeric { get; set; }
        public decimal? CFixed { get; set; }
        public double? CDouble { get; set; }
        public double? CDoublePrecision { get; set; }
        public string CChar { get; set; }
        public string CNchar { get; set; }
        public string CNationalChar { get; set; }
        public string CVarchar { get; set; }
        public string CTinytext { get; set; }
        public string CMediumtext { get; set; }
        public string CText { get; set; }
        public string CLongtext { get; set; }
        public JsonElement? CJson { get; set; }
        public JsonElement? CJsonStringOverride { get; set; }
        public MysqlTypesCEnum? CEnum { get; set; }
        public HashSet<MysqlTypesCSet> CSet { get; set; }
    };
    public class MysqlDatetimeType
    {
        public short? CYear { get; set; }
        public DateTime? CDate { get; set; }
        public DateTime? CDatetime { get; set; }
        public DateTime? CTimestamp { get; set; }
        public TimeSpan? CTime { get; set; }
    };
    public class MysqlBinaryType
    {
        public byte? CBit { get; set; }
        public byte[] CBinary { get; set; }
        public byte[] CVarbinary { get; set; }
        public byte[] CTinyblob { get; set; }
        public byte[] CBlob { get; set; }
        public byte[] CMediumblob { get; set; }
        public byte[] CLongblob { get; set; }
    };
    public class Author
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string Bio { get; set; }
    };
    public class Book
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public long AuthorId { get; set; }
        public string Description { get; set; }
    };
    public class ExtendedBio
    {
        public string AuthorName { get; set; }
        public string Name { get; set; }
        public ExtendedBiosBioType? BioType { get; set; }
        public HashSet<ExtendedBiosAuthorType> AuthorType { get; set; }
    };
    public enum MysqlTypesCEnum
    {
        Invalid = 0, // reserved for invalid enum value
        Small = 1,
        Medium = 2,
        Big = 3
    }

    public static class MysqlTypesCEnumExtensions
    {
        private static readonly Dictionary<string, MysqlTypesCEnum> StringToEnum = new Dictionary<string, MysqlTypesCEnum>()
        {
            [string.Empty] = MysqlTypesCEnum.Invalid,
            ["small"] = MysqlTypesCEnum.Small,
            ["medium"] = MysqlTypesCEnum.Medium,
            ["big"] = MysqlTypesCEnum.Big
        };
        public static MysqlTypesCEnum ToMysqlTypesCEnum(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<MysqlTypesCEnum> ToMysqlTypesCEnumSet(this string me)
        {
            return new HashSet<MysqlTypesCEnum>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum MysqlTypesCSet
    {
        Invalid = 0, // reserved for invalid enum value
        Tea = 1,
        Coffee = 2,
        Milk = 3
    }

    public static class MysqlTypesCSetExtensions
    {
        private static readonly Dictionary<string, MysqlTypesCSet> StringToEnum = new Dictionary<string, MysqlTypesCSet>()
        {
            [string.Empty] = MysqlTypesCSet.Invalid,
            ["tea"] = MysqlTypesCSet.Tea,
            ["coffee"] = MysqlTypesCSet.Coffee,
            ["milk"] = MysqlTypesCSet.Milk
        };
        public static MysqlTypesCSet ToMysqlTypesCSet(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<MysqlTypesCSet> ToMysqlTypesCSetSet(this string me)
        {
            return new HashSet<MysqlTypesCSet>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum ExtendedBiosBioType
    {
        Invalid = 0, // reserved for invalid enum value
        Autobiography = 1,
        Biography = 2,
        Memoir = 3
    }

    public static class ExtendedBiosBioTypeExtensions
    {
        private static readonly Dictionary<string, ExtendedBiosBioType> StringToEnum = new Dictionary<string, ExtendedBiosBioType>()
        {
            [string.Empty] = ExtendedBiosBioType.Invalid,
            ["Autobiography"] = ExtendedBiosBioType.Autobiography,
            ["Biography"] = ExtendedBiosBioType.Biography,
            ["Memoir"] = ExtendedBiosBioType.Memoir
        };
        public static ExtendedBiosBioType ToExtendedBiosBioType(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<ExtendedBiosBioType> ToExtendedBiosBioTypeSet(this string me)
        {
            return new HashSet<ExtendedBiosBioType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }

    public enum ExtendedBiosAuthorType
    {
        Invalid = 0, // reserved for invalid enum value
        Author = 1,
        Editor = 2,
        Translator = 3
    }

    public static class ExtendedBiosAuthorTypeExtensions
    {
        private static readonly Dictionary<string, ExtendedBiosAuthorType> StringToEnum = new Dictionary<string, ExtendedBiosAuthorType>()
        {
            [string.Empty] = ExtendedBiosAuthorType.Invalid,
            ["Author"] = ExtendedBiosAuthorType.Author,
            ["Editor"] = ExtendedBiosAuthorType.Editor,
            ["Translator"] = ExtendedBiosAuthorType.Translator
        };
        public static ExtendedBiosAuthorType ToExtendedBiosAuthorType(this string me)
        {
            return StringToEnum[me];
        }

        public static HashSet<ExtendedBiosAuthorType> ToExtendedBiosAuthorTypeSet(this string me)
        {
            return new HashSet<ExtendedBiosAuthorType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
        }
    }
}