// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace MySqlConnectorLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using MySqlConnector;
    using System.Globalization;
    using System.IO;
    using CsvHelper;
    using CsvHelper.Configuration;
    using CsvHelper.TypeConversion;
    using System.Text;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(ListAuthorsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio)";
        public class CreateAuthorArgs
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateAuthorReturnIdSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    await command.ExecuteNonQueryAsync();
                    return command.LastInsertedId;
                }
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorByIdSql, connection))
                {
                    command.Parameters.AddWithValue("@id", args.Id);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetAuthorByIdRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2) ? null : reader.GetString(2)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE name LIKE COALESCE(@name_pattern, '%')";
        public class GetAuthorByNamePatternRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByNamePatternArgs
        {
            public string NamePattern { get; set; }
        };
        public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorByNamePatternSql, connection))
                {
                    command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorByNamePatternRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(DeleteAuthorSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string DeleteAllAuthorsSql = "DELETE FROM authors";
        public async Task DeleteAllAuthors()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(DeleteAllAuthorsSql, connection))
                {
                    await command.ExecuteScalarAsync();
                }
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(UpdateAuthorsSql, connection))
                {
                    command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                    return await command.ExecuteNonQueryAsync();
                }
            }
        }

        private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids)";
        public class GetAuthorsByIdsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsArgs
        {
            public long[] Ids { get; set; }
        };
        public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                var transformedSql = GetAuthorsByIdsSql;
                transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
                using (var command = new MySqlCommand(transformedSql, connection))
                {
                    for (int i = 0; i < args.Ids.Length; i++)
                        command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names)";
        public class GetAuthorsByIdsAndNamesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsAndNamesArgs
        {
            public long[] Ids { get; set; }
            public string[] Names { get; set; }
        };
        public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                var transformedSql = GetAuthorsByIdsAndNamesSql;
                transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
                transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Names.Length, "names");
                using (var command = new MySqlCommand(transformedSql, connection))
                {
                    for (int i = 0; i < args.Ids.Length; i++)
                        command.Parameters.AddWithValue($"@idsArg{i}", args.Ids[i]);
                    for (int i = 0; i < args.Names.Length; i++)
                        command.Parameters.AddWithValue($"@namesArg{i}", args.Names[i]);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByIdsAndNamesRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) });
                        }

                        return result;
                    }
                }
            }
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id)";
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task<long> CreateBook(CreateBookArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(CreateBookSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    command.Parameters.AddWithValue("@author_id", args.AuthorId);
                    await command.ExecuteNonQueryAsync();
                    return command.LastInsertedId;
                }
            }
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name  ";  
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(ListAllAuthorsBooksSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAllAuthorsBooksRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  ";  
        public class GetDuplicateAuthorsRow
        {
            public Author Author { get; set; }
            public Author Author2 { get; set; }
        };
        public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetDuplicateAuthorsSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetDuplicateAuthorsRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
        public class GetAuthorsByBookNameRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public Book Book { get; set; }
        };
        public class GetAuthorsByBookNameArgs
        {
            public string Name { get; set; }
        };
        public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetAuthorsByBookNameSql, connection))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByBookNameRow>();
                        while (await reader.ReadAsync())
                        {
                            result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        }

                        return result;
                    }
                }
            }
        }

        private const string InsertMysqlTypesSql = "INSERT INTO mysql_types (c_bit, c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob) VALUES ( @c_bit, @c_bool, @c_boolean, @c_tinyint, @c_smallint, @c_mediumint, @c_int, @c_integer, @c_bigint, @c_decimal, @c_dec, @c_numeric, @c_fixed, @c_float, @c_double, @c_double_precision, @c_char, @c_nchar, @c_national_char, @c_varchar, @c_tinytext, @c_mediumtext, @c_text, @c_longtext, @c_year, @c_date, @c_datetime, @c_timestamp, @c_binary, @c_varbinary, @c_tinyblob, @c_blob, @c_mediumblob, @c_longblob ) "; 
        public class InsertMysqlTypesArgs
        {
            public byte? CBit { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public string CDecimal { get; set; }
            public string CDec { get; set; }
            public string CNumeric { get; set; }
            public string CFixed { get; set; }
            public double? CFloat { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task InsertMysqlTypes(InsertMysqlTypesArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(InsertMysqlTypesSql, connection))
                {
                    command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_bool", args.CBool ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinyint", args.CTinyint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumint", args.CMediumint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_int", args.CInt ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_dec", args.CDec ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_fixed", args.CFixed ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_float", args.CFloat ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_double", args.CDouble ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_nchar", args.CNchar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_national_char", args.CNationalChar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinytext", args.CTinytext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumtext", args.CMediumtext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_longtext", args.CLongtext ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_year", args.CYear ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_datetime", args.CDatetime ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_binary", args.CBinary ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_varbinary", args.CVarbinary ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_tinyblob", args.CTinyblob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_blob", args.CBlob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_mediumblob", args.CMediumblob ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@c_longblob", args.CLongblob ?? (object)DBNull.Value);
                    await command.ExecuteScalarAsync();
                }
            }
        }

        public class InsertMysqlTypesBatchArgs
        {
            public byte? CBit { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public string CNumeric { get; set; }
            public string CDecimal { get; set; }
            public string CDec { get; set; }
            public string CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task InsertMysqlTypesBatch(List<InsertMysqlTypesBatchArgs> args)
        {
            const string supportedDateTimeFormat = "yyyy-MM-dd H:mm:ss";
            var config = new CsvConfiguration(CultureInfo.CurrentCulture)
            {
                Delimiter = ",",
                NewLine = "\n"
            };
            var nullConverterFn = new Utils.NullToStringConverter();
            using (var writer = new StreamWriter("input.csv", false, new UTF8Encoding(false)))
            using (var csvWriter = new CsvWriter(writer, config))
            {
                var options = new TypeConverterOptions
                {
                    Formats = new[]
                    {
                        supportedDateTimeFormat
                    }
                };
                csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime>(options);
                csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime?>(options);
                csvWriter.Context.TypeConverterCache.AddConverter<bool?>(new Utils.BoolToBitConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<byte[]>(new Utils.ByteArrayConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<byte?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<short?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<int?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<long?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<float?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<decimal?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<double?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<DateTime?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<string>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<object>(nullConverterFn);
                await csvWriter.WriteRecordsAsync(args);
            }

            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                var loader = new MySqlBulkLoader(connection)
                {
                    Local = true,
                    TableName = "mysql_types",
                    FileName = "input.csv",
                    FieldTerminator = ",",
                    FieldQuotationCharacter = '"',
                    FieldQuotationOptional = true,
                    NumberOfLinesToSkip = 1,
                    LineTerminator = "\n"
                };
                loader.Columns.AddRange(new List<string> { "c_bit", "c_bool", "c_boolean", "c_tinyint", "c_smallint", "c_mediumint", "c_int", "c_integer", "c_bigint", "c_float", "c_numeric", "c_decimal", "c_dec", "c_fixed", "c_double", "c_double_precision", "c_char", "c_nchar", "c_national_char", "c_varchar", "c_tinytext", "c_mediumtext", "c_text", "c_longtext", "c_year", "c_date", "c_datetime", "c_timestamp", "c_binary", "c_varbinary", "c_tinyblob", "c_blob", "c_mediumblob", "c_longblob" });
                await loader.LoadAsync();
                await connection.CloseAsync();
            }
        }

        private const string GetMysqlTypesSql = "SELECT c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_decimal, c_dec, c_numeric, c_fixed, c_double, c_double_precision, c_year, c_date, c_time, c_datetime, c_timestamp, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_bit, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM mysql_types LIMIT 1";
        public class GetMysqlTypesRow
        {
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public string CDecimal { get; set; }
            public string CDec { get; set; }
            public string CNumeric { get; set; }
            public string CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public string CTime { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public byte? CBit { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task<GetMysqlTypesRow> GetMysqlTypes()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetMysqlTypesSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetMysqlTypesRow
                            {
                                CBool = reader.IsDBNull(0) ? (bool? )null : reader.GetBoolean(0),
                                CBoolean = reader.IsDBNull(1) ? (bool? )null : reader.GetBoolean(1),
                                CTinyint = reader.IsDBNull(2) ? (short? )null : reader.GetInt16(2),
                                CSmallint = reader.IsDBNull(3) ? (short? )null : reader.GetInt16(3),
                                CMediumint = reader.IsDBNull(4) ? (int? )null : reader.GetInt32(4),
                                CInt = reader.IsDBNull(5) ? (int? )null : reader.GetInt32(5),
                                CInteger = reader.IsDBNull(6) ? (int? )null : reader.GetInt32(6),
                                CBigint = reader.IsDBNull(7) ? (long? )null : reader.GetInt64(7),
                                CFloat = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                                CDecimal = reader.IsDBNull(9) ? null : reader.GetString(9),
                                CDec = reader.IsDBNull(10) ? null : reader.GetString(10),
                                CNumeric = reader.IsDBNull(11) ? null : reader.GetString(11),
                                CFixed = reader.IsDBNull(12) ? null : reader.GetString(12),
                                CDouble = reader.IsDBNull(13) ? (double? )null : reader.GetDouble(13),
                                CDoublePrecision = reader.IsDBNull(14) ? (double? )null : reader.GetDouble(14),
                                CYear = reader.IsDBNull(15) ? (short? )null : reader.GetInt16(15),
                                CDate = reader.IsDBNull(16) ? (DateTime? )null : reader.GetDateTime(16),
                                CTime = reader.IsDBNull(17) ? null : reader.GetString(17),
                                CDatetime = reader.IsDBNull(18) ? (DateTime? )null : reader.GetDateTime(18),
                                CTimestamp = reader.IsDBNull(19) ? (DateTime? )null : reader.GetDateTime(19),
                                CChar = reader.IsDBNull(20) ? null : reader.GetString(20),
                                CNchar = reader.IsDBNull(21) ? null : reader.GetString(21),
                                CNationalChar = reader.IsDBNull(22) ? null : reader.GetString(22),
                                CVarchar = reader.IsDBNull(23) ? null : reader.GetString(23),
                                CTinytext = reader.IsDBNull(24) ? null : reader.GetString(24),
                                CMediumtext = reader.IsDBNull(25) ? null : reader.GetString(25),
                                CText = reader.IsDBNull(26) ? null : reader.GetString(26),
                                CLongtext = reader.IsDBNull(27) ? null : reader.GetString(27),
                                CBit = reader.IsDBNull(28) ? (byte? )null : reader.GetFieldValue<byte>(28),
                                CBinary = reader.IsDBNull(29) ? null : reader.GetFieldValue<byte[]>(29),
                                CVarbinary = reader.IsDBNull(30) ? null : reader.GetFieldValue<byte[]>(30),
                                CTinyblob = reader.IsDBNull(31) ? null : reader.GetFieldValue<byte[]>(31),
                                CBlob = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                                CMediumblob = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                                CLongblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string GetMysqlTypesAggSql = "SELECT COUNT(1) AS cnt, c_bool, c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint,  c_float , c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM  mysql_types  GROUP  BY  c_bool , c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob LIMIT  1  ";  
        public class GetMysqlTypesAggRow
        {
            public long Cnt { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public byte? CBit { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public string CNumeric { get; set; }
            public string CDecimal { get; set; }
            public string CDec { get; set; }
            public string CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task<GetMysqlTypesAggRow> GetMysqlTypesAgg()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(GetMysqlTypesAggSql, connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            return new GetMysqlTypesAggRow
                            {
                                Cnt = reader.GetInt64(0),
                                CBool = reader.IsDBNull(1) ? (bool? )null : reader.GetBoolean(1),
                                CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                                CBit = reader.IsDBNull(3) ? (byte? )null : reader.GetFieldValue<byte>(3),
                                CTinyint = reader.IsDBNull(4) ? (short? )null : reader.GetInt16(4),
                                CSmallint = reader.IsDBNull(5) ? (short? )null : reader.GetInt16(5),
                                CMediumint = reader.IsDBNull(6) ? (int? )null : reader.GetInt32(6),
                                CInt = reader.IsDBNull(7) ? (int? )null : reader.GetInt32(7),
                                CInteger = reader.IsDBNull(8) ? (int? )null : reader.GetInt32(8),
                                CBigint = reader.IsDBNull(9) ? (long? )null : reader.GetInt64(9),
                                CFloat = reader.IsDBNull(10) ? (double? )null : reader.GetDouble(10),
                                CNumeric = reader.IsDBNull(11) ? null : reader.GetString(11),
                                CDecimal = reader.IsDBNull(12) ? null : reader.GetString(12),
                                CDec = reader.IsDBNull(13) ? null : reader.GetString(13),
                                CFixed = reader.IsDBNull(14) ? null : reader.GetString(14),
                                CDouble = reader.IsDBNull(15) ? (double? )null : reader.GetDouble(15),
                                CDoublePrecision = reader.IsDBNull(16) ? (double? )null : reader.GetDouble(16),
                                CChar = reader.IsDBNull(17) ? null : reader.GetString(17),
                                CNchar = reader.IsDBNull(18) ? null : reader.GetString(18),
                                CNationalChar = reader.IsDBNull(19) ? null : reader.GetString(19),
                                CVarchar = reader.IsDBNull(20) ? null : reader.GetString(20),
                                CTinytext = reader.IsDBNull(21) ? null : reader.GetString(21),
                                CMediumtext = reader.IsDBNull(22) ? null : reader.GetString(22),
                                CText = reader.IsDBNull(23) ? null : reader.GetString(23),
                                CLongtext = reader.IsDBNull(24) ? null : reader.GetString(24),
                                CYear = reader.IsDBNull(25) ? (short? )null : reader.GetInt16(25),
                                CDate = reader.IsDBNull(26) ? (DateTime? )null : reader.GetDateTime(26),
                                CDatetime = reader.IsDBNull(27) ? (DateTime? )null : reader.GetDateTime(27),
                                CTimestamp = reader.IsDBNull(28) ? (DateTime? )null : reader.GetDateTime(28),
                                CBinary = reader.IsDBNull(29) ? null : reader.GetFieldValue<byte[]>(29),
                                CVarbinary = reader.IsDBNull(30) ? null : reader.GetFieldValue<byte[]>(30),
                                CTinyblob = reader.IsDBNull(31) ? null : reader.GetFieldValue<byte[]>(31),
                                CBlob = reader.IsDBNull(32) ? null : reader.GetFieldValue<byte[]>(32),
                                CMediumblob = reader.IsDBNull(33) ? null : reader.GetFieldValue<byte[]>(33),
                                CLongblob = reader.IsDBNull(34) ? null : reader.GetFieldValue<byte[]>(34)
                            };
                        }
                    }
                }
            }

            return null;
        }

        private const string TruncateMysqlTypesSql = "TRUNCATE TABLE mysql_types";
        public async Task TruncateMysqlTypes()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand(TruncateMysqlTypesSql, connection))
                {
                    await command.ExecuteScalarAsync();
                }
            }
        }
    }
}