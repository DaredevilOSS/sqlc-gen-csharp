// auto-generated by sqlc - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Npgsql;
using NpgsqlTypes;

namespace NpgsqlExampleGen;
public class QuerySql(string connectionString)
{
    private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(GetAuthorSql);
        command.Parameters.AddWithValue("@name", args.Name);
        var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new GetAuthorRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                Created = reader.GetDateTime(3)
            };
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(long Id, string Name, string? Bio, DateTime Created);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(ListAuthorsSql);
        var reader = await command.ExecuteReaderAsync();
        var result = new List<ListAuthorsRow>();
        while (await reader.ReadAsync())
        {
            result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) });
        }

        return result;
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id, name, bio, created";
    public readonly record struct CreateAuthorRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct CreateAuthorArgs(string Name, string? Bio);
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(CreateAuthorSql);
        command.Parameters.AddWithValue("@name", args.Name);
        command.Parameters.AddWithValue("@bio", args.Bio!);
        var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new CreateAuthorRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                Created = reader.GetDateTime(3)
            };
        }

        return null;
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public readonly record struct CreateAuthorReturnIdRow(long Id);
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(CreateAuthorReturnIdSql);
        command.Parameters.AddWithValue("@name", args.Name);
        command.Parameters.AddWithValue("@bio", args.Bio!);
        var result = await command.ExecuteScalarAsync();
        return (long)(result ?? -1);
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorByIdArgs(long Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(GetAuthorByIdSql);
        command.Parameters.AddWithValue("@id", args.Id);
        var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new GetAuthorByIdRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                Created = reader.GetDateTime(3)
            };
        }

        return null;
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(DeleteAuthorSql);
        command.Parameters.AddWithValue("@name", args.Name);
        await command.ExecuteScalarAsync();
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors";
    public async Task TruncateAuthors()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(TruncateAuthorsSql);
        await command.ExecuteScalarAsync();
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(UpdateAuthorsSql);
        command.Parameters.AddWithValue("@bio", args.Bio!);
        return await command.ExecuteNonQueryAsync();
    }

    private const string TruncateCopyToTestsSql = "TRUNCATE TABLE copy_tests";
    public async Task TruncateCopyToTests()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(TruncateCopyToTestsSql);
        await command.ExecuteScalarAsync();
    }

    private const string CopyToTestsSql = "COPY copy_tests (c_int, c_varchar, c_date, c_timestamp) FROM STDIN (FORMAT BINARY)";
    public readonly record struct CopyToTestsArgs(int CInt, string CVarchar, DateTime CDate, DateTime CTimestamp);
    public async Task CopyToTests(List<CopyToTestsArgs> args)
    {
        await using var ds = NpgsqlDataSource.Create(connectionString);
        var connection = ds.CreateConnection();
        await connection.OpenAsync();
        await using var writer = await connection.BeginBinaryImportAsync(CopyToTestsSql);
        foreach (var row in args)
        {
            await writer.StartRowAsync();
            await writer.WriteAsync(row.CInt, NpgsqlDbType.Integer);
            await writer.WriteAsync(row.CVarchar, NpgsqlDbType.Varchar);
            await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
            await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
        }

        await writer.CompleteAsync();
        await connection.CloseAsync();
    }

    private const string CountCopyRowsSql = "SELECT COUNT(1) AS cnt FROM copy_tests";
    public readonly record struct CountCopyRowsRow(long Cnt);
    public async Task<CountCopyRowsRow?> CountCopyRows()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(CountCopyRowsSql);
        var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new CountCopyRowsRow
            {
                Cnt = reader.GetInt64(0)
            };
        }

        return null;
    }

    private const string TestSql = "SELECT c_bit, c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_double_precision, c_date, c_time, c_timestamp, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json FROM node_postgres_types LIMIT 1";
    public readonly record struct TestRow(byte[]? CBit, int? CSmallint, bool? CBoolean, int? CInteger, long? CBigint, int? CSerial, float? CDecimal, float? CNumeric, float? CReal, float? CDoublePrecision, DateTime? CDate, string? CTime, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, byte[]? CBytea, string? CText, object? CJson);
    public async Task<TestRow?> Test()
    {
        await using var connection = NpgsqlDataSource.Create(connectionString);
        await using var command = connection.CreateCommand(TestSql);
        var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            return new TestRow
            {
                CBit = reader.IsDBNull(0) ? null : Utils.GetBytes(reader, 0),
                CSmallint = reader.IsDBNull(1) ? null : reader.GetInt32(1),
                CBoolean = reader.IsDBNull(2) ? null : reader.GetBoolean(2),
                CInteger = reader.IsDBNull(3) ? null : reader.GetInt32(3),
                CBigint = reader.IsDBNull(4) ? null : reader.GetInt64(4),
                CSerial = reader.IsDBNull(5) ? null : reader.GetInt32(5),
                CDecimal = reader.IsDBNull(6) ? null : reader.GetFloat(6),
                CNumeric = reader.IsDBNull(7) ? null : reader.GetFloat(7),
                CReal = reader.IsDBNull(8) ? null : reader.GetFloat(8),
                CDoublePrecision = reader.IsDBNull(9) ? null : reader.GetFloat(9),
                CDate = reader.IsDBNull(10) ? null : reader.GetDateTime(10),
                CTime = reader.IsDBNull(11) ? null : reader.GetString(11),
                CTimestamp = reader.IsDBNull(12) ? null : reader.GetDateTime(12),
                CChar = reader.IsDBNull(13) ? null : reader.GetString(13),
                CVarchar = reader.IsDBNull(14) ? null : reader.GetString(14),
                CCharacterVarying = reader.IsDBNull(15) ? null : reader.GetString(15),
                CBytea = reader.IsDBNull(16) ? null : Utils.GetBytes(reader, 16),
                CText = reader.IsDBNull(17) ? null : reader.GetString(17),
                CJson = reader.IsDBNull(18) ? null : reader.GetString(18)
            };
        }

        return null;
    }
}