// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Npgsql;
using NpgsqlTypes;

namespace NpgsqlExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Created = reader.GetDateTime(3)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(long Id, string Name, string? Bio, DateTime Created);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(ListAuthorsSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) });
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id, name, bio, created";
    public readonly record struct CreateAuthorRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct CreateAuthorArgs(string Name, string? Bio);
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CreateAuthorSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new CreateAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Created = reader.GetDateTime(3)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public readonly record struct CreateAuthorReturnIdRow(long Id);
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CreateAuthorReturnIdSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio!);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct GetAuthorByIdArgs(long Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorByIdSql))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorByIdRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? null : reader.GetString(2),
                            Created = reader.GetDateTime(3)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(DeleteAuthorSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors";
    public async Task TruncateAuthors()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(TruncateAuthorsSql))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(UpdateAuthorsSql))
            {
                command.Parameters.AddWithValue("@bio", args.Bio!);
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    private const string SelectAuthorsWithSliceSql = "SELECT id, name, bio, created FROM authors WHERE id = ANY(@longArr_1::BIGINT[])";
    public readonly record struct SelectAuthorsWithSliceRow(long Id, string Name, string? Bio, DateTime Created);
    public readonly record struct SelectAuthorsWithSliceArgs(long[] LongArr1);
    public async Task<List<SelectAuthorsWithSliceRow>> SelectAuthorsWithSlice(SelectAuthorsWithSliceArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(SelectAuthorsWithSliceSql))
            {
                command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<SelectAuthorsWithSliceRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new SelectAuthorsWithSliceRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Created = reader.GetDateTime(3) });
                    }

                    return result;
                }
            }
        }
    }

    private const string TruncateCopyToTestsSql = "TRUNCATE TABLE copy_tests";
    public async Task TruncateCopyToTests()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(TruncateCopyToTestsSql))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string TruncateNodePostgresTypesSql = "TRUNCATE TABLE node_postgres_types";
    public async Task TruncateNodePostgresTypes()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(TruncateNodePostgresTypesSql))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string CopyToTestsSql = "COPY copy_tests (c_int, c_varchar, c_date, c_timestamp) FROM STDIN (FORMAT BINARY)";
    public readonly record struct CopyToTestsArgs(int CInt, string CVarchar, DateTime CDate, DateTime CTimestamp);
    public async Task CopyToTests(List<CopyToTestsArgs> args)
    {
        using (var ds = NpgsqlDataSource.Create(ConnectionString))
        {
            var connection = ds.CreateConnection();
            await connection.OpenAsync();
            using (var writer = await connection.BeginBinaryImportAsync(CopyToTestsSql))
            {
                foreach (var row in args)
                {
                    await writer.StartRowAsync();
                    await writer.WriteAsync(row.CInt, NpgsqlDbType.Integer);
                    await writer.WriteAsync(row.CVarchar, NpgsqlDbType.Varchar);
                    await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                    await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                }

                await writer.CompleteAsync();
            }

            await connection.CloseAsync();
        }
    }

    private const string CountCopyRowsSql = "SELECT COUNT(1) AS cnt FROM copy_tests";
    public readonly record struct CountCopyRowsRow(long Cnt);
    public async Task<CountCopyRowsRow?> CountCopyRows()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CountCopyRowsSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new CountCopyRowsRow
                        {
                            Cnt = reader.GetInt64(0)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string InsertNodePostgresTypeSql = "INSERT INTO node_postgres_types (c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text, c_text_array, c_integer_array) VALUES ( @c_smallint , @c_boolean, @c_integer, @c_bigint, @c_serial, @c_decimal, @c_numeric, @c_real, @c_date, @c_timestamp, @c_char, @c_varchar, @c_character_varying, @c_text, @c_text_array, @c_integer_array ) RETURNING  id  "; 
    public readonly record struct InsertNodePostgresTypeRow(long Id);
    public readonly record struct InsertNodePostgresTypeArgs(int? CSmallint, bool? CBoolean, int? CInteger, long? CBigint, int? CSerial, float? CDecimal, float? CNumeric, float? CReal, DateTime? CDate, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, string? CText, string[]? CTextArray, int[]? CIntegerArray);
    public async Task<long> InsertNodePostgresType(InsertNodePostgresTypeArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(InsertNodePostgresTypeSql))
            {
                command.Parameters.AddWithValue("@c_smallint", args.CSmallint!);
                command.Parameters.AddWithValue("@c_boolean", args.CBoolean!);
                command.Parameters.AddWithValue("@c_integer", args.CInteger!);
                command.Parameters.AddWithValue("@c_bigint", args.CBigint!);
                command.Parameters.AddWithValue("@c_serial", args.CSerial!);
                command.Parameters.AddWithValue("@c_decimal", args.CDecimal!);
                command.Parameters.AddWithValue("@c_numeric", args.CNumeric!);
                command.Parameters.AddWithValue("@c_real", args.CReal!);
                command.Parameters.AddWithValue("@c_date", args.CDate!);
                command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp!);
                command.Parameters.AddWithValue("@c_char", args.CChar!);
                command.Parameters.AddWithValue("@c_varchar", args.CVarchar!);
                command.Parameters.AddWithValue("@c_character_varying", args.CCharacterVarying!);
                command.Parameters.AddWithValue("@c_text", args.CText!);
                command.Parameters.AddWithValue("@c_text_array", args.CTextArray!);
                command.Parameters.AddWithValue("@c_integer_array", args.CIntegerArray!);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }
    }

    private const string GetNodePostgresTypeSql = "SELECT c_smallint, c_boolean, c_integer, c_bigint, c_serial, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text, c_text_array, c_integer_array FROM node_postgres_types WHERE id = @id LIMIT 1";
    public readonly record struct GetNodePostgresTypeRow(int? CSmallint, bool? CBoolean, int? CInteger, long? CBigint, int? CSerial, float? CDecimal, float? CNumeric, float? CReal, DateTime? CDate, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, string? CText, string[]? CTextArray, int[]? CIntegerArray);
    public readonly record struct GetNodePostgresTypeArgs(long Id);
    public async Task<GetNodePostgresTypeRow?> GetNodePostgresType(GetNodePostgresTypeArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetNodePostgresTypeSql))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetNodePostgresTypeRow
                        {
                            CSmallint = reader.IsDBNull(0) ? null : reader.GetInt32(0),
                            CBoolean = reader.IsDBNull(1) ? null : reader.GetBoolean(1),
                            CInteger = reader.IsDBNull(2) ? null : reader.GetInt32(2),
                            CBigint = reader.IsDBNull(3) ? null : reader.GetInt64(3),
                            CSerial = reader.IsDBNull(4) ? null : reader.GetInt32(4),
                            CDecimal = reader.IsDBNull(5) ? null : reader.GetFloat(5),
                            CNumeric = reader.IsDBNull(6) ? null : reader.GetFloat(6),
                            CReal = reader.IsDBNull(7) ? null : reader.GetFloat(7),
                            CDate = reader.IsDBNull(8) ? null : reader.GetDateTime(8),
                            CTimestamp = reader.IsDBNull(9) ? null : reader.GetDateTime(9),
                            CChar = reader.IsDBNull(10) ? null : reader.GetString(10),
                            CVarchar = reader.IsDBNull(11) ? null : reader.GetString(11),
                            CCharacterVarying = reader.IsDBNull(12) ? null : reader.GetString(12),
                            CText = reader.IsDBNull(13) ? null : reader.GetString(13),
                            CTextArray = reader.IsDBNull(14) ? null : reader.GetFieldValue<string[]>(14),
                            CIntegerArray = reader.IsDBNull(15) ? null : reader.GetFieldValue<int[]>(15)
                        };
                    }
                }
            }
        }

        return null;
    }
}