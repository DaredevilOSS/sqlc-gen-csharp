// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Npgsql;
using NpgsqlTypes;

namespace NpgsqlExampleGen;
public class QuerySql
{
    public QuerySql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
    public readonly record struct GetAuthorRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorArgs(string Name);
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
    public readonly record struct ListAuthorsRow(long Id, string Name, string? Bio);
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(ListAuthorsSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio) RETURNING id, name, bio";
    public readonly record struct CreateAuthorRow(long Id, string Name, string? Bio);
    public readonly record struct CreateAuthorArgs(long Id, string Name, string? Bio);
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CreateAuthorSql))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new CreateAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public readonly record struct CreateAuthorReturnIdRow(long Id);
    public readonly record struct CreateAuthorReturnIdArgs(string Name, string? Bio);
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CreateAuthorReturnIdSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
    public readonly record struct GetAuthorByIdRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorByIdArgs(long Id);
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorByIdSql))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorByIdRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE name LIKE COALESCE(@name_pattern, '%')";
    public readonly record struct GetAuthorByNamePatternRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorByNamePatternArgs(string? NamePattern);
    public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorByNamePatternSql))
            {
                command.Parameters.AddWithValue("@name_pattern", args.NamePattern ?? (object)DBNull.Value);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorByNamePatternRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorByNamePatternRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public readonly record struct DeleteAuthorArgs(string Name);
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(DeleteAuthorSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors CASCADE";
    public async Task TruncateAuthors()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(TruncateAuthorsSql))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public readonly record struct UpdateAuthorsArgs(string? Bio);
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(UpdateAuthorsSql))
            {
                command.Parameters.AddWithValue("@bio", args.Bio ?? (object)DBNull.Value);
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[])";
    public readonly record struct GetAuthorsByIdsRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsArgs(long[] LongArr1);
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorsByIdsSql))
            {
                command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id = ANY(@longArr_1::BIGINT[]) AND name = ANY(@stringArr_2::TEXT[])";
    public readonly record struct GetAuthorsByIdsAndNamesRow(long Id, string Name, string? Bio);
    public readonly record struct GetAuthorsByIdsAndNamesArgs(long[] LongArr1, string[] StringArr2);
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorsByIdsAndNamesSql))
            {
                command.Parameters.AddWithValue("@longArr_1", args.LongArr1);
                command.Parameters.AddWithValue("@stringArr_2", args.StringArr2);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByIdsAndNamesRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByIdsAndNamesRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) });
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id) RETURNING id";
    public readonly record struct CreateBookRow(long Id);
    public readonly record struct CreateBookArgs(string Name, long AuthorId);
    public async Task<long> CreateBook(CreateBookArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(CreateBookSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue("@author_id", args.AuthorId);
                var result = await command.ExecuteScalarAsync();
                return Convert.ToInt64(result);
            }
        }
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name";
    public readonly record struct ListAllAuthorsBooksRow(Author Author, Book Book);
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(ListAllAuthorsBooksSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? (string? )null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  ";  
    public readonly record struct GetDuplicateAuthorsRow(Author Author, Author Author2);
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetDuplicateAuthorsSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? (string? )null : reader.GetString(5) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  ";  
    public readonly record struct GetAuthorsByBookNameRow(long Id, string Name, string? Bio, Book Book);
    public readonly record struct GetAuthorsByBookNameArgs(string Name);
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetAuthorsByBookNameSql))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? (string? )null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? (string? )null : reader.GetString(6) } });
                    }

                    return result;
                }
            }
        }
    }

    private const string InsertPostgresTypesSql = "INSERT INTO postgres_types (c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text, c_text_array, c_bytea, c_integer_array) VALUES ( @c_boolean , @c_bit, @c_smallint, @c_integer, @c_bigint, @c_real, @c_numeric, @c_decimal, @c_double_precision, @c_date, @c_timestamp, @c_char, @c_varchar, @c_character_varying, @c_text, @c_text_array, @c_bytea, @c_integer_array ) "; 
    public readonly record struct InsertPostgresTypesArgs(bool? CBoolean, byte[]? CBit, short? CSmallint, int? CInteger, long? CBigint, float? CReal, decimal? CNumeric, decimal? CDecimal, double? CDoublePrecision, DateTime? CDate, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, string? CText, string[]? CTextArray, byte[]? CBytea, int[]? CIntegerArray);
    public async Task InsertPostgresTypes(InsertPostgresTypesArgs args)
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(InsertPostgresTypesSql))
            {
                command.Parameters.AddWithValue("@c_boolean", args.CBoolean ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bit", args.CBit ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_smallint", args.CSmallint ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_integer", args.CInteger ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bigint", args.CBigint ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_real", args.CReal ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_numeric", args.CNumeric ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_decimal", args.CDecimal ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_double_precision", args.CDoublePrecision ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_date", args.CDate ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_timestamp", args.CTimestamp ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_char", args.CChar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_varchar", args.CVarchar ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_character_varying", args.CCharacterVarying ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_text", args.CText ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_text_array", args.CTextArray ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_bytea", args.CBytea ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@c_integer_array", args.CIntegerArray ?? (object)DBNull.Value);
                await command.ExecuteScalarAsync();
            }
        }
    }

    private const string InsertPostgresTypesBatchSql = "COPY postgres_types (c_boolean, c_smallint, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text) FROM STDIN (FORMAT BINARY)";
    public readonly record struct InsertPostgresTypesBatchArgs(bool? CBoolean, short? CSmallint, int? CInteger, long? CBigint, decimal? CDecimal, decimal? CNumeric, float? CReal, DateTime? CDate, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, string? CText);
    public async Task InsertPostgresTypesBatch(List<InsertPostgresTypesBatchArgs> args)
    {
        using (var ds = NpgsqlDataSource.Create(ConnectionString))
        {
            var connection = ds.CreateConnection();
            await connection.OpenAsync();
            using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresTypesBatchSql))
            {
                foreach (var row in args)
                {
                    await writer.StartRowAsync();
                    await writer.WriteAsync(row.CBoolean);
                    await writer.WriteAsync(row.CSmallint, NpgsqlDbType.Smallint);
                    await writer.WriteAsync(row.CInteger, NpgsqlDbType.Integer);
                    await writer.WriteAsync(row.CBigint, NpgsqlDbType.Bigint);
                    await writer.WriteAsync(row.CDecimal, NpgsqlDbType.Numeric);
                    await writer.WriteAsync(row.CNumeric, NpgsqlDbType.Numeric);
                    await writer.WriteAsync(row.CReal, NpgsqlDbType.Real);
                    await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                    await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                    await writer.WriteAsync(row.CChar);
                    await writer.WriteAsync(row.CVarchar, NpgsqlDbType.Varchar);
                    await writer.WriteAsync(row.CCharacterVarying, NpgsqlDbType.Varchar);
                    await writer.WriteAsync(row.CText);
                }

                await writer.CompleteAsync();
            }

            await connection.CloseAsync();
        }
    }

    private const string GetPostgresTypesSql = "SELECT c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_double_precision, c_date, c_time, c_timestamp, c_char, c_varchar, c_character_varying, c_bytea, c_text, c_json, c_text_array, c_integer_array FROM postgres_types LIMIT 1";
    public readonly record struct GetPostgresTypesRow(bool? CBoolean, byte[]? CBit, short? CSmallint, int? CInteger, long? CBigint, decimal? CDecimal, decimal? CNumeric, float? CReal, double? CDoublePrecision, DateTime? CDate, string? CTime, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, byte[]? CBytea, string? CText, object? CJson, string[]? CTextArray, int[]? CIntegerArray);
    public async Task<GetPostgresTypesRow?> GetPostgresTypes()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetPostgresTypesSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetPostgresTypesRow
                        {
                            CBoolean = reader.IsDBNull(0) ? (bool? )null : reader.GetBoolean(0),
                            CBit = reader.IsDBNull(1) ? null : reader.GetFieldValue<byte[]>(1),
                            CSmallint = reader.IsDBNull(2) ? (short? )null : reader.GetInt16(2),
                            CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                            CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                            CDecimal = reader.IsDBNull(5) ? (decimal? )null : reader.GetDecimal(5),
                            CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                            CReal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                            CDoublePrecision = reader.IsDBNull(8) ? (double? )null : reader.GetDouble(8),
                            CDate = reader.IsDBNull(9) ? (DateTime? )null : reader.GetDateTime(9),
                            CTime = reader.IsDBNull(10) ? (string? )null : reader.GetString(10),
                            CTimestamp = reader.IsDBNull(11) ? (DateTime? )null : reader.GetDateTime(11),
                            CChar = reader.IsDBNull(12) ? (string? )null : reader.GetString(12),
                            CVarchar = reader.IsDBNull(13) ? (string? )null : reader.GetString(13),
                            CCharacterVarying = reader.IsDBNull(14) ? (string? )null : reader.GetString(14),
                            CBytea = reader.IsDBNull(15) ? null : reader.GetFieldValue<byte[]>(15),
                            CText = reader.IsDBNull(16) ? (string? )null : reader.GetString(16),
                            CJson = reader.IsDBNull(17) ? (object? )null : reader.GetString(17),
                            CTextArray = reader.IsDBNull(18) ? null : reader.GetFieldValue<string[]>(18),
                            CIntegerArray = reader.IsDBNull(19) ? null : reader.GetFieldValue<int[]>(19)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string GetPostgresTypesAggSql = "SELECT COUNT(1) AS cnt , c_smallint, c_boolean, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text FROM  postgres_types  GROUP  BY  c_smallint , c_boolean, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_date, c_timestamp, c_char, c_varchar, c_character_varying, c_text LIMIT  1  ";  
    public readonly record struct GetPostgresTypesAggRow(long Cnt, short? CSmallint, bool? CBoolean, int? CInteger, long? CBigint, decimal? CDecimal, decimal? CNumeric, float? CReal, DateTime? CDate, DateTime? CTimestamp, string? CChar, string? CVarchar, string? CCharacterVarying, string? CText);
    public async Task<GetPostgresTypesAggRow?> GetPostgresTypesAgg()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(GetPostgresTypesAggSql))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetPostgresTypesAggRow
                        {
                            Cnt = reader.GetInt64(0),
                            CSmallint = reader.IsDBNull(1) ? (short? )null : reader.GetInt16(1),
                            CBoolean = reader.IsDBNull(2) ? (bool? )null : reader.GetBoolean(2),
                            CInteger = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                            CBigint = reader.IsDBNull(4) ? (long? )null : reader.GetInt64(4),
                            CDecimal = reader.IsDBNull(5) ? (decimal? )null : reader.GetDecimal(5),
                            CNumeric = reader.IsDBNull(6) ? (decimal? )null : reader.GetDecimal(6),
                            CReal = reader.IsDBNull(7) ? (float? )null : reader.GetFloat(7),
                            CDate = reader.IsDBNull(8) ? (DateTime? )null : reader.GetDateTime(8),
                            CTimestamp = reader.IsDBNull(9) ? (DateTime? )null : reader.GetDateTime(9),
                            CChar = reader.IsDBNull(10) ? (string? )null : reader.GetString(10),
                            CVarchar = reader.IsDBNull(11) ? (string? )null : reader.GetString(11),
                            CCharacterVarying = reader.IsDBNull(12) ? (string? )null : reader.GetString(12),
                            CText = reader.IsDBNull(13) ? (string? )null : reader.GetString(13)
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string TruncatePostgresTypesSql = "TRUNCATE TABLE postgres_types";
    public async Task TruncatePostgresTypes()
    {
        using (var connection = NpgsqlDataSource.Create(ConnectionString))
        {
            using (var command = connection.CreateCommand(TruncatePostgresTypesSql))
            {
                await command.ExecuteScalarAsync();
            }
        }
    }
}