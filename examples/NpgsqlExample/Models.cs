// auto-generated by sqlc - do not edit
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text.Json;
using System.Xml;

namespace NpgsqlExampleGen;
public readonly record struct PostgresType(bool? CBoolean, byte[]? CBit, short? CSmallint, int? CInteger, long? CBigint, decimal? CDecimal, decimal? CNumeric, float? CReal, double? CDoublePrecision, decimal? CMoney, DateTime? CDate, TimeSpan? CTime, DateTime? CTimestamp, DateTime? CTimestampWithTz, TimeSpan? CInterval, string? CChar, string? CVarchar, string? CCharacterVarying, string? CBpchar, string? CText, NpgsqlCidr? CCidr, IPAddress? CInet, PhysicalAddress? CMacaddr, string? CMacaddr8, Guid? CUuid, CEnum? CEnum);
public readonly record struct PostgresUnstructuredType(JsonElement? CJson, JsonElement? CJsonStringOverride, JsonElement? CJsonb, string? CJsonpath, XmlDocument? CXml, XmlDocument? CXmlStringOverride);
public readonly record struct PostgresArrayType(byte[]? CBytea, bool[]? CBooleanArray, string[]? CTextArray, int[]? CIntegerArray, decimal[]? CDecimalArray, DateTime[]? CDateArray, DateTime[]? CTimestampArray);
public readonly record struct PostgresGeometricType(NpgsqlPoint? CPoint, NpgsqlLine? CLine, NpgsqlLSeg? CLseg, NpgsqlBox? CBox, NpgsqlPath? CPath, NpgsqlPolygon? CPolygon, NpgsqlCircle? CCircle);
public readonly record struct Author(long Id, string Name, string? Bio);
public readonly record struct Book(Guid Id, string Name, long AuthorId, string? Description);
public readonly record struct ExtendedBio(string AuthorName, string Name, ExtendedBioType? BioType);
public enum CEnum
{
    Invalid = 0, // reserved for invalid enum value
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class CEnumExtensions
{
    private static readonly Dictionary<string, CEnum> StringToEnum = new Dictionary<string, CEnum>()
    {
        [string.Empty] = CEnum.Invalid,
        ["small"] = CEnum.Small,
        ["medium"] = CEnum.Medium,
        ["big"] = CEnum.Big
    };
    private static readonly Dictionary<CEnum, string> EnumToString = new Dictionary<CEnum, string>()
    {
        [CEnum.Invalid] = string.Empty,
        [CEnum.Small] = "small",
        [CEnum.Medium] = "medium",
        [CEnum.Big] = "big"
    };
    public static CEnum ToCEnum(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this CEnum me)
    {
        return EnumToString[me];
    }

    public static HashSet<CEnum> ToCEnumSet(this string me)
    {
        return new HashSet<CEnum>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum ExtendedBioType
{
    Invalid = 0, // reserved for invalid enum value
    Autobiography = 1,
    Biography = 2,
    Memoir = 3
}

public static class ExtendedBioTypeExtensions
{
    private static readonly Dictionary<string, ExtendedBioType> StringToEnum = new Dictionary<string, ExtendedBioType>()
    {
        [string.Empty] = ExtendedBioType.Invalid,
        ["Autobiography"] = ExtendedBioType.Autobiography,
        ["Biography"] = ExtendedBioType.Biography,
        ["Memoir"] = ExtendedBioType.Memoir
    };
    private static readonly Dictionary<ExtendedBioType, string> EnumToString = new Dictionary<ExtendedBioType, string>()
    {
        [ExtendedBioType.Invalid] = string.Empty,
        [ExtendedBioType.Autobiography] = "Autobiography",
        [ExtendedBioType.Biography] = "Biography",
        [ExtendedBioType.Memoir] = "Memoir"
    };
    public static ExtendedBioType ToExtendedBioType(this string me)
    {
        return StringToEnum[me];
    }

    public static string Stringify(this ExtendedBioType me)
    {
        return EnumToString[me];
    }

    public static HashSet<ExtendedBioType> ToExtendedBioTypeSet(this string me)
    {
        return new HashSet<ExtendedBioType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}