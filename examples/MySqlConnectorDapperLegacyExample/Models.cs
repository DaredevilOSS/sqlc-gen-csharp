// auto-generated by sqlc - do not edit
using NodaTime;
using NodaTime.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

namespace MySqlConnectorDapperLegacyExampleGen;
public class Author
{
    public required long Id { get; init; }
    public required string Name { get; init; }
    public string? Bio { get; init; }
};
public class Book
{
    public required long Id { get; init; }
    public required string Name { get; init; }
    public required long AuthorId { get; init; }
    public string? Description { get; init; }
};
public class MysqlNumericType
{
    public bool? CBool { get; init; }
    public bool? CBoolean { get; init; }
    public short? CTinyint { get; init; }
    public short? CSmallint { get; init; }
    public int? CMediumint { get; init; }
    public int? CInt { get; init; }
    public int? CInteger { get; init; }
    public long? CBigint { get; init; }
    public double? CFloat { get; init; }
    public decimal? CDecimal { get; init; }
    public decimal? CDec { get; init; }
    public decimal? CNumeric { get; init; }
    public decimal? CFixed { get; init; }
    public double? CDouble { get; init; }
    public double? CDoublePrecision { get; init; }
};
public class MysqlStringType
{
    public string? CChar { get; init; }
    public string? CNchar { get; init; }
    public string? CNationalChar { get; init; }
    public string? CVarchar { get; init; }
    public string? CTinytext { get; init; }
    public string? CMediumtext { get; init; }
    public string? CText { get; init; }
    public string? CLongtext { get; init; }
    public JsonElement? CJson { get; init; }
    public JsonElement? CJsonStringOverride { get; init; }
    public MysqlStringTypesCEnum? CEnum { get; init; }
    public HashSet<MysqlStringTypesCSet>? CSet { get; init; }
};
public class MysqlDatetimeType
{
    public short? CYear { get; init; }
    public DateTime? CDate { get; init; }
    public DateTime? CDatetime { get; init; }
    public DateTime? CTimestamp { get; init; }
    public TimeSpan? CTime { get; init; }
    public DateTime? CTimestampNodaInstantOverride { get; init; }
};
public class MysqlBinaryType
{
    public byte? CBit { get; init; }
    public byte[]? CBinary { get; init; }
    public byte[]? CVarbinary { get; init; }
    public byte[]? CTinyblob { get; init; }
    public byte[]? CBlob { get; init; }
    public byte[]? CMediumblob { get; init; }
    public byte[]? CLongblob { get; init; }
};
public class ExtendedBio
{
    public string? AuthorName { get; init; }
    public string? Name { get; init; }
    public BiosBioType? BioType { get; init; }
    public HashSet<BiosAuthorType>? AuthorType { get; init; }
};
public enum BiosBioType
{
    Invalid = 0, // reserved for invalid enum value
    Autobiography = 1,
    Biography = 2,
    Memoir = 3
}

public static class BiosBioTypeExtensions
{
    private static readonly Dictionary<string, BiosBioType> StringToEnum = new Dictionary<string, BiosBioType>()
    {
        [string.Empty] = BiosBioType.Invalid,
        ["Autobiography"] = BiosBioType.Autobiography,
        ["Biography"] = BiosBioType.Biography,
        ["Memoir"] = BiosBioType.Memoir
    };
    public static HashSet<BiosBioType> ToBiosBioTypeSet(this string me)
    {
        return new HashSet<BiosBioType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum BiosAuthorType
{
    Invalid = 0, // reserved for invalid enum value
    Author = 1,
    Editor = 2,
    Translator = 3
}

public static class BiosAuthorTypeExtensions
{
    private static readonly Dictionary<string, BiosAuthorType> StringToEnum = new Dictionary<string, BiosAuthorType>()
    {
        [string.Empty] = BiosAuthorType.Invalid,
        ["Author"] = BiosAuthorType.Author,
        ["Editor"] = BiosAuthorType.Editor,
        ["Translator"] = BiosAuthorType.Translator
    };
    public static HashSet<BiosAuthorType> ToBiosAuthorTypeSet(this string me)
    {
        return new HashSet<BiosAuthorType>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum MysqlStringTypesCEnum
{
    Invalid = 0, // reserved for invalid enum value
    Small = 1,
    Medium = 2,
    Big = 3
}

public static class MysqlStringTypesCEnumExtensions
{
    private static readonly Dictionary<string, MysqlStringTypesCEnum> StringToEnum = new Dictionary<string, MysqlStringTypesCEnum>()
    {
        [string.Empty] = MysqlStringTypesCEnum.Invalid,
        ["small"] = MysqlStringTypesCEnum.Small,
        ["medium"] = MysqlStringTypesCEnum.Medium,
        ["big"] = MysqlStringTypesCEnum.Big
    };
    public static HashSet<MysqlStringTypesCEnum> ToMysqlStringTypesCEnumSet(this string me)
    {
        return new HashSet<MysqlStringTypesCEnum>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}

public enum MysqlStringTypesCSet
{
    Invalid = 0, // reserved for invalid enum value
    Tea = 1,
    Coffee = 2,
    Milk = 3
}

public static class MysqlStringTypesCSetExtensions
{
    private static readonly Dictionary<string, MysqlStringTypesCSet> StringToEnum = new Dictionary<string, MysqlStringTypesCSet>()
    {
        [string.Empty] = MysqlStringTypesCSet.Invalid,
        ["tea"] = MysqlStringTypesCSet.Tea,
        ["coffee"] = MysqlStringTypesCSet.Coffee,
        ["milk"] = MysqlStringTypesCSet.Milk
    };
    public static HashSet<MysqlStringTypesCSet> ToMysqlStringTypesCSetSet(this string me)
    {
        return new HashSet<MysqlStringTypesCSet>(me.Split(',').ToList().Select(v => StringToEnum[v]));
    }
}