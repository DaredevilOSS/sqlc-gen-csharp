// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace MySqlConnectorDapperLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Dapper;
    using MySqlConnector;
    using System.Globalization;
    using System.IO;
    using CsvHelper;
    using CsvHelper.Configuration;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
            Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("name", args.Name);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow>(GetAuthorSql, dapperParams);
                return result;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name; SELECT LAST_INSERT_ID()";
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var results = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
                return results.AsList();
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio); SELECT LAST_INSERT_ID()";
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("name", args.Name);
                dapperParams.Add("bio", args.Bio);
                await connection.ExecuteAsync(CreateAuthorSql, dapperParams);
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio); SELECT LAST_INSERT_ID()";
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("name", args.Name);
                dapperParams.Add("bio", args.Bio);
                return await connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, dapperParams);
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio, created FROM authors WHERE id = @id LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("id", args.Id);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow>(GetAuthorByIdSql, dapperParams);
                return result;
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name; SELECT LAST_INSERT_ID()";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("name", args.Name);
                await connection.ExecuteAsync(DeleteAuthorSql, dapperParams);
            }
        }

        private const string DeleteAllAuthorsSql = "DELETE FROM authors; SELECT LAST_INSERT_ID()";
        public async Task DeleteAllAuthors()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(DeleteAllAuthorsSql);
            }
        }

        private const string TruncateBooksSql = "TRUNCATE TABLE books; SELECT LAST_INSERT_ID()";
        public async Task TruncateBooks()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncateBooksSql);
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL ; SELECT  LAST_INSERT_ID ( ) "; 
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("bio", args.Bio);
                return await connection.ExecuteAsync(UpdateAuthorsSql, dapperParams);
            }
        }

        private const string SelectAuthorsWithSliceSql = "SELECT id, name, bio, created FROM authors WHERE id IN (/*SLICE:ids*/@ids); SELECT LAST_INSERT_ID()";
        public class SelectAuthorsWithSliceRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class SelectAuthorsWithSliceArgs
        {
            public long[] Ids { get; set; }
        };
        public async Task<List<SelectAuthorsWithSliceRow>> SelectAuthorsWithSlice(SelectAuthorsWithSliceArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var transformedSql = SelectAuthorsWithSliceSql;
                transformedSql = Utils.GetTransformedString(transformedSql, args.Ids, "Ids", "ids");
                var dapperParams = new Dictionary<string, object>();
                for (int i = 0; i < args.Ids.Length; i++)
                    dapperParams.Add($"@IdsArg{i}", args.Ids[i]);
                var results = await connection.QueryAsync<SelectAuthorsWithSliceRow>(transformedSql, dapperParams);
                return results.AsList();
            }
        }

        private const string SelectAuthorsWithTwoSlicesSql = "SELECT id, name, bio, created FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names); SELECT LAST_INSERT_ID()";
        public class SelectAuthorsWithTwoSlicesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public DateTime Created { get; set; }
        };
        public class SelectAuthorsWithTwoSlicesArgs
        {
            public long[] Ids { get; set; }
            public string[] Names { get; set; }
        };
        public async Task<List<SelectAuthorsWithTwoSlicesRow>> SelectAuthorsWithTwoSlices(SelectAuthorsWithTwoSlicesArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var transformedSql = SelectAuthorsWithTwoSlicesSql;
                transformedSql = Utils.GetTransformedString(transformedSql, args.Ids, "Ids", "ids");
                transformedSql = Utils.GetTransformedString(transformedSql, args.Names, "Names", "names");
                var dapperParams = new Dictionary<string, object>();
                for (int i = 0; i < args.Ids.Length; i++)
                    dapperParams.Add($"@IdsArg{i}", args.Ids[i]);
                for (int i = 0; i < args.Names.Length; i++)
                    dapperParams.Add($"@NamesArg{i}", args.Names[i]);
                var results = await connection.QueryAsync<SelectAuthorsWithTwoSlicesRow>(transformedSql, dapperParams);
                return results.AsList();
            }
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id); SELECT LAST_INSERT_ID()";
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task CreateBook(CreateBookArgs args)
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var dapperParams = new Dictionary<string, object>();
                dapperParams.Add("name", args.Name);
                dapperParams.Add("author_id", args.AuthorId);
                await connection.ExecuteAsync(CreateBookSql, dapperParams);
            }
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, authors.created, books.id, books.name, books.author_id, books.description FROM authors JOIN books ON authors.id = books.author_id ORDER BY authors.name; SELECT LAST_INSERT_ID()";
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var results = await connection.QueryAsync<ListAllAuthorsBooksRow>(ListAllAuthorsBooksSql);
                return results.AsList();
            }
        }

        private const string TruncateCopyToTestsSql = "TRUNCATE TABLE copy_tests; SELECT LAST_INSERT_ID()";
        public async Task TruncateCopyToTests()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncateCopyToTestsSql);
            }
        }

        private const string CopyToTestsSql = "INSERT INTO copy_tests (c_int, c_varchar, c_date, c_timestamp) VALUES (@c_int, @c_varchar, @c_date, @c_timestamp); SELECT LAST_INSERT_ID()";
        public class CopyToTestsArgs
        {
            public int CInt { get; set; }
            public string CVarchar { get; set; }
            public DateTime CDate { get; set; }
            public DateTime CTimestamp { get; set; }
        };
        public async Task CopyToTests(List<CopyToTestsArgs> args)
        {
            var config = new CsvConfiguration(CultureInfo.CurrentCulture)
            {
                Delimiter = ","
            };
            using (var writer = new StreamWriter("input.csv"))
            using (var csvWriter = new CsvWriter(writer, config))
                await csvWriter.WriteRecordsAsync(args);
            using (var connection = new MySqlConnection(ConnectionString))
            {
                connection.Open();
                var loader = new MySqlBulkLoader(connection)
                {
                    Local = true,
                    TableName = "copy_tests",
                    FieldTerminator = ",",
                    FileName = "input.csv",
                    NumberOfLinesToSkip = 1
                };
                await loader.LoadAsync();
                await connection.CloseAsync();
            }
        }

        private const string CountCopyRowsSql = "SELECT COUNT(1) AS cnt FROM copy_tests; SELECT LAST_INSERT_ID()";
        public class CountCopyRowsRow
        {
            public long Cnt { get; set; }
        };
        public async Task<CountCopyRowsRow> CountCopyRows()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<CountCopyRowsRow>(CountCopyRowsSql);
                return result;
            }
        }

        private const string TestSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM node_mysql_types LIMIT 1; SELECT LAST_INSERT_ID()";
        public class TestRow
        {
            public byte[] CBit { get; set; }
            public int? CTinyint { get; set; }
            public int? CBool { get; set; }
            public int? CBoolean { get; set; }
            public int? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public long CSerial { get; set; }
            public string CDecimal { get; set; }
            public string CDec { get; set; }
            public string CNumeric { get; set; }
            public string CFixed { get; set; }
            public double? CFloat { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public DateTime? CDate { get; set; }
            public string CTime { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public int? CYear { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public string CTinytext { get; set; }
            public byte[] CBlob { get; set; }
            public string CText { get; set; }
            public byte[] CMediumblob { get; set; }
            public string CMediumtext { get; set; }
            public byte[] CLongblob { get; set; }
            public string CLongtext { get; set; }
            public object CJson { get; set; }
        };
        public async Task<TestRow> Test()
        {
            using (var connection = new MySqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<TestRow>(TestSql);
                return result;
            }
        }
    }
}