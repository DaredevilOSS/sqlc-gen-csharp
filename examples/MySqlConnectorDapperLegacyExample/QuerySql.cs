// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace MySqlConnectorDapperLegacyExampleGen
{
    using CsvHelper;
    using CsvHelper.Configuration;
    using CsvHelper.TypeConversion;
    using Dapper;
    using MySqlConnector;
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Text;
    using System.Text.Json;
    using System.Threading.Tasks;

    public class QuerySql
    {
        public QuerySql()
        {
            Utils.ConfigureSqlMapper();
            Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
        }

        public QuerySql(string connectionString) : this()
        {
            this.ConnectionString = connectionString;
        }

        private QuerySql(MySqlTransaction transaction) : this()
        {
            this.Transaction = transaction;
        }

        public static QuerySql WithTransaction(MySqlTransaction transaction)
        {
            return new QuerySql(transaction);
        }

        private MySqlTransaction Transaction { get; }
        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow>(GetAuthorSql, queryParams);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetAuthorRow>(GetAuthorSql, queryParams, transaction: this.Transaction);
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name ; SELECT  LAST_INSERT_ID ( ) "; 
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
                    return result.AsList();
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            return (await this.Transaction.Connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql, transaction: this.Transaction)).AsList();
        }

        private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio); SELECT LAST_INSERT_ID()";
        public class CreateAuthorArgs
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("id", args.Id);
            queryParams.Add("name", args.Name);
            queryParams.Add("bio", args.Bio);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(CreateAuthorSql, queryParams);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(CreateAuthorSql, queryParams, transaction: this.Transaction);
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio); SELECT LAST_INSERT_ID()";
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("bio", args.Bio);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    return await connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams);
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams, transaction: this.Transaction);
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetAuthorByIdRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("id", args.Id);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow>(GetAuthorByIdSql, queryParams);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow>(GetAuthorByIdSql, queryParams, transaction: this.Transaction);
        }

        private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE  name  LIKE  COALESCE ( @name_pattern ,  '%' ) ; SELECT  LAST_INSERT_ID ( ) "; 
        public class GetAuthorByNamePatternRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByNamePatternArgs
        {
            public string NamePattern { get; set; }
        };
        public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name_pattern", args.NamePattern);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryAsync<GetAuthorByNamePatternRow>(GetAuthorByNamePatternSql, queryParams);
                    return result.AsList();
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            return (await this.Transaction.Connection.QueryAsync<GetAuthorByNamePatternRow>(GetAuthorByNamePatternSql, queryParams, transaction: this.Transaction)).AsList();
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE  name  =  @name ; SELECT  LAST_INSERT_ID ( ) "; 
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(DeleteAuthorSql, queryParams, transaction: this.Transaction);
        }

        private const string DeleteAllAuthorsSql = "DELETE FROM authors; SELECT LAST_INSERT_ID()";
        public async Task DeleteAllAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(DeleteAllAuthorsSql);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(DeleteAllAuthorsSql, transaction: this.Transaction);
        }

        private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL ; SELECT  LAST_INSERT_ID ( ) "; 
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("bio", args.Bio);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.ExecuteAsync(UpdateAuthorsSql, queryParams, transaction: this.Transaction);
        }

        private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids); SELECT LAST_INSERT_ID()";
        public class GetAuthorsByIdsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsArgs
        {
            public long[] Ids { get; set; }
        };
        public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
        {
            var transformedSql = GetAuthorsByIdsSql;
            transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@idsArg{i}", args.Ids[i]);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryAsync<GetAuthorsByIdsRow>(transformedSql, queryParams);
                    return result.AsList();
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            return (await this.Transaction.Connection.QueryAsync<GetAuthorsByIdsRow>(transformedSql, queryParams, transaction: this.Transaction)).AsList();
        }

        private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/@ids) AND name IN (/*SLICE:names*/@names); SELECT LAST_INSERT_ID()";
        public class GetAuthorsByIdsAndNamesRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorsByIdsAndNamesArgs
        {
            public long[] Ids { get; set; }
            public string[] Names { get; set; }
        };
        public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
        {
            var transformedSql = GetAuthorsByIdsAndNamesSql;
            transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Ids.Length, "ids");
            transformedSql = Utils.TransformQueryForSliceArgs(transformedSql, args.Names.Length, "names");
            var queryParams = new Dictionary<string, object>();
            for (int i = 0; i < args.Ids.Length; i++)
                queryParams.Add($"@idsArg{i}", args.Ids[i]);
            for (int i = 0; i < args.Names.Length; i++)
                queryParams.Add($"@namesArg{i}", args.Names[i]);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(transformedSql, queryParams);
                    return result.AsList();
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            return (await this.Transaction.Connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(transformedSql, queryParams, transaction: this.Transaction)).AsList();
        }

        private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id); SELECT LAST_INSERT_ID()";
        public class CreateBookArgs
        {
            public string Name { get; set; }
            public long AuthorId { get; set; }
        };
        public async Task<long> CreateBook(CreateBookArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("name", args.Name);
            queryParams.Add("author_id", args.AuthorId);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    return await connection.QuerySingleAsync<long>(CreateBookSql, queryParams);
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QuerySingleAsync<long>(CreateBookSql, queryParams, transaction: this.Transaction);
        }

        private const string ListAllAuthorsBooksSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description  FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name ; SELECT  LAST_INSERT_ID ( ) "; 
        public class ListAllAuthorsBooksRow
        {
            public Author Author { get; set; }
            public Book Book { get; set; }
        };
        public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.OpenAsync();
                    using (var command = new MySqlCommand(ListAllAuthorsBooksSql, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAllAuthorsBooksRow>();
                            while (await reader.ReadAsync())
                                result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = ListAllAuthorsBooksSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAllAuthorsBooksRow>();
                    while (await reader.ReadAsync())
                        result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    return result;
                }
            }
        }

        private const string GetDuplicateAuthorsSql = "SELECT authors1.id, authors1.name, authors1.bio, authors2.id, authors2.name, authors2.bio FROM  authors  authors1  JOIN  authors  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id ; SELECT  LAST_INSERT_ID ( ) "; 
        public class GetDuplicateAuthorsRow
        {
            public Author Author { get; set; }
            public Author Author2 { get; set; }
        };
        public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.OpenAsync();
                    using (var command = new MySqlCommand(GetDuplicateAuthorsSql, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetDuplicateAuthorsRow>();
                            while (await reader.ReadAsync())
                                result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetDuplicateAuthorsSql;
                command.Transaction = this.Transaction;
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetDuplicateAuthorsRow>();
                    while (await reader.ReadAsync())
                        result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                    return result;
                }
            }
        }

        private const string GetAuthorsByBookNameSql = "SELECT authors.id, authors.name, authors.bio, books.id, books.name, books.author_id, books.description FROM  authors  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name ; SELECT  LAST_INSERT_ID ( ) "; 
        public class GetAuthorsByBookNameRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
            public Book Book { get; set; }
        };
        public class GetAuthorsByBookNameArgs
        {
            public string Name { get; set; }
        };
        public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.OpenAsync();
                    using (var command = new MySqlCommand(GetAuthorsByBookNameSql, connection))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<GetAuthorsByBookNameRow>();
                            while (await reader.ReadAsync())
                                result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                            return result;
                        }
                    }
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
                throw new InvalidOperationException("Transaction is provided, but its connection is null.");
            using (var command = this.Transaction.Connection.CreateCommand())
            {
                command.CommandText = GetAuthorsByBookNameSql;
                command.Transaction = this.Transaction;
                command.Parameters.AddWithValue("@name", args.Name);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<GetAuthorsByBookNameRow>();
                    while (await reader.ReadAsync())
                        result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                    return result;
                }
            }
        }

        private const string InsertMysqlTypesSql = "INSERT INTO mysql_types (c_bit, c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob) VALUES ( @c_bit, @c_bool, @c_boolean, @c_tinyint, @c_smallint, @c_mediumint, @c_int, @c_integer, @c_bigint, @c_decimal, @c_dec, @c_numeric, @c_fixed, @c_float, @c_double, @c_double_precision, @c_char, @c_nchar, @c_national_char, @c_varchar, @c_tinytext, @c_mediumtext, @c_text, @c_longtext, @c_enum, @c_json, @c_json_string_override, @c_year, @c_date, @c_datetime, @c_timestamp, @c_binary, @c_varbinary, @c_tinyblob, @c_blob, @c_mediumblob, @c_longblob ); SELECT  LAST_INSERT_ID ( ) "; 
        public class InsertMysqlTypesArgs
        {
            public byte? CBit { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CDec { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CFixed { get; set; }
            public double? CFloat { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public MysqlTypesCEnum? CEnum { get; set; }
            public JsonElement? CJson { get; set; }
            public string CJsonStringOverride { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task InsertMysqlTypes(InsertMysqlTypesArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("c_bit", args.CBit);
            queryParams.Add("c_bool", args.CBool);
            queryParams.Add("c_boolean", args.CBoolean);
            queryParams.Add("c_tinyint", args.CTinyint);
            queryParams.Add("c_smallint", args.CSmallint);
            queryParams.Add("c_mediumint", args.CMediumint);
            queryParams.Add("c_int", args.CInt);
            queryParams.Add("c_integer", args.CInteger);
            queryParams.Add("c_bigint", args.CBigint);
            queryParams.Add("c_decimal", args.CDecimal);
            queryParams.Add("c_dec", args.CDec);
            queryParams.Add("c_numeric", args.CNumeric);
            queryParams.Add("c_fixed", args.CFixed);
            queryParams.Add("c_float", args.CFloat);
            queryParams.Add("c_double", args.CDouble);
            queryParams.Add("c_double_precision", args.CDoublePrecision);
            queryParams.Add("c_char", args.CChar);
            queryParams.Add("c_nchar", args.CNchar);
            queryParams.Add("c_national_char", args.CNationalChar);
            queryParams.Add("c_varchar", args.CVarchar);
            queryParams.Add("c_tinytext", args.CTinytext);
            queryParams.Add("c_mediumtext", args.CMediumtext);
            queryParams.Add("c_text", args.CText);
            queryParams.Add("c_longtext", args.CLongtext);
            queryParams.Add("c_enum", args.CEnum);
            queryParams.Add("c_json", args.CJson.HasValue ? args.CJson.Value.GetRawText() : null);
            queryParams.Add("c_json_string_override", args.CJsonStringOverride);
            queryParams.Add("c_year", args.CYear);
            queryParams.Add("c_date", args.CDate);
            queryParams.Add("c_datetime", args.CDatetime);
            queryParams.Add("c_timestamp", args.CTimestamp);
            queryParams.Add("c_binary", args.CBinary);
            queryParams.Add("c_varbinary", args.CVarbinary);
            queryParams.Add("c_tinyblob", args.CTinyblob);
            queryParams.Add("c_blob", args.CBlob);
            queryParams.Add("c_mediumblob", args.CMediumblob);
            queryParams.Add("c_longblob", args.CLongblob);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(InsertMysqlTypesSql, queryParams);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(InsertMysqlTypesSql, queryParams, transaction: this.Transaction);
        }

        public class InsertMysqlTypesBatchArgs
        {
            public byte? CBit { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CDec { get; set; }
            public decimal? CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public MysqlTypesCEnum? CEnum { get; set; }
            public JsonElement? CJson { get; set; }
            public string CJsonStringOverride { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task InsertMysqlTypesBatch(List<InsertMysqlTypesBatchArgs> args)
        {
            const string supportedDateTimeFormat = "yyyy-MM-dd H:mm:ss";
            var config = new CsvConfiguration(CultureInfo.CurrentCulture)
            {
                Delimiter = ",",
                NewLine = "\n"
            };
            var nullConverterFn = new Utils.NullToStringCsvConverter();
            using (var writer = new StreamWriter("input.csv", false, new UTF8Encoding(false)))
            using (var csvWriter = new CsvWriter(writer, config))
            {
                var options = new TypeConverterOptions
                {
                    Formats = new[]
                    {
                        supportedDateTimeFormat
                    }
                };
                csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime>(options);
                csvWriter.Context.TypeConverterOptionsCache.AddOptions<DateTime?>(options);
                csvWriter.Context.TypeConverterCache.AddConverter<bool>(new Utils.BoolToBitCsvConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<bool?>(new Utils.BoolToBitCsvConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<byte>(new Utils.ByteCsvConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<byte?>(new Utils.ByteCsvConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<byte[]>(new Utils.ByteArrayCsvConverter());
                csvWriter.Context.TypeConverterCache.AddConverter<short?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<int?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<long?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<double?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<decimal?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<string>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<MysqlTypesCEnum?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<JsonElement?>(nullConverterFn);
                csvWriter.Context.TypeConverterCache.AddConverter<DateTime?>(nullConverterFn);
                await csvWriter.WriteRecordsAsync(args);
            }

            using (var connection = new MySqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                var loader = new MySqlBulkLoader(connection)
                {
                    Local = true,
                    TableName = "mysql_types",
                    FileName = "input.csv",
                    FieldTerminator = ",",
                    FieldQuotationCharacter = '"',
                    FieldQuotationOptional = true,
                    NumberOfLinesToSkip = 1,
                    LineTerminator = "\n"
                };
                loader.Columns.AddRange(new List<string> { "c_bit", "c_bool", "c_boolean", "c_tinyint", "c_smallint", "c_mediumint", "c_int", "c_integer", "c_bigint", "c_float", "c_numeric", "c_decimal", "c_dec", "c_fixed", "c_double", "c_double_precision", "c_char", "c_nchar", "c_national_char", "c_varchar", "c_tinytext", "c_mediumtext", "c_text", "c_longtext", "c_enum", "c_json", "c_json_string_override", "c_year", "c_date", "c_datetime", "c_timestamp", "c_binary", "c_varbinary", "c_tinyblob", "c_blob", "c_mediumblob", "c_longblob" });
                await loader.LoadAsync();
                await connection.CloseAsync();
            }
        }

        private const string GetMysqlTypesSql = "SELECT c_bool, c_boolean, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_decimal, c_dec, c_numeric, c_fixed, c_double, c_double_precision, c_year, c_date, c_time, c_datetime, c_timestamp, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_bit, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM mysql_types LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetMysqlTypesRow
        {
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CDec { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public string CTime { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public MysqlTypesCEnum? CEnum { get; set; }
            public JsonElement? CJson { get; set; }
            public JsonElement? CJsonStringOverride { get; set; }
            public byte? CBit { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task<GetMysqlTypesRow> GetMysqlTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetMysqlTypesRow>(GetMysqlTypesSql);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetMysqlTypesRow>(GetMysqlTypesSql, transaction: this.Transaction);
        }

        private const string GetMysqlTypesCntSql = "SELECT COUNT(1) AS cnt, c_bool, c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint,  c_float , c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob FROM  mysql_types  GROUP  BY  c_bool , c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_float, c_numeric, c_decimal, c_dec, c_fixed, c_double, c_double_precision, c_char, c_nchar, c_national_char, c_varchar, c_tinytext, c_mediumtext, c_text, c_longtext, c_enum, c_json, c_json_string_override, c_year, c_date, c_datetime, c_timestamp, c_binary, c_varbinary, c_tinyblob, c_blob, c_mediumblob, c_longblob LIMIT  1 ; SELECT  LAST_INSERT_ID ( ) "; 
        public class GetMysqlTypesCntRow
        {
            public long Cnt { get; set; }
            public bool? CBool { get; set; }
            public bool? CBoolean { get; set; }
            public byte? CBit { get; set; }
            public short? CTinyint { get; set; }
            public short? CSmallint { get; set; }
            public int? CMediumint { get; set; }
            public int? CInt { get; set; }
            public int? CInteger { get; set; }
            public long? CBigint { get; set; }
            public double? CFloat { get; set; }
            public decimal? CNumeric { get; set; }
            public decimal? CDecimal { get; set; }
            public decimal? CDec { get; set; }
            public decimal? CFixed { get; set; }
            public double? CDouble { get; set; }
            public double? CDoublePrecision { get; set; }
            public string CChar { get; set; }
            public string CNchar { get; set; }
            public string CNationalChar { get; set; }
            public string CVarchar { get; set; }
            public string CTinytext { get; set; }
            public string CMediumtext { get; set; }
            public string CText { get; set; }
            public string CLongtext { get; set; }
            public MysqlTypesCEnum? CEnum { get; set; }
            public JsonElement? CJson { get; set; }
            public string CJsonStringOverride { get; set; }
            public short? CYear { get; set; }
            public DateTime? CDate { get; set; }
            public DateTime? CDatetime { get; set; }
            public DateTime? CTimestamp { get; set; }
            public byte[] CBinary { get; set; }
            public byte[] CVarbinary { get; set; }
            public byte[] CTinyblob { get; set; }
            public byte[] CBlob { get; set; }
            public byte[] CMediumblob { get; set; }
            public byte[] CLongblob { get; set; }
        };
        public async Task<GetMysqlTypesCntRow> GetMysqlTypesCnt()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetMysqlTypesCntRow>(GetMysqlTypesCntSql);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetMysqlTypesCntRow>(GetMysqlTypesCntSql, transaction: this.Transaction);
        }

        private const string GetMysqlFunctionsSql = "SELECT MAX(c_int) AS max_int, MAX(c_varchar) AS max_varchar, MAX(c_timestamp) AS max_timestamp FROM  mysql_types ; SELECT  LAST_INSERT_ID ( ) "; 
        public class GetMysqlFunctionsRow
        {
            public int? MaxInt { get; set; }
            public string MaxVarchar { get; set; }
            public DateTime MaxTimestamp { get; set; }
        };
        public async Task<GetMysqlFunctionsRow> GetMysqlFunctions()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetMysqlFunctionsRow>(GetMysqlFunctionsSql);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetMysqlFunctionsRow>(GetMysqlFunctionsSql, transaction: this.Transaction);
        }

        private const string TruncateMysqlTypesSql = "TRUNCATE TABLE mysql_types; SELECT LAST_INSERT_ID()";
        public async Task TruncateMysqlTypes()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(TruncateMysqlTypesSql);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(TruncateMysqlTypesSql, transaction: this.Transaction);
        }

        private const string CreateExtendedBioSql = "INSERT INTO extended.bios (author_name, name, bio_type) VALUES (@author_name, @name, @bio_type); SELECT LAST_INSERT_ID()";
        public class CreateExtendedBioArgs
        {
            public string AuthorName { get; set; }
            public string Name { get; set; }
            public ExtendedBiosBioType? BioType { get; set; }
        };
        public async Task CreateExtendedBio(CreateExtendedBioArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("author_name", args.AuthorName);
            queryParams.Add("name", args.Name);
            queryParams.Add("bio_type", args.BioType);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(CreateExtendedBioSql, queryParams);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(CreateExtendedBioSql, queryParams, transaction: this.Transaction);
        }

        private const string GetFirstExtendedBioByTypeSql = "SELECT author_name, name, bio_type FROM extended.bios WHERE bio_type = @bio_type LIMIT 1; SELECT LAST_INSERT_ID()";
        public class GetFirstExtendedBioByTypeRow
        {
            public string AuthorName { get; set; }
            public string Name { get; set; }
            public ExtendedBiosBioType? BioType { get; set; }
        };
        public class GetFirstExtendedBioByTypeArgs
        {
            public ExtendedBiosBioType? BioType { get; set; }
        };
        public async Task<GetFirstExtendedBioByTypeRow> GetFirstExtendedBioByType(GetFirstExtendedBioByTypeArgs args)
        {
            var queryParams = new Dictionary<string, object>();
            queryParams.Add("bio_type", args.BioType);
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    var result = await connection.QueryFirstOrDefaultAsync<GetFirstExtendedBioByTypeRow>(GetFirstExtendedBioByTypeSql, queryParams);
                    return result;
                }
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetFirstExtendedBioByTypeRow>(GetFirstExtendedBioByTypeSql, queryParams, transaction: this.Transaction);
        }

        private const string TruncateExtendedBiosSql = "TRUNCATE TABLE extended.bios; SELECT LAST_INSERT_ID()";
        public async Task TruncateExtendedBios()
        {
            if (this.Transaction == null)
            {
                using (var connection = new MySqlConnection(ConnectionString))
                {
                    await connection.ExecuteAsync(TruncateExtendedBiosSql);
                }

                return;
            }

            if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            {
                throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
            }

            await this.Transaction.Connection.ExecuteAsync(TruncateExtendedBiosSql, transaction: this.Transaction);
        }
    }
}