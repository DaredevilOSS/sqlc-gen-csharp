// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using Dapper;
using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Text.Json;
using System.Threading.Tasks;

namespace NpgsqlDapperExampleGen;
public class QuerySql
{
    public QuerySql()
    {
        Utils.ConfigureSqlMapper();
        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    public QuerySql(string connectionString) : this()
    {
        this.ConnectionString = connectionString;
    }

    private QuerySql(NpgsqlTransaction transaction) : this()
    {
        this.Transaction = transaction;
    }

    public static QuerySql WithTransaction(NpgsqlTransaction transaction)
    {
        return new QuerySql(transaction);
    }

    private NpgsqlTransaction? Transaction { get; }
    private string? ConnectionString { get; }

    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE  name  =  @name  LIMIT  1  ";  
    public class GetAuthorRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("name", args.Name);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, queryParams);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, queryParams, transaction: this.Transaction);
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
    public class ListAuthorsRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
                return result.AsList();
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        return (await this.Transaction.Connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql, transaction: this.Transaction)).AsList();
    }

    private const string CreateAuthorSql = "INSERT INTO authors (id, name, bio) VALUES (@id, @name, @bio) RETURNING id, name, bio";
    public class CreateAuthorRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class CreateAuthorArgs
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<CreateAuthorRow?> CreateAuthor(CreateAuthorArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("id", args.Id);
        queryParams.Add("name", args.Name);
        queryParams.Add("bio", args.Bio);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<CreateAuthorRow?>(CreateAuthorSql, queryParams);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<CreateAuthorRow?>(CreateAuthorSql, queryParams, transaction: this.Transaction);
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
    public class CreateAuthorReturnIdRow
    {
        public required long Id { get; init; }
    };
    public class CreateAuthorReturnIdArgs
    {
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("name", args.Name);
        queryParams.Add("bio", args.Bio);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                return await connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams);
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QuerySingleAsync<long>(CreateAuthorReturnIdSql, queryParams, transaction: this.Transaction);
    }

    private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE  id  =  @id  LIMIT  1  ";  
    public class GetAuthorByIdRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorByIdArgs
    {
        public required long Id { get; init; }
    };
    public async Task<GetAuthorByIdRow?> GetAuthorById(GetAuthorByIdArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("id", args.Id);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow?>(GetAuthorByIdSql, queryParams);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow?>(GetAuthorByIdSql, queryParams, transaction: this.Transaction);
    }

    private const string GetAuthorByNamePatternSql = "SELECT id, name, bio FROM authors WHERE  name  LIKE  COALESCE ( @name_pattern ,  '%' ) ";  
    public class GetAuthorByNamePatternRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorByNamePatternArgs
    {
        public string? NamePattern { get; init; }
    };
    public async Task<List<GetAuthorByNamePatternRow>> GetAuthorByNamePattern(GetAuthorByNamePatternArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("name_pattern", args.NamePattern);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryAsync<GetAuthorByNamePatternRow>(GetAuthorByNamePatternSql, queryParams);
                return result.AsList();
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        return (await this.Transaction.Connection.QueryAsync<GetAuthorByNamePatternRow>(GetAuthorByNamePatternSql, queryParams, transaction: this.Transaction)).AsList();
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE  name  =  @name  ";  
    public class DeleteAuthorArgs
    {
        public required string Name { get; init; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("name", args.Name);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(DeleteAuthorSql, queryParams);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(DeleteAuthorSql, queryParams, transaction: this.Transaction);
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors CASCADE";
    public async Task TruncateAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncateAuthorsSql);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(TruncateAuthorsSql, transaction: this.Transaction);
    }

    private const string UpdateAuthorsSql = "UPDATE authors SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
    public class UpdateAuthorsArgs
    {
        public string? Bio { get; init; }
    };
    public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("bio", args.Bio);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                return await connection.ExecuteAsync(UpdateAuthorsSql, queryParams);
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.ExecuteAsync(UpdateAuthorsSql, queryParams, transaction: this.Transaction);
    }

    private const string GetAuthorsByIdsSql = "SELECT id, name, bio FROM authors WHERE  id  =  ANY ( @longArr_1 :: BIGINT [ ] ) ";  
    public class GetAuthorsByIdsRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorsByIdsArgs
    {
        public required long[] LongArr1 { get; init; }
    };
    public async Task<List<GetAuthorsByIdsRow>> GetAuthorsByIds(GetAuthorsByIdsArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("longArr_1", args.LongArr1);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryAsync<GetAuthorsByIdsRow>(GetAuthorsByIdsSql, queryParams);
                return result.AsList();
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        return (await this.Transaction.Connection.QueryAsync<GetAuthorsByIdsRow>(GetAuthorsByIdsSql, queryParams, transaction: this.Transaction)).AsList();
    }

    private const string GetAuthorsByIdsAndNamesSql = "SELECT id, name, bio FROM  authors  WHERE  id  =  ANY ( @longArr_1 :: BIGINT [ ] ) AND  name  =  ANY ( @stringArr_2 :: TEXT [ ] ) ";  
    public class GetAuthorsByIdsAndNamesRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
    };
    public class GetAuthorsByIdsAndNamesArgs
    {
        public required long[] LongArr1 { get; init; }
        public required string[] StringArr2 { get; init; }
    };
    public async Task<List<GetAuthorsByIdsAndNamesRow>> GetAuthorsByIdsAndNames(GetAuthorsByIdsAndNamesArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("longArr_1", args.LongArr1);
        queryParams.Add("stringArr_2", args.StringArr2);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(GetAuthorsByIdsAndNamesSql, queryParams);
                return result.AsList();
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        return (await this.Transaction.Connection.QueryAsync<GetAuthorsByIdsAndNamesRow>(GetAuthorsByIdsAndNamesSql, queryParams, transaction: this.Transaction)).AsList();
    }

    private const string CreateBookSql = "INSERT INTO books (name, author_id) VALUES (@name, @author_id) RETURNING id";
    public class CreateBookRow
    {
        public required long Id { get; init; }
    };
    public class CreateBookArgs
    {
        public required string Name { get; init; }
        public required long AuthorId { get; init; }
    };
    public async Task<long> CreateBook(CreateBookArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("name", args.Name);
        queryParams.Add("author_id", args.AuthorId);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                return await connection.QuerySingleAsync<long>(CreateBookSql, queryParams);
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QuerySingleAsync<long>(CreateBookSql, queryParams, transaction: this.Transaction);
    }

    private const string ListAllAuthorsBooksSql = "SELECT authors . id , authors . name, authors . bio, books . id, books . name, books . author_id, books . description  FROM  authors  INNER  JOIN  books  ON  authors . id  =  books . author_id  ORDER  BY  authors . name  "; 
    public class ListAllAuthorsBooksRow
    {
        public required Author? Author { get; init; }
        public required Book? Book { get; init; }
    };
    public async Task<List<ListAllAuthorsBooksRow>> ListAllAuthorsBooks()
    {
        if (this.Transaction == null)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(ListAllAuthorsBooksSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<ListAllAuthorsBooksRow>();
                        while (await reader.ReadAsync())
                            result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = ListAllAuthorsBooksSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<ListAllAuthorsBooksRow>();
                while (await reader.ReadAsync())
                    result.Add(new ListAllAuthorsBooksRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                return result;
            }
        }
    }

    private const string GetDuplicateAuthorsSql = "SELECT authors1 . id , authors1 . name, authors1 . bio, authors2 . id, authors2 . name, authors2 . bio  FROM  authors  AS  authors1  INNER  JOIN  authors  AS  authors2  ON  authors1 . name  =  authors2 . name  WHERE  authors1 . id < authors2 . id  "; 
    public class GetDuplicateAuthorsRow
    {
        public required Author? Author { get; init; }
        public required Author? Author2 { get; init; }
    };
    public async Task<List<GetDuplicateAuthorsRow>> GetDuplicateAuthors()
    {
        if (this.Transaction == null)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetDuplicateAuthorsSql))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetDuplicateAuthorsRow>();
                        while (await reader.ReadAsync())
                            result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetDuplicateAuthorsSql;
            command.Transaction = this.Transaction;
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetDuplicateAuthorsRow>();
                while (await reader.ReadAsync())
                    result.Add(new GetDuplicateAuthorsRow { Author = new Author { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2) }, Author2 = new Author { Id = reader.GetInt64(3), Name = reader.GetString(4), Bio = reader.IsDBNull(5) ? null : reader.GetString(5) } });
                return result;
            }
        }
    }

    private const string GetAuthorsByBookNameSql = "SELECT authors . id , authors . name, authors . bio, books . id, books . name, books . author_id, books . description  FROM  authors  INNER  JOIN  books  ON  authors . id  =  books . author_id  WHERE  books . name  =  @name  "; 
    public class GetAuthorsByBookNameRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public string? Bio { get; init; }
        public required Book? Book { get; init; }
    };
    public class GetAuthorsByBookNameArgs
    {
        public required string Name { get; init; }
    };
    public async Task<List<GetAuthorsByBookNameRow>> GetAuthorsByBookName(GetAuthorsByBookNameArgs args)
    {
        if (this.Transaction == null)
        {
            using (var connection = NpgsqlDataSource.Create(ConnectionString))
            {
                using (var command = connection.CreateCommand(GetAuthorsByBookNameSql))
                {
                    command.Parameters.AddWithValue("@name", args.Name);
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var result = new List<GetAuthorsByBookNameRow>();
                        while (await reader.ReadAsync())
                            result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                        return result;
                    }
                }
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
            throw new InvalidOperationException("Transaction is provided, but its connection is null.");
        using (var command = this.Transaction.Connection.CreateCommand())
        {
            command.CommandText = GetAuthorsByBookNameSql;
            command.Transaction = this.Transaction;
            command.Parameters.AddWithValue("@name", args.Name);
            using (var reader = await command.ExecuteReaderAsync())
            {
                var result = new List<GetAuthorsByBookNameRow>();
                while (await reader.ReadAsync())
                    result.Add(new GetAuthorsByBookNameRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? null : reader.GetString(2), Book = new Book { Id = reader.GetInt64(3), Name = reader.GetString(4), AuthorId = reader.GetInt64(5), Description = reader.IsDBNull(6) ? null : reader.GetString(6) } });
                return result;
            }
        }
    }

    private const string InsertPostgresTypesSql = "INSERT INTO postgres_types(c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bpchar, c_text, c_json, c_json_string_override, c_bytea, c_text_array, c_integer_array) VALUES ( @c_boolean, @c_bit, @c_smallint, @c_integer, @c_bigint, @c_real, @c_numeric, @c_decimal, @c_double_precision, @c_money, @c_date, @c_time, @c_timestamp, @c_timestamp_with_tz, @c_char, @c_varchar, @c_character_varying, @c_bpchar, @c_text, @c_json :: json, @c_json_string_override :: json, @c_bytea, @c_text_array, @c_integer_array ) "; 
    public class InsertPostgresTypesArgs
    {
        public bool? CBoolean { get; init; }
        public byte[]? CBit { get; init; }
        public short? CSmallint { get; init; }
        public int? CInteger { get; init; }
        public long? CBigint { get; init; }
        public float? CReal { get; init; }
        public decimal? CNumeric { get; init; }
        public decimal? CDecimal { get; init; }
        public double? CDoublePrecision { get; init; }
        public decimal? CMoney { get; init; }
        public DateTime? CDate { get; init; }
        public TimeSpan? CTime { get; init; }
        public DateTime? CTimestamp { get; init; }
        public DateTime? CTimestampWithTz { get; init; }
        public string? CChar { get; init; }
        public string? CVarchar { get; init; }
        public string? CCharacterVarying { get; init; }
        public string? CBpchar { get; init; }
        public string? CText { get; init; }
        public JsonElement? CJson { get; init; }
        public string? CJsonStringOverride { get; init; }
        public byte[]? CBytea { get; init; }
        public string[]? CTextArray { get; init; }
        public int[]? CIntegerArray { get; init; }
    };
    public async Task InsertPostgresTypes(InsertPostgresTypesArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("c_boolean", args.CBoolean);
        queryParams.Add("c_bit", args.CBit);
        queryParams.Add("c_smallint", args.CSmallint);
        queryParams.Add("c_integer", args.CInteger);
        queryParams.Add("c_bigint", args.CBigint);
        queryParams.Add("c_real", args.CReal);
        queryParams.Add("c_numeric", args.CNumeric);
        queryParams.Add("c_decimal", args.CDecimal);
        queryParams.Add("c_double_precision", args.CDoublePrecision);
        queryParams.Add("c_money", args.CMoney);
        queryParams.Add("c_date", args.CDate);
        queryParams.Add("c_time", args.CTime);
        queryParams.Add("c_timestamp", args.CTimestamp);
        queryParams.Add("c_timestamp_with_tz", args.CTimestampWithTz);
        queryParams.Add("c_char", args.CChar);
        queryParams.Add("c_varchar", args.CVarchar);
        queryParams.Add("c_character_varying", args.CCharacterVarying);
        queryParams.Add("c_bpchar", args.CBpchar);
        queryParams.Add("c_text", args.CText);
        queryParams.Add("c_json", args.CJson.HasValue ? args.CJson.Value.GetRawText() : null);
        queryParams.Add("c_json_string_override", args.CJsonStringOverride);
        queryParams.Add("c_bytea", args.CBytea);
        queryParams.Add("c_text_array", args.CTextArray);
        queryParams.Add("c_integer_array", args.CIntegerArray);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(InsertPostgresTypesSql, queryParams);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(InsertPostgresTypesSql, queryParams, transaction: this.Transaction);
    }

    private const string InsertPostgresTypesBatchSql = "COPY postgres_types (c_boolean, c_smallint, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bpchar, c_text, c_bytea) FROM STDIN (FORMAT BINARY)";
    public class InsertPostgresTypesBatchArgs
    {
        public bool? CBoolean { get; init; }
        public short? CSmallint { get; init; }
        public int? CInteger { get; init; }
        public long? CBigint { get; init; }
        public float? CReal { get; init; }
        public decimal? CNumeric { get; init; }
        public decimal? CDecimal { get; init; }
        public double? CDoublePrecision { get; init; }
        public decimal? CMoney { get; init; }
        public DateTime? CDate { get; init; }
        public TimeSpan? CTime { get; init; }
        public DateTime? CTimestamp { get; init; }
        public DateTime? CTimestampWithTz { get; init; }
        public string? CChar { get; init; }
        public string? CVarchar { get; init; }
        public string? CCharacterVarying { get; init; }
        public string? CBpchar { get; init; }
        public string? CText { get; init; }
        public byte[]? CBytea { get; init; }
    };
    public async Task InsertPostgresTypesBatch(List<InsertPostgresTypesBatchArgs> args)
    {
        using (var connection = new NpgsqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresTypesBatchSql))
            {
                foreach (var row in args)
                {
                    await writer.StartRowAsync();
                    await writer.WriteAsync(row.CBoolean);
                    await writer.WriteAsync(row.CSmallint, NpgsqlDbType.Smallint);
                    await writer.WriteAsync(row.CInteger, NpgsqlDbType.Integer);
                    await writer.WriteAsync(row.CBigint);
                    await writer.WriteAsync(row.CReal, NpgsqlDbType.Real);
                    await writer.WriteAsync(row.CNumeric, NpgsqlDbType.Numeric);
                    await writer.WriteAsync(row.CDecimal, NpgsqlDbType.Numeric);
                    await writer.WriteAsync(row.CDoublePrecision, NpgsqlDbType.Double);
                    await writer.WriteAsync(row.CMoney, NpgsqlDbType.Money);
                    await writer.WriteAsync(row.CDate, NpgsqlDbType.Date);
                    await writer.WriteAsync(row.CTime, NpgsqlDbType.Time);
                    await writer.WriteAsync(row.CTimestamp, NpgsqlDbType.Timestamp);
                    await writer.WriteAsync(row.CTimestampWithTz, NpgsqlDbType.TimestampTz);
                    await writer.WriteAsync(row.CChar);
                    await writer.WriteAsync(row.CVarchar);
                    await writer.WriteAsync(row.CCharacterVarying);
                    await writer.WriteAsync(row.CBpchar);
                    await writer.WriteAsync(row.CText);
                    await writer.WriteAsync(row.CBytea);
                }

                await writer.CompleteAsync();
            }

            await connection.CloseAsync();
        }
    }

    private const string GetPostgresTypesSql = "SELECT c_boolean, c_bit, c_smallint, c_integer, c_bigint, c_decimal, c_numeric, c_real, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bpchar, c_bytea, c_text, c_json, c_json_string_override, c_text_array, c_integer_array FROM postgres_types LIMIT 1";
    public class GetPostgresTypesRow
    {
        public bool? CBoolean { get; init; }
        public byte[]? CBit { get; init; }
        public short? CSmallint { get; init; }
        public int? CInteger { get; init; }
        public long? CBigint { get; init; }
        public decimal? CDecimal { get; init; }
        public decimal? CNumeric { get; init; }
        public float? CReal { get; init; }
        public double? CDoublePrecision { get; init; }
        public decimal? CMoney { get; init; }
        public DateTime? CDate { get; init; }
        public TimeSpan? CTime { get; init; }
        public DateTime? CTimestamp { get; init; }
        public DateTime? CTimestampWithTz { get; init; }
        public string? CChar { get; init; }
        public string? CVarchar { get; init; }
        public string? CCharacterVarying { get; init; }
        public string? CBpchar { get; init; }
        public byte[]? CBytea { get; init; }
        public string? CText { get; init; }
        public JsonElement? CJson { get; init; }
        public string? CJsonStringOverride { get; init; }
        public string[]? CTextArray { get; init; }
        public int[]? CIntegerArray { get; init; }
    };
    public async Task<GetPostgresTypesRow?> GetPostgresTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresTypesRow?>(GetPostgresTypesSql);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetPostgresTypesRow?>(GetPostgresTypesSql, transaction: this.Transaction);
    }

    private const string GetPostgresTypesCntSql = "SELECT c_smallint , c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bpchar, c_text, c_bytea, COUNT (* ) AS  cnt  FROM  postgres_types  GROUP  BY  c_smallint, c_boolean, c_integer, c_bigint, c_real, c_numeric, c_decimal, c_double_precision, c_money, c_date, c_time, c_timestamp, c_timestamp_with_tz, c_char, c_varchar, c_character_varying, c_bpchar, c_text, c_bytea LIMIT  1  ";  
    public class GetPostgresTypesCntRow
    {
        public short? CSmallint { get; init; }
        public bool? CBoolean { get; init; }
        public int? CInteger { get; init; }
        public long? CBigint { get; init; }
        public float? CReal { get; init; }
        public decimal? CNumeric { get; init; }
        public decimal? CDecimal { get; init; }
        public double? CDoublePrecision { get; init; }
        public decimal? CMoney { get; init; }
        public DateTime? CDate { get; init; }
        public TimeSpan? CTime { get; init; }
        public DateTime? CTimestamp { get; init; }
        public DateTime? CTimestampWithTz { get; init; }
        public string? CChar { get; init; }
        public string? CVarchar { get; init; }
        public string? CCharacterVarying { get; init; }
        public string? CBpchar { get; init; }
        public string? CText { get; init; }
        public byte[]? CBytea { get; init; }
        public required long Cnt { get; init; }
    };
    public async Task<GetPostgresTypesCntRow?> GetPostgresTypesCnt()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresTypesCntRow?>(GetPostgresTypesCntSql);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetPostgresTypesCntRow?>(GetPostgresTypesCntSql, transaction: this.Transaction);
    }

    private const string GetPostgresFunctionsSql = "SELECT MAX ( c_integer ) AS  max_integer , MAX (c_varchar ) AS  max_varchar, MAX (c_timestamp ) AS  max_timestamp  FROM  postgres_types  "; 
    public class GetPostgresFunctionsRow
    {
        public int? MaxInteger { get; init; }
        public string? MaxVarchar { get; init; }
        public required DateTime MaxTimestamp { get; init; }
    };
    public async Task<GetPostgresFunctionsRow?> GetPostgresFunctions()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresFunctionsRow?>(GetPostgresFunctionsSql);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetPostgresFunctionsRow?>(GetPostgresFunctionsSql, transaction: this.Transaction);
    }

    private const string InsertPostgresGeoTypesSql = "INSERT INTO postgres_geometric_types ( c_point , c_line, c_lseg, c_box, c_path, c_polygon, c_circle ) VALUES ( @c_point, @c_line, @c_lseg, @c_box, @c_path, @c_polygon, @c_circle ) "; 
    public class InsertPostgresGeoTypesArgs
    {
        public NpgsqlPoint? CPoint { get; init; }
        public NpgsqlLine? CLine { get; init; }
        public NpgsqlLSeg? CLseg { get; init; }
        public NpgsqlBox? CBox { get; init; }
        public NpgsqlPath? CPath { get; init; }
        public NpgsqlPolygon? CPolygon { get; init; }
        public NpgsqlCircle? CCircle { get; init; }
    };
    public async Task InsertPostgresGeoTypes(InsertPostgresGeoTypesArgs args)
    {
        var queryParams = new Dictionary<string, object?>();
        queryParams.Add("c_point", args.CPoint);
        queryParams.Add("c_line", args.CLine);
        queryParams.Add("c_lseg", args.CLseg);
        queryParams.Add("c_box", args.CBox);
        queryParams.Add("c_path", args.CPath);
        queryParams.Add("c_polygon", args.CPolygon);
        queryParams.Add("c_circle", args.CCircle);
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(InsertPostgresGeoTypesSql, queryParams);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(InsertPostgresGeoTypesSql, queryParams, transaction: this.Transaction);
    }

    private const string InsertPostgresGeoTypesBatchSql = "COPY postgres_geometric_types (c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle) FROM STDIN (FORMAT BINARY)";
    public class InsertPostgresGeoTypesBatchArgs
    {
        public NpgsqlPoint? CPoint { get; init; }
        public NpgsqlLine? CLine { get; init; }
        public NpgsqlLSeg? CLseg { get; init; }
        public NpgsqlBox? CBox { get; init; }
        public NpgsqlPath? CPath { get; init; }
        public NpgsqlPolygon? CPolygon { get; init; }
        public NpgsqlCircle? CCircle { get; init; }
    };
    public async Task InsertPostgresGeoTypesBatch(List<InsertPostgresGeoTypesBatchArgs> args)
    {
        using (var connection = new NpgsqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var writer = await connection.BeginBinaryImportAsync(InsertPostgresGeoTypesBatchSql))
            {
                foreach (var row in args)
                {
                    await writer.StartRowAsync();
                    await writer.WriteAsync(row.CPoint, NpgsqlDbType.Point);
                    await writer.WriteAsync(row.CLine, NpgsqlDbType.Line);
                    await writer.WriteAsync(row.CLseg, NpgsqlDbType.LSeg);
                    await writer.WriteAsync(row.CBox, NpgsqlDbType.Box);
                    await writer.WriteAsync(row.CPath, NpgsqlDbType.Path);
                    await writer.WriteAsync(row.CPolygon, NpgsqlDbType.Polygon);
                    await writer.WriteAsync(row.CCircle, NpgsqlDbType.Circle);
                }

                await writer.CompleteAsync();
            }

            await connection.CloseAsync();
        }
    }

    private const string GetPostgresGeoTypesSql = "SELECT c_point, c_line, c_lseg, c_box, c_path, c_polygon, c_circle FROM postgres_geometric_types LIMIT 1";
    public class GetPostgresGeoTypesRow
    {
        public NpgsqlPoint? CPoint { get; init; }
        public NpgsqlLine? CLine { get; init; }
        public NpgsqlLSeg? CLseg { get; init; }
        public NpgsqlBox? CBox { get; init; }
        public NpgsqlPath? CPath { get; init; }
        public NpgsqlPolygon? CPolygon { get; init; }
        public NpgsqlCircle? CCircle { get; init; }
    };
    public async Task<GetPostgresGeoTypesRow?> GetPostgresGeoTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                var result = await connection.QueryFirstOrDefaultAsync<GetPostgresGeoTypesRow?>(GetPostgresGeoTypesSql);
                return result;
            }
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        return await this.Transaction.Connection.QueryFirstOrDefaultAsync<GetPostgresGeoTypesRow?>(GetPostgresGeoTypesSql, transaction: this.Transaction);
    }

    private const string TruncatePostgresTypesSql = "TRUNCATE TABLE postgres_types";
    public async Task TruncatePostgresTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncatePostgresTypesSql);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(TruncatePostgresTypesSql, transaction: this.Transaction);
    }

    private const string TruncatePostgresGeoTypesSql = "TRUNCATE TABLE postgres_geometric_types";
    public async Task TruncatePostgresGeoTypes()
    {
        if (this.Transaction == null)
        {
            using (var connection = new NpgsqlConnection(ConnectionString))
            {
                await connection.ExecuteAsync(TruncatePostgresGeoTypesSql);
            }

            return;
        }

        if (this.Transaction?.Connection == null || this.Transaction?.Connection.State != System.Data.ConnectionState.Open)
        {
            throw new System.InvalidOperationException("Transaction is provided, but its connection is null.");
        }

        await this.Transaction.Connection.ExecuteAsync(TruncatePostgresGeoTypesSql, transaction: this.Transaction);
    }
}