{
  "settings": {
    "version": "2",
    "engine": "sqlite",
    "schema": [
      "examples/config/sqlite/schema.sql"
    ],
    "queries": [
      "examples/config/sqlite/query.sql"
    ],
    "codegen": {
      "out": "examples/SqliteDapperLegacyExample",
      "plugin": "csharp",
      "options": "eyJkZWJ1Z1JlcXVlc3QiOnRydWUsImdlbmVyYXRlQ3Nwcm9qIjp0cnVlLCJuYW1lc3BhY2VOYW1lIjoiU3FsaXRlRGFwcGVyTGVnYWN5RXhhbXBsZUdlbiIsIm92ZXJyaWRlcyI6W3siY29sdW1uIjoiR2V0U3FsaXRlRnVuY3Rpb25zOm1heF9pbnRlZ2VyIiwiY3NoYXJwX3R5cGUiOnsibm90TnVsbCI6ZmFsc2UsInR5cGUiOiJpbnQifX0seyJjb2x1bW4iOiJHZXRTcWxpdGVGdW5jdGlvbnM6bWF4X3ZhcmNoYXIiLCJjc2hhcnBfdHlwZSI6eyJub3ROdWxsIjpmYWxzZSwidHlwZSI6InN0cmluZyJ9fSx7ImNvbHVtbiI6IkdldFNxbGl0ZUZ1bmN0aW9uczptYXhfcmVhbCIsImNzaGFycF90eXBlIjp7Im5vdE51bGwiOnRydWUsInR5cGUiOiJkZWNpbWFsIn19XSwidGFyZ2V0RnJhbWV3b3JrIjoibmV0c3RhbmRhcmQyLjAiLCJ1c2VEYXBwZXIiOnRydWV9",
      "process": {
        "cmd": "./dist/LocalRunner"
      }
    }
  },
  "catalog": {
    "defaultSchema": "main",
    "schemas": [
      {
        "name": "main",
        "tables": [
          {
            "rel": {
              "name": "authors"
            },
            "columns": [
              {
                "name": "id",
                "notNull": true,
                "length": -1,
                "table": {
                  "name": "authors"
                },
                "type": {
                  "name": "INTEGER"
                }
              },
              {
                "name": "name",
                "notNull": true,
                "length": -1,
                "table": {
                  "name": "authors"
                },
                "type": {
                  "name": "TEXT"
                }
              },
              {
                "name": "bio",
                "length": -1,
                "table": {
                  "name": "authors"
                },
                "type": {
                  "name": "TEXT"
                }
              }
            ]
          },
          {
            "rel": {
              "name": "books"
            },
            "columns": [
              {
                "name": "id",
                "notNull": true,
                "length": -1,
                "table": {
                  "name": "books"
                },
                "type": {
                  "name": "INTEGER"
                }
              },
              {
                "name": "name",
                "notNull": true,
                "length": -1,
                "table": {
                  "name": "books"
                },
                "type": {
                  "name": "TEXT"
                }
              },
              {
                "name": "author_id",
                "notNull": true,
                "length": -1,
                "table": {
                  "name": "books"
                },
                "type": {
                  "name": "INTEGER"
                }
              },
              {
                "name": "description",
                "length": -1,
                "table": {
                  "name": "books"
                },
                "type": {
                  "name": "TEXT"
                }
              }
            ]
          },
          {
            "rel": {
              "name": "types_sqlite"
            },
            "columns": [
              {
                "name": "c_integer",
                "length": -1,
                "table": {
                  "name": "types_sqlite"
                },
                "type": {
                  "name": "INTEGER"
                }
              },
              {
                "name": "c_real",
                "length": -1,
                "table": {
                  "name": "types_sqlite"
                },
                "type": {
                  "name": "REAL"
                }
              },
              {
                "name": "c_text",
                "length": -1,
                "table": {
                  "name": "types_sqlite"
                },
                "type": {
                  "name": "TEXT"
                }
              },
              {
                "name": "c_blob",
                "length": -1,
                "table": {
                  "name": "types_sqlite"
                },
                "type": {
                  "name": "BLOB"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  "queries": [
    {
      "text": "SELECT id, name, bio FROM authors\nWHERE name = ? LIMIT 1",
      "name": "GetAuthor",
      "cmd": ":one",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT id, name, bio FROM authors\nORDER BY name",
      "name": "ListAuthors",
      "cmd": ":many",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "INSERT INTO authors (id, name, bio) VALUES (?, ?, ?)",
      "name": "CreateAuthor",
      "cmd": ":exec",
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "id",
            "notNull": true,
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "INTEGER"
            },
            "originalName": "id"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        },
        {
          "number": 3,
          "column": {
            "name": "bio",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "bio"
          }
        }
      ],
      "filename": "query.sql",
      "insert_into_table": {
        "name": "authors"
      }
    },
    {
      "text": "INSERT INTO authors (name, bio) VALUES (?, ?) RETURNING id",
      "name": "CreateAuthorReturnId",
      "cmd": ":execlastid",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "bio",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "bio"
          }
        }
      ],
      "filename": "query.sql",
      "insert_into_table": {
        "name": "authors"
      }
    },
    {
      "text": "SELECT id, name, bio FROM authors\nWHERE id = ? LIMIT 1",
      "name": "GetAuthorById",
      "cmd": ":one",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "id",
            "notNull": true,
            "length": -1,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "INTEGER"
            },
            "originalName": "id"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT id, name, bio FROM authors\nWHERE name LIKE COALESCE(?1, '%')",
      "name": "GetAuthorByNamePattern",
      "cmd": ":many",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name_pattern",
            "length": -1,
            "isNamedParam": true,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "UPDATE authors\nSET bio = ?\nWHERE bio IS NOT NULL",
      "name": "UpdateAuthors",
      "cmd": ":execrows",
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "bio",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "bio"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/?)",
      "name": "GetAuthorsByIds",
      "cmd": ":many",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "ids",
            "notNull": true,
            "length": -1,
            "isNamedParam": true,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "INTEGER"
            },
            "isSqlcSlice": true,
            "originalName": "id"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT id, name, bio FROM authors WHERE id IN (/*SLICE:ids*/?) AND name IN (/*SLICE:names*/?)",
      "name": "GetAuthorsByIdsAndNames",
      "cmd": ":many",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "ids",
            "notNull": true,
            "length": -1,
            "isNamedParam": true,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "INTEGER"
            },
            "isSqlcSlice": true,
            "originalName": "id"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "names",
            "notNull": true,
            "length": -1,
            "isNamedParam": true,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "isSqlcSlice": true,
            "originalName": "name"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "DELETE FROM authors\nWHERE name = ?",
      "name": "DeleteAuthor",
      "cmd": ":exec",
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "name": "authors"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "INSERT INTO books (name, author_id) VALUES (?, ?) RETURNING id",
      "name": "CreateBook",
      "cmd": ":execlastid",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "books"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "schema": "main",
              "name": "books"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "author_id",
            "notNull": true,
            "length": -1,
            "table": {
              "schema": "main",
              "name": "books"
            },
            "type": {
              "name": "INTEGER"
            },
            "originalName": "author_id"
          }
        }
      ],
      "filename": "query.sql",
      "insert_into_table": {
        "name": "books"
      }
    },
    {
      "text": "SELECT\n    authors.id, authors.name, authors.bio,\n    books.id, books.name, books.author_id, books.description\nFROM authors INNER JOIN books ON authors.id = books.author_id\nORDER BY authors.name",
      "name": "ListAllAuthorsBooks",
      "cmd": ":many",
      "columns": [
        {
          "name": "authors",
          "length": -1,
          "type": {},
          "embedTable": {
            "name": "authors"
          }
        },
        {
          "name": "books",
          "length": -1,
          "type": {},
          "embedTable": {
            "name": "books"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT\n    authors1.id, authors1.name, authors1.bio,\n    authors2.id, authors2.name, authors2.bio\nFROM authors AS authors1\nINNER JOIN authors AS authors2 ON authors1.name = authors2.name\nWHERE authors1.id \u003c authors2.id",
      "name": "GetDuplicateAuthors",
      "cmd": ":many",
      "columns": [
        {
          "name": "authors",
          "length": -1,
          "type": {},
          "embedTable": {
            "name": "authors"
          }
        },
        {
          "name": "authors",
          "length": -1,
          "type": {},
          "embedTable": {
            "name": "authors"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT\n    authors.id, authors.name, authors.bio,\n    books.id, books.name, books.author_id, books.description\nFROM authors INNER JOIN books ON authors.id = books.author_id\nWHERE books.name = ?",
      "name": "GetAuthorsByBookName",
      "cmd": ":many",
      "columns": [
        {
          "name": "id",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "id"
        },
        {
          "name": "name",
          "notNull": true,
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "name"
        },
        {
          "name": "bio",
          "length": -1,
          "table": {
            "name": "authors"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "bio"
        },
        {
          "name": "books",
          "length": -1,
          "type": {},
          "embedTable": {
            "name": "books"
          }
        }
      ],
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "name",
            "notNull": true,
            "length": -1,
            "table": {
              "name": "books"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "name"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "DELETE FROM authors",
      "name": "DeleteAllAuthors",
      "cmd": ":exec",
      "filename": "query.sql"
    },
    {
      "text": "INSERT INTO types_sqlite (c_integer, c_real, c_text, c_blob) VALUES (\n    ?, ?, ?, ?\n)",
      "name": "InsertSqliteTypes",
      "cmd": ":exec",
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "c_integer",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "INTEGER"
            },
            "originalName": "c_integer"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "c_real",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "REAL"
            },
            "originalName": "c_real"
          }
        },
        {
          "number": 3,
          "column": {
            "name": "c_text",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "c_text"
          }
        },
        {
          "number": 4,
          "column": {
            "name": "c_blob",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "BLOB"
            },
            "originalName": "c_blob"
          }
        }
      ],
      "filename": "query.sql",
      "insert_into_table": {
        "name": "types_sqlite"
      }
    },
    {
      "text": "INSERT INTO types_sqlite (c_integer, c_real, c_text) VALUES (?, ?, ?)",
      "name": "InsertSqliteTypesBatch",
      "cmd": ":copyfrom",
      "parameters": [
        {
          "number": 1,
          "column": {
            "name": "c_integer",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "INTEGER"
            },
            "originalName": "c_integer"
          }
        },
        {
          "number": 2,
          "column": {
            "name": "c_real",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "REAL"
            },
            "originalName": "c_real"
          }
        },
        {
          "number": 3,
          "column": {
            "name": "c_text",
            "length": -1,
            "table": {
              "schema": "main",
              "name": "types_sqlite"
            },
            "type": {
              "name": "TEXT"
            },
            "originalName": "c_text"
          }
        }
      ],
      "filename": "query.sql",
      "insert_into_table": {
        "name": "types_sqlite"
      }
    },
    {
      "text": "SELECT c_integer, c_real, c_text, c_blob FROM types_sqlite LIMIT 1",
      "name": "GetSqliteTypes",
      "cmd": ":one",
      "columns": [
        {
          "name": "c_integer",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "c_integer"
        },
        {
          "name": "c_real",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "REAL"
          },
          "originalName": "c_real"
        },
        {
          "name": "c_text",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "c_text"
        },
        {
          "name": "c_blob",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "BLOB"
          },
          "originalName": "c_blob"
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT\n    c_integer,\n    c_real,\n    c_text,\n    c_blob,\n    COUNT(*) AS cnt\nFROM types_sqlite\nGROUP BY c_integer, c_real, c_text, c_blob\nLIMIT 1",
      "name": "GetSqliteTypesCnt",
      "cmd": ":one",
      "columns": [
        {
          "name": "c_integer",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "INTEGER"
          },
          "originalName": "c_integer"
        },
        {
          "name": "c_real",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "REAL"
          },
          "originalName": "c_real"
        },
        {
          "name": "c_text",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "TEXT"
          },
          "originalName": "c_text"
        },
        {
          "name": "c_blob",
          "length": -1,
          "table": {
            "name": "types_sqlite"
          },
          "type": {
            "name": "BLOB"
          },
          "originalName": "c_blob"
        },
        {
          "name": "cnt",
          "notNull": true,
          "length": -1,
          "isFuncCall": true,
          "type": {
            "name": "integer"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "SELECT\n    MAX(c_integer) AS max_integer,\n    MAX(c_real) AS max_real,\n    MAX(c_text) AS max_text\nFROM types_sqlite",
      "name": "GetSqliteFunctions",
      "cmd": ":one",
      "columns": [
        {
          "name": "max_integer",
          "length": -1,
          "isFuncCall": true,
          "type": {
            "name": "any"
          }
        },
        {
          "name": "max_real",
          "length": -1,
          "isFuncCall": true,
          "type": {
            "name": "any"
          }
        },
        {
          "name": "max_text",
          "length": -1,
          "isFuncCall": true,
          "type": {
            "name": "any"
          }
        }
      ],
      "filename": "query.sql"
    },
    {
      "text": "DELETE FROM types_sqlite",
      "name": "DeleteAllSqliteTypes",
      "cmd": ":exec",
      "filename": "query.sql"
    }
  ],
  "sqlc_version": "v1.27.0",
  "plugin_options": ""
}