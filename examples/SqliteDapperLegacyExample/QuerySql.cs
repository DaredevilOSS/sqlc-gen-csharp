// auto-generated by sqlc - do not edit
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
namespace SqliteDapperLegacyExampleGen
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Dapper;
    using Microsoft.Data.Sqlite;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.ConnectionString = connectionString;
            Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
        }

        private string ConnectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE name = @name LIMIT 1";
        public class GetAuthorRow
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("name", args.Name);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow>(GetAuthorSql, dapperParams);
                return result;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER BY name";
        public class ListAuthorsRow
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                var results = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql, dapperParams);
                return results.AsList();
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("name", args.Name);
                dapperParams.Add("bio", args.Bio);
                await connection.ExecuteAsync(CreateAuthorSql, dapperParams);
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio) RETURNING id";
        public class CreateAuthorReturnIdRow
        {
            public int Id { get; set; }
        };
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<int> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("name", args.Name);
                dapperParams.Add("bio", args.Bio);
                return await connection.QuerySingleAsync<int>(CreateAuthorReturnIdSql, dapperParams);
            }
        }

        private const string GetAuthorByIdSql = "SELECT id, name, bio FROM authors WHERE id = @id LIMIT 1";
        public class GetAuthorByIdRow
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorByIdArgs
        {
            public int Id { get; set; }
        };
        public async Task<GetAuthorByIdRow> GetAuthorById(GetAuthorByIdArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("id", args.Id);
                var result = await connection.QueryFirstOrDefaultAsync<GetAuthorByIdRow>(GetAuthorByIdSql, dapperParams);
                return result;
            }
        }

        private const string UpdateAuthorsSql = "UPDATE authors  SET  bio  =  @bio  WHERE  bio  IS  NOT  NULL  ";  
        public class UpdateAuthorsArgs
        {
            public string Bio { get; set; }
        };
        public async Task<long> UpdateAuthors(UpdateAuthorsArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("bio", args.Bio);
                return await connection.ExecuteAsync(UpdateAuthorsSql, dapperParams);
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
        public class DeleteAuthorArgs
        {
            public string Name { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                dapperParams.Add("name", args.Name);
                await connection.ExecuteAsync(DeleteAuthorSql, dapperParams);
            }
        }

        private const string DeleteAllAuthorsSql = "DELETE FROM authors";
        public async Task DeleteAllAuthors()
        {
            using (var connection = new SqliteConnection(ConnectionString))
            {
                var dapperParams = new System.Dynamic.ExpandoObject() as IDictionary<string, object>;
                await connection.ExecuteAsync(DeleteAllAuthorsSql, dapperParams);
            }
        }
    }
}