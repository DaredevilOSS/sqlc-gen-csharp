// auto-generated by sqlc - do not edit
namespace SqliteDapperLegacyExampleGen
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Text.RegularExpressions;

    public static class Utils
    {
        public static byte[] GetBytes(IDataRecord reader, int ordinal)
        {
            const int bufferSize = 100000;
            if (reader is null)
                throw new ArgumentNullException(nameof(reader));
            var buffer = new byte[bufferSize];
            var(bytesRead, offset) = (0, 0);
            while (bytesRead < bufferSize)
            {
                var read = (int)reader.GetBytes(ordinal, bufferSize + bytesRead, buffer, offset, bufferSize - bytesRead);
                if (read == 0)
                    break;
                bytesRead += read;
                offset += read;
            }

            if (bytesRead < bufferSize)
                Array.Resize(ref buffer, bytesRead);
            return buffer;
        }

        public static string TransformQueryForSliceArgs(string originalSql, int sliceSize, string paramName)
        {
            var paramArgs = Enumerable.Range(0, sliceSize).Select(i => $"@{paramName}Arg{i}").ToList();
            return originalSql.Replace($"/*SLICE:{paramName}*/@{paramName}", string.Join(",", paramArgs));
        }

        private static readonly Regex ValuesRegex = new Regex(@"VALUES\s*\((?<params>[^)]*)\)", RegexOptions.IgnoreCase);
        public static string TransformQueryForSqliteBatch(string originalSql, int cntRecords)
        {
            var match = ValuesRegex.Match(originalSql);
            if (!match.Success)
                throw new ArgumentException("The query does not contain a valid VALUES clause.");
            var valuesParams = match.Groups["params"].Value.Split(',').Select(p => p.Trim()).ToList();
            var batchRows = Enumerable.Range(0, cntRecords).Select(i => "(" + string.Join(", ", valuesParams.Select(p => $"{p}{i}")) + ")");
            var batchValuesClause = "VALUES " + string.Join(",\n", batchRows);
            return ValuesRegex.Replace(originalSql, batchValuesClause);
        }
    }
}