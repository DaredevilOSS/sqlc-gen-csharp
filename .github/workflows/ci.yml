name: CI
defaults:
  run:
    shell: bash

env:
  SQLC_VERSION: 1.27.0
  WASI_SDK_VERSION: 22

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
    paths:
      - "**"
      - "!**.md"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: .NET Lint
        uses: zyactions/dotnet-lint@v1
        with:
          implicit-restore: true
          workspace: sqlc-gen-csharp.sln
          exclude: |
            GeneratedProtobuf
            examples

  build-wasm:
    name: Build (WASM)
    needs: [lint]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: install Wasi workload
        run: dotnet workload install wasi-experimental

      - name: Setup Derived Variables
        run: |
          echo "WASI_SDK_FOLDER_NAME=wasi-sdk-${{ env.WASI_SDK_VERSION }}.0" >> $GITHUB_ENV
          echo "WASI_SDK_FILENAME=wasi-sdk-${{ env.WASI_SDK_VERSION }}.0-linux.tar.gz" >> $GITHUB_ENV

      - name: Download Wasi SDK
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{ env.WASI_SDK_VERSION }}/${{ env.WASI_SDK_FILENAME }}
          tar xf ${{ env.WASI_SDK_FILENAME }}
          chmod -R 755 ${{ env.WASI_SDK_FILENAME }}

      - name: Dotnet Wasm Publish
        shell: bash
        run: |
          set -e
          WASI_SDK_PATH="$(pwd)/${{ env.WASI_SDK_FOLDER_NAME }}" dotnet publish WasmRunner -c release
          ./scripts/wasm/copy_plugin_to.sh dist

      - name: upload wasm plugin as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-file
          path: dist/plugin.wasm
          
  codegen-tests:
     name: Codegen Tests
     runs-on: ubuntu-latest
     needs: [build-wasm]

     steps:
       - uses: actions/checkout@v4

       - uses: actions/download-artifact@v4
         with:
           name: wasm-file
           path: dist

       - name: Load .env file
         uses: xom9ikk/dotenv@v2.3.0
         with:
           load-mode: strict

       - uses: sqlc-dev/setup-sqlc@v4
         with:
           sqlc-version: '${{ env.SQLC_VERSION }}'

       - name: Updating plugin sha
         run: ./scripts/wasm/update_sha.sh sqlc.ci.yaml

       - name: Verify pushed generated code is synced
         run: |
           ./scripts/wasm/update_sha.sh sqlc.ci.yaml
           sqlc -f sqlc.ci.yaml diff
           
  end2end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [codegen-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist
          
      - name: Unit Tests
        run:  dotnet test SqlcGenCsharpTests

      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '${{ env.SQLC_VERSION }}'

      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Docker compose
        uses: hoverkraft-tech/compose-action@v1.5.1

      - name: End-to-End Tests
        run: ./scripts/run_end2end_tests.sh
        
  legacy-end2end-tests: 
    # As this can run only on Windows machines, these tests should run only in CI
    name: End-to-End Tests (Legacy)
    runs-on: windows-latest
    needs: [codegen-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist
          
      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '${{ env.SQLC_VERSION }}'
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Visual Studio for .NET Framework
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: 'latest'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.1
        
      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      # - uses: ikalnytskyi/action-setup-postgres@v7
      #   with:
      #     username: ${{ env.POSTGRES_USER }}
      #     password: ${{ env.POSTGRES_PASSWORD }}
      #     database: ${{ env.TESTS_DB }}
      #     postgres-version: "16"
      #   id: postgres
        
          
      - name: Install MySQL and restore test projects in parallel
        shell: pwsh
        env:
          INPUTS_POSTGRES_VERSION: 16
          INPUTS_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          INPUTS_USERNAME: ${{ env.POSTGRES_USER }}
          INPUTS_PORT: 5432
          INPUTS_SSL: false
          INPUTS_DATABASE: ${{ env.TESTS_DB }}
        run: |
          $mysql_job = Start-Job -ScriptBlock { 
            choco install mysql --no-progress --version=8.0.31 -y --params "/serviceName:MySQL" 
          }
          
          $postgres_job = Start-Job -ScriptBlock {
            # Step 1: Validate PostgreSQL Version
            $validVersions = @("14", "15", "16", "17")
            if ($validVersions -notcontains $env:INPUTS_POSTGRES_VERSION) {
                Write-Output "::error::postgres-version must be one of: 14, 15, 16, 17."
                exit 1
            }

            # Step 2: Clear Potential Conflicting PostgreSQL Environment Variables
            $envVars = @("PGROOT", "PGDATA", "PGBIN", "PGUSER", "PGPASSWORD")
            foreach ($name in $envVars) {
                Add-Content -Path $env:GITHUB_ENV -Value "$name="
            }

            # Step 3: Install PostgreSQL using Chocolatey
            choco install postgresql$($env:INPUTS_POSTGRES_VERSION) `
                --params "/Password:$($env:INPUTS_PASSWORD)" `
                --ia "--enable-components server,commandlinetools --extract-only 1" `
                --no-progress

            # Step 4: Configure Paths
            $pgConfigPath = "$env:PROGRAMFILES\PostgreSQL\$($env:INPUTS_POSTGRES_VERSION)\bin\pg_config.exe"
            $pgBindir = & $pgConfigPath --bindir
            $pgLibdir = & $pgConfigPath --libdir
            Add-Content -Path $env:GITHUB_PATH -Value $pgBindir
            Add-Content -Path $env:GITHUB_ENV -Value "PQ_LIB_DIR=$pgLibdir"

            # Step 5: Initialize Database
            $pgData = "$env:RUNNER_TEMP\pgdata"
            $pwFile = "$env:RUNNER_TEMP\pwfile"
            $defaultEncoding = "UTF-8"
            $defaultLocale = "en_US.$defaultEncoding"

            # Adjust locale for Windows Server 2019
            if ((Get-WmiObject -Class Win32_OperatingSystem).Caption -match "2019") {
                $defaultLocale = $defaultLocale -replace "\..*", "" -replace "_", "-"
            }

            # Write the password to a file
            Set-Content -Path $pwFile -Value $env:INPUTS_PASSWORD

            # Initialize PostgreSQL database cluster
            & "$pgBindir\initdb.exe" `
                --pgdata="$pgData" `
                --username=$env:INPUTS_USERNAME `
                --pwfile="$pwFile" `
                --auth="scram-sha-256" `
                --encoding="$defaultEncoding" `
                --locale="$defaultLocale" `
                --no-instructions

            # Update PostgreSQL configuration
            Add-Content -Path "$pgData\postgresql.conf" -Value "unix_socket_directories = ''"
            Add-Content -Path "$pgData\postgresql.conf" -Value "port = $($env:INPUTS_PORT)"

            # Enable SSL if required
            if ($env:INPUTS_SSL -eq "true") {
                $crtFile = "$pgData\server.crt"
                $keyFile = "$pgData\server.key"
                $msys2ArgExcl = "/CN"
                $env:MSYS2_ARG_CONV_EXCL = $msys2ArgExcl

                & openssl req -new -x509 -days 365 -nodes -text -subj "/CN=localhost" `
                    -out $crtFile -keyout $keyFile
                icacls $keyFile /inheritance:r /grant:r "SYSTEM:F"
                icacls $crtFile /inheritance:r /grant:r "SYSTEM:F"
                Add-Content -Path "$pgData\postgresql.conf" -Value "ssl = on"
            }

            # Step 6: Start PostgreSQL
            & "$pgBindir\pg_ctl.exe" start --pgdata="$pgData"

            # Step 7: Setup PostgreSQL Service Connection Parameters
            $pgServiceConf = @"
            [${env:INPUTS_USERNAME}]
            host=localhost
            port=${env:INPUTS_PORT}
            user=${env:INPUTS_USERNAME}
            password=${env:INPUTS_PASSWORD}
            dbname=${env:INPUTS_DATABASE}
            "@

            if ($env:INPUTS_SSL -eq "true") {
                $pgServiceConf += @"
            sslmode=verify-ca
            sslrootcert=$pgData\server.crt
            "@
            }

            Set-Content -Path "$pgData\pg_service.conf" -Value $pgServiceConf
            Add-Content -Path $env:GITHUB_ENV -Value "PGSERVICEFILE=$pgData\pg_service.conf"

            # Step 8: Create Database if Needed
            if ($env:INPUTS_DATABASE -ne "postgres") {
                & "$pgBindir\createdb.exe" -O $env:INPUTS_USERNAME $env:INPUTS_DATABASE
            }

            Write-Output "PostgreSQL setup and initialization complete."
          }

          $restore_job = Start-Job -ScriptBlock { 
            Get-ChildItem -Path examples -Recurse -Filter *.csproj |
              Where-Object { $_.FullName -like '*Legacy*' } |
              ForEach-Object { nuget restore $_.FullName }
            nuget restore ./LegacyEndToEndTests/LegacyEndToEndTests.csproj
            msbuild.exe ./LegacyEndToEndTests/LegacyEndToEndTests.csproj -p:Configuration=Release -p:FrameworkVersion=v4.7.2
          }

          Wait-Job -Job $mysql_job, $restore_job
          Receive-Job -Job $mysql_job
          Receive-Job -Job $restore_job
          Receive-Job -Job $postgres_job
          
      - name: Init MySQL Schema
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\MySQL\MySQL Server 8.0\bin"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, "Machine")
          mysql -u root -e "CREATE DATABASE $Env:TESTS_DB;"
          mysql -u root $Env:TESTS_DB --execute="source examples/config/mysql/schema.sql" 
      
      - name: Init PostgresSQL Schema
        shell: powershell
        run: psql -U $Env:POSTGRES_USER -h localhost -f 'examples/config/postgresql/schema.sql'
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: End-to-End Tests
        shell: powershell
        run: |
          $path = vswhere -latest -products * -requires Microsoft.VisualStudio.Workload.ManagedDesktop Microsoft.VisualStudio.Workload.Web -requiresAny -property installationPath
          $path = join-path $path 'Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
          & $path ./LegacyEndToEndTests/bin/Release/net472/LegacyEndToEndTests.dll