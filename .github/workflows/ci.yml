name: CI
defaults:
  run:
    shell: bash

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
    paths:
      - "**"
      - "!**.md"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: .NET Lint
        uses: zyactions/dotnet-lint@v1
        with:
          implicit-restore: true
          workspace: sqlc-gen-csharp.sln
          exclude: |
            GeneratedProtobuf
            MySqlConnectorExample
            NpgsqlExample
            SqliteExample
            
      - name: Verify pushed Dockerfile is synced
        run: |
          ./scripts/generate_dockerfile.sh /tmp/Dockerfile
          diff /tmp/Dockerfile Dockerfile
  
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ]
        architecture: [ 'x64', 'arm64' ]

    steps:
      - uses: actions/checkout@v4
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict
          
      - name: Setup Dotnet 
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Dotnet Build
        run: dotnet build
          
  publish:
    name: Publish WASM
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: install Wasi workload
        run: dotnet workload install wasi-experimental

      - name: Download Wasi SDK
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-22/wasi-sdk-22.0-linux.tar.gz
          tar xf wasi-sdk-22.0-linux.tar.gz
          chmod -R 755 wasi-sdk-22.0

      - name: Dotnet Wasm Publish
        shell: bash
        run: |
          set -e
          WASI_SDK_PATH="$(pwd)/wasi-sdk-22.0" dotnet publish WasmRunner -c release
          ./scripts/wasm/copy_plugin_to.sh dist

      - name: upload wasm plugin as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-file
          path: dist/plugin.wasm
          
  codegen-tests:
    name: Codegen Tests
    runs-on: ubuntu-latest
    needs: [publish]

    steps:
      - uses: actions/checkout@v4
          
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '1.25.0'

      - name: Updating plugin sha
        run: ./scripts/wasm/update_sha.sh ${SQLC_CI_FILE}

      - name: Verify pushed generated code is synced
        run: |
          ./scripts/wasm/update_sha.sh ${SQLC_CI_FILE}
          sqlc -f ${SQLC_CI_FILE} diff
          
      - name: Codegen Tests against matrix of configurations
        run: ./scripts/tests/run_codegen_matrix.sh ${SQLC_CI_FILE}
        
  end2end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [codegen-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist
          
      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '1.25.0'
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict
        
      - name: Docker compose
        uses: hoverkraft-tech/compose-action@v1.5.1
        with:
          services: |
            mysqldb
            postgresdb
            plugin-tests
          
      - name: End-to-End Tests
        run: ./scripts/tests/run_end2end.sh
