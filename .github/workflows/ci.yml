name: CI
defaults:
  run:
    shell: bash

env:
  SQLC_VERSION: 1.27.0
  WASI_SDK_VERSION: 22

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
    paths:
      - "**"
      - "!**.md"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: .NET Lint
        uses: zyactions/dotnet-lint@v1
        with:
          implicit-restore: true
          workspace: sqlc-gen-csharp.sln
          exclude: |
            GeneratedProtobuf
            examples

  build-wasm:
    name: Build (WASM)
    needs: [lint]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: install Wasi workload
        run: dotnet workload install wasi-experimental

      - name: Setup Derived Variables
        run: |
          echo "WASI_SDK_FOLDER_NAME=wasi-sdk-${{ env.WASI_SDK_VERSION }}.0" >> $GITHUB_ENV
          echo "WASI_SDK_FILENAME=wasi-sdk-${{ env.WASI_SDK_VERSION }}.0-linux.tar.gz" >> $GITHUB_ENV

      - name: Download Wasi SDK
        run: |
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{ env.WASI_SDK_VERSION }}/${{ env.WASI_SDK_FILENAME }}
          tar xf ${{ env.WASI_SDK_FILENAME }}
          chmod -R 755 ${{ env.WASI_SDK_FILENAME }}

      - name: Dotnet Wasm Publish
        shell: bash
        run: |
          set -e
          WASI_SDK_PATH="$(pwd)/${{ env.WASI_SDK_FOLDER_NAME }}" dotnet publish WasmRunner -c release
          ./scripts/wasm/copy_plugin_to.sh dist

      - name: upload wasm plugin as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-file
          path: dist/plugin.wasm
          
  codegen-tests:
     name: Codegen Tests
     runs-on: ubuntu-latest
     needs: [build-wasm]

     steps:
       - uses: actions/checkout@v4

       - uses: actions/download-artifact@v4
         with:
           name: wasm-file
           path: dist

       - name: Load .env file
         uses: xom9ikk/dotenv@v2.3.0
         with:
           load-mode: strict

       - uses: sqlc-dev/setup-sqlc@v4
         with:
           sqlc-version: '${{ env.SQLC_VERSION }}'

       - name: Updating plugin sha
         run: ./scripts/wasm/update_sha.sh sqlc.ci.yaml

       - name: Verify pushed generated code is synced
         run: |
           ./scripts/wasm/update_sha.sh sqlc.ci.yaml
           sqlc -f sqlc.ci.yaml diff
     
  end2end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [codegen-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist

      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '${{ env.SQLC_VERSION }}'

      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Docker compose
        uses: hoverkraft-tech/compose-action@v1.5.1

      - name: End-to-End Tests
        run: ./scripts/run_end2end_tests.sh
        
  legacy-end2end-tests: 
    # As this can run only on Windows machines, these tests should run only in CI
    name: End-to-End Tests (Legacy)
    runs-on: windows-latest
    needs: [codegen-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wasm-file
          path: dist
          
      - uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: '${{ env.SQLC_VERSION }}'
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict
      
      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install & Start MySQL
        shell: powershell
        run: choco install mysql --no-progress --version=8.0.31 -y --params "/serviceName:MySQL"
          
      - name: Init MySQL Schema
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\MySQL\MySQL Server 8.0\bin"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, "Machine")
          mysql -u root -e "CREATE DATABASE tests;"
          mysql -u root tests --execute="source examples/config/mysql/schema.sql"    

      - name: Install & Start PostgreSQL
        shell: powershell
        run: choco install postgresql17 --no-progress --version=17.2.0 -y --params "/Password:pass" --params-global
      
      - name: Init PostgresSQL Schema
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\PostgreSQL\17\bin"
          $env:PGPASSWORD = "pass"
          psql -U postgres -c "CREATE DATABASE tests;"
          psql -U postgres -d tests -f "examples/config/postgresql/schema.sql"
      
      - name: Setup Visual Studio for .NET Framework
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: 'latest'
          
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.1
      
      - name: Restore test projects
        shell: powershell
        run: |
          Get-ChildItem -Path examples -Recurse -Filter *.csproj |
            Where-Object { $_.FullName -like '*Legacy*' } |
            ForEach-Object { nuget restore $_.FullName }
          nuget restore ./LegacyEndToEndTests/LegacyEndToEndTests.csproj

      - name: Build .NET Framework Test Project
        run: msbuild.exe ./LegacyEndToEndTests/LegacyEndToEndTests.csproj -p:Configuration=Release -p:FrameworkVersion=v4.7.2

      - name: End-to-End Tests
        shell: powershell
        run: |
          $path = vswhere -latest -products * -requires Microsoft.VisualStudio.Workload.ManagedDesktop Microsoft.VisualStudio.Workload.Web -requiresAny -property installationPath
          $path = join-path $path 'Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
          & $path ./LegacyEndToEndTests/bin/Release/net472/LegacyEndToEndTests.dll