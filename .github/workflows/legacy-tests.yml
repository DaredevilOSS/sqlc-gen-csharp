name: .Net Framework Tests (Legacy)
defaults:
  run:
    shell: bash

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
    paths:
      - "**"
      - "!**.md"

jobs:
  # As this can run only on Windows machines, these tests should run only in CI
  end2end-tests: 
    name: End-to-End Tests
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
          
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          load-mode: strict

      - name: Setup Visual Studio for .NET Framework
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: 'latest'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2.0.1
        
      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      # - uses: ikalnytskyi/action-setup-postgres@v7
      #   with:
      #     username: ${{ env.POSTGRES_USER }}
      #     password: ${{ env.POSTGRES_PASSWORD }}
      #     database: ${{ env.TESTS_DB }}
      #     postgres-version: "16"
      #   id: postgres
        
      # - name: Init PostgresSQL Schema
      #   shell: powershell
      #   run: psql -U $Env:POSTGRES_USER -f 'examples/config/postgresql/schema.sql'
      #   env:
      #     PGSERVICE: ${{ steps.postgres.outputs.service-name }}
      #     PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          
      - name: Install MySQL and restore test projects in parallel
        shell: pwsh
        run: |
          $mysqlJob = Start-Job -ScriptBlock { 
            choco install mysql --no-progress --version=8.0.31 -y --params "/serviceName:MySQL" 
            return $LASTEXITCODE
          }

          $PostgresJob = Start-Job -ScriptBlock {
            # Parameters
            param(
                [string]$Username = "postgres",
                [string]$Password = "postgres",
                [string]$Database = "postgres",
                [int]$Port = 5432,
                [string]$PostgresVersion = "17"
            )

            # Install PostgreSQL
            Write-Host "Installing PostgreSQL version $PostgresVersion..."
            choco install postgresql$PostgresVersion `
                --params "/Password:$Password" `
                --ia "--enable-components server,commandlinetools --extract-only 1" `
                --no-progress -y

            $PostgresPath = "$env:ProgramFiles\PostgreSQL\$PostgresVersion"
            $PgData = "$env:TEMP\pgdata"

            # Initialize database
            Write-Host "Initializing PostgreSQL cluster..."
            New-Item -ItemType Directory -Force -Path $PgData | Out-Null
            $InitDbCommand = "$PostgresPath\bin\initdb.exe"
            & $InitDbCommand `
                --pgdata="$PgData" `
                --username="$Username" `
                --pwfile="$PgData\pwfile" `
                --auth="scram-sha-256" `
                --encoding="UTF-8" `
                --locale="English_United States.1252" | Out-Null

            # Configure PostgreSQL
            Write-Host "Configuring PostgreSQL..."
            Add-Content "$PgData\postgresql.conf" "port = $Port"
            Add-Content "$PgData\postgresql.conf" "unix_socket_directories = ''"

            # Start PostgreSQL
            Write-Host "Starting PostgreSQL..."
            $PgCtlCommand = "$PostgresPath\bin\pg_ctl.exe"
            & $PgCtlCommand start --pgdata="$PgData" | Out-Null

            # Create database
            Write-Host "Creating database $Database..."
            if ($Database -ne "postgres") {
                $CreatedbCommand = "$PostgresPath\bin\createdb.exe"
                & $CreatedbCommand -U "$Username" "$Database" | Out-Null
            }

            Write-Host "PostgreSQL setup complete."
            Write-Host "Connection String: postgresql://$Username:$Password@localhost:$Port/$Database"

            # choco install postgresql16 -y --no-progress --version 16.0.0 `
            #   --install-arguments "--enable-components server,commandlinetools" `
            #   --package-parameters "/Password:pass" `
            #   --params-global

            # $env:Path += ";C:\Program Files\PostgreSQL\16\bin"
            # $env:PGPASSWORD = "pass"

            # psql -U postgres -c "CREATE DATABASE tests;"
            # psql -U postgres -d tests -f "examples/config/postgresql/schema.sql"
            return $LASTEXITCODE
          }
          
          $restoreJob = Start-Job -ScriptBlock { 
            Get-ChildItem -Path examples -Recurse -Filter *.csproj |
              Where-Object { $_.FullName -like '*Legacy*' } |
              ForEach-Object { nuget restore $_.FullName }
            nuget restore ./EndToEndCommon/EndToEndCommon.csproj
            nuget restore ./LegacyEndToEndTests/LegacyEndToEndTests.csproj
            msbuild.exe ./LegacyEndToEndTests/LegacyEndToEndTests.csproj -p:Configuration=Release -p:FrameworkVersion=v4.7.2
            return $LASTEXITCODE
          }

          Wait-Job -Job $mysqlJob, $PostgresJob, $restoreJob

          $mysqlOutput = Receive-Job -Job $mysqlJob
          $mysqlExitCode = @($mysqlOutput)[-1]
          if ($mysqlExitCode -ne 0) {
            Write-Error "MySQL install failed with exit code: $mysqlExitCode"
            return $mysqlExitCode
          }
          
          $postgresOutput = Receive-Job -Job $PostgresJob
          $postgressExitCode = @($postgresOutput)[-1]
          if ($postgressExitCode -ne 0) {
            Write-Error "Postgres install failed with exit code: $postgressExitCode"
            return $postgressExitCode
          }

          $restoreOutput = Receive-Job -Job $restoreJob
          $restoreExitCode = @($restoreOutput)[-1]
          if ($restoreExitCode -ne 0) {
            Write-Error "Restore/build failed with exit code: $restoreExitCode"
            return $restoreExitCode
          }
          
      - name: Init MySQL Schema
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\MySQL\MySQL Server 8.0\bin"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, "Machine")
          mysql -u root -e "CREATE DATABASE $Env:TESTS_DB;"
          mysql -u root $Env:TESTS_DB --execute="source examples/config/mysql/schema.sql"    

      - name: Run Tests
        shell: powershell
        run: |
          $path = vswhere -latest -products * -requires Microsoft.VisualStudio.Workload.ManagedDesktop Microsoft.VisualStudio.Workload.Web -requiresAny -property installationPath
          $path = join-path $path 'Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
          & $path ./LegacyEndToEndTests/bin/Release/net472/LegacyEndToEndTests.dll