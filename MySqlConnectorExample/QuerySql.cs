// auto-generated by sqlc - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
namespace MySqlConnectorExample
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using MySqlConnector;

    public class QuerySql
    {
        public QuerySql(string connectionString)
        {
            this.connectionString = connectionString;
        }

        private string connectionString { get; }

        private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE  id  =  @id  LIMIT  1  ";  
        public class GetAuthorRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public class GetAuthorArgs
        {
            public long Id { get; set; }
        };
        public async Task<GetAuthorRow> GetAuthor(GetAuthorArgs args)
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(GetAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new GetAuthorRow
                                {
                                    Id = reader.GetInt64(0),
                                    Name = reader.GetString(1),
                                    Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }

        private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
        public class ListAuthorsRow
        {
            public long Id { get; set; }
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<List<ListAuthorsRow>> ListAuthors()
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(ListAuthorsSql, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var result = new List<ListAuthorsRow>();
                            while (await reader.ReadAsync())
                            {
                                result.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2) });
                            }

                            return result;
                        }
                    }
                }
            }
        }

        private const string CreateAuthorSql = "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) "; 
        public class CreateAuthorArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task CreateAuthor(CreateAuthorArgs args)
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(CreateAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string UpdateAuthorSql = "UPDATE authors  SET  bio  =  @bio  WHERE  id  =  @id  ";  
        public class UpdateAuthorArgs
        {
            public string Bio { get; set; }
            public long Id { get; set; }
        };
        public async Task UpdateAuthor(UpdateAuthorArgs args)
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(UpdateAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        command.Parameters.AddWithValue("@id", args.Id);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string CreateAuthorReturnIdSql = "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) "; 
        public class CreateAuthorReturnIdArgs
        {
            public string Name { get; set; }
            public string Bio { get; set; }
        };
        public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(CreateAuthorReturnIdSql, connection))
                    {
                        command.Parameters.AddWithValue("@name", args.Name);
                        command.Parameters.AddWithValue("@bio", args.Bio);
                        await command.ExecuteNonQueryAsync();
                        return command.LastInsertedId;
                    }
                }
            }
        }

        private const string DeleteAuthorSql = "DELETE FROM authors WHERE  id  =  @id  ";  
        public class DeleteAuthorArgs
        {
            public long Id { get; set; }
        };
        public async Task DeleteAuthor(DeleteAuthorArgs args)
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(DeleteAuthorSql, connection))
                    {
                        command.Parameters.AddWithValue("@id", args.Id);
                        await command.ExecuteScalarAsync();
                    }
                }
            }
        }

        private const string TestSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM node_mysql_types LIMIT  1  ";  
        public class TestRow
        {
            public byte[] C_bit { get; set; }
            public int? C_tinyint { get; set; }
            public int? C_bool { get; set; }
            public int? C_boolean { get; set; }
            public int? C_smallint { get; set; }
            public int? C_mediumint { get; set; }
            public int? C_int { get; set; }
            public int? C_integer { get; set; }
            public long? C_bigint { get; set; }
            public long C_serial { get; set; }
            public string C_decimal { get; set; }
            public string C_dec { get; set; }
            public string C_numeric { get; set; }
            public string C_fixed { get; set; }
            public double? C_float { get; set; }
            public double? C_double { get; set; }
            public double? C_double_precision { get; set; }
            public string C_date { get; set; }
            public string C_time { get; set; }
            public string C_datetime { get; set; }
            public string C_timestamp { get; set; }
            public int? C_year { get; set; }
            public string C_char { get; set; }
            public string C_nchar { get; set; }
            public string C_national_char { get; set; }
            public string C_varchar { get; set; }
            public byte[] C_binary { get; set; }
            public byte[] C_varbinary { get; set; }
            public byte[] C_tinyblob { get; set; }
            public string C_tinytext { get; set; }
            public byte[] C_blob { get; set; }
            public string C_text { get; set; }
            public byte[] C_mediumblob { get; set; }
            public string C_mediumtext { get; set; }
            public byte[] C_longblob { get; set; }
            public string C_longtext { get; set; }
            public object C_json { get; set; }
        };
        public async Task<TestRow> Test()
        {
            {
                using (var connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new MySqlCommand(TestSql, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                return new TestRow
                                {
                                    C_bit = reader.IsDBNull(0) ? null : Utils.GetBytes(reader, 0),
                                    C_tinyint = reader.IsDBNull(1) ? (int? )null : reader.GetInt32(1),
                                    C_bool = reader.IsDBNull(2) ? (int? )null : reader.GetInt32(2),
                                    C_boolean = reader.IsDBNull(3) ? (int? )null : reader.GetInt32(3),
                                    C_smallint = reader.IsDBNull(4) ? (int? )null : reader.GetInt32(4),
                                    C_mediumint = reader.IsDBNull(5) ? (int? )null : reader.GetInt32(5),
                                    C_int = reader.IsDBNull(6) ? (int? )null : reader.GetInt32(6),
                                    C_integer = reader.IsDBNull(7) ? (int? )null : reader.GetInt32(7),
                                    C_bigint = reader.IsDBNull(8) ? (long? )null : reader.GetInt64(8),
                                    C_serial = reader.GetInt64(9),
                                    C_decimal = reader.IsDBNull(10) ? string.Empty : reader.GetString(10),
                                    C_dec = reader.IsDBNull(11) ? string.Empty : reader.GetString(11),
                                    C_numeric = reader.IsDBNull(12) ? string.Empty : reader.GetString(12),
                                    C_fixed = reader.IsDBNull(13) ? string.Empty : reader.GetString(13),
                                    C_float = reader.IsDBNull(14) ? (double? )null : reader.GetDouble(14),
                                    C_double = reader.IsDBNull(15) ? (double? )null : reader.GetDouble(15),
                                    C_double_precision = reader.IsDBNull(16) ? (double? )null : reader.GetDouble(16),
                                    C_date = reader.IsDBNull(17) ? string.Empty : reader.GetString(17),
                                    C_time = reader.IsDBNull(18) ? string.Empty : reader.GetString(18),
                                    C_datetime = reader.IsDBNull(19) ? string.Empty : reader.GetString(19),
                                    C_timestamp = reader.IsDBNull(20) ? string.Empty : reader.GetString(20),
                                    C_year = reader.IsDBNull(21) ? (int? )null : reader.GetInt32(21),
                                    C_char = reader.IsDBNull(22) ? string.Empty : reader.GetString(22),
                                    C_nchar = reader.IsDBNull(23) ? string.Empty : reader.GetString(23),
                                    C_national_char = reader.IsDBNull(24) ? string.Empty : reader.GetString(24),
                                    C_varchar = reader.IsDBNull(25) ? string.Empty : reader.GetString(25),
                                    C_binary = reader.IsDBNull(26) ? null : Utils.GetBytes(reader, 26),
                                    C_varbinary = reader.IsDBNull(27) ? null : Utils.GetBytes(reader, 27),
                                    C_tinyblob = reader.IsDBNull(28) ? null : Utils.GetBytes(reader, 28),
                                    C_tinytext = reader.IsDBNull(29) ? string.Empty : reader.GetString(29),
                                    C_blob = reader.IsDBNull(30) ? null : Utils.GetBytes(reader, 30),
                                    C_text = reader.IsDBNull(31) ? string.Empty : reader.GetString(31),
                                    C_mediumblob = reader.IsDBNull(32) ? null : Utils.GetBytes(reader, 32),
                                    C_mediumtext = reader.IsDBNull(33) ? string.Empty : reader.GetString(33),
                                    C_longblob = reader.IsDBNull(34) ? null : Utils.GetBytes(reader, 34),
                                    C_longtext = reader.IsDBNull(35) ? string.Empty : reader.GetString(35),
                                    C_json = reader.IsDBNull(36) ? null : reader.GetString(36)
                                };
                            }
                        }
                    }
                }

                return null;
            }
        }
    }
}