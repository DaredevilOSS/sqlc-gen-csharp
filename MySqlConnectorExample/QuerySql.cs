// auto-generated by sqlc at 08/05/2024 1:05 - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;

namespace MySqlConnectorExample;
public class QuerySql(string connectionString)
{
    private const string GetAuthorSql = "SELECT id, name, bio FROM authors WHERE  id  =  @id  LIMIT  1  ";  
    public class GetAuthorRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public required string Bio { get; init; }
    };
    public class GetAuthorArgs
    {
        public required long Id { get; init; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(GetAuthorSql, connection);
        command.Parameters.AddWithValue("@id", args.Id);
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
            return new GetAuthorRow
            {
                Id = reader.GetInt64(0),
                Name = reader.GetString(1),
                Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2)
            };
        return null;
    }

    private const string ListAuthorsSql = "SELECT id, name, bio FROM authors ORDER  BY  name  ";  
    public class ListAuthorsRow
    {
        public required long Id { get; init; }
        public required string Name { get; init; }
        public required string Bio { get; init; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(ListAuthorsSql, connection);
        await using var reader = await command.ExecuteReaderAsync();
        var rows = new List<ListAuthorsRow>();
        while (await reader.ReadAsync())
        {
            rows.Add(new ListAuthorsRow { Id = reader.GetInt64(0), Name = reader.GetString(1), Bio = reader.IsDBNull(2) ? string.Empty : reader.GetString(2) });
        }

        return rows;
    }

    private const string CreateAuthorSql = "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) "; 
    public class CreateAuthorArgs
    {
        public required string Name { get; init; }
        public required string Bio { get; init; }
    };
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(CreateAuthorSql, connection);
        command.Parameters.AddWithValue("@name", args.Name);
        command.Parameters.AddWithValue("@bio", args.Bio);
        await command.ExecuteScalarAsync();
    }

    private const string UpdateAuthorSql = "UPDATE authors  SET  bio  =  @bio  WHERE  id  =  @id  ";  
    public class UpdateAuthorArgs
    {
        public required string Bio { get; init; }
        public required long Id { get; init; }
    };
    public async Task UpdateAuthor(UpdateAuthorArgs args)
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(UpdateAuthorSql, connection);
        command.Parameters.AddWithValue("@bio", args.Bio);
        command.Parameters.AddWithValue("@id", args.Id);
        await command.ExecuteScalarAsync();
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) "; 
    public class CreateAuthorReturnIdArgs
    {
        public required string Name { get; init; }
        public required string Bio { get; init; }
    };
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(CreateAuthorReturnIdSql, connection);
        command.Parameters.AddWithValue("@name", args.Name);
        command.Parameters.AddWithValue("@bio", args.Bio);
        await command.ExecuteNonQueryAsync();
        return command.LastInsertedId;
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE  id  =  @id  ";  
    public class DeleteAuthorArgs
    {
        public required long Id { get; init; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(DeleteAuthorSql, connection);
        command.Parameters.AddWithValue("@id", args.Id);
        await command.ExecuteScalarAsync();
    }

    private const string TestSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM node_mysql_types LIMIT  1  ";  
    public class TestRow
    {
        public required byte[]? C_bit { get; init; }
        public required int? C_tinyint { get; init; }
        public required int? C_bool { get; init; }
        public required int? C_boolean { get; init; }
        public required int? C_smallint { get; init; }
        public required int? C_mediumint { get; init; }
        public required int? C_int { get; init; }
        public required int? C_integer { get; init; }
        public required long? C_bigint { get; init; }
        public required long C_serial { get; init; }
        public required string C_decimal { get; init; }
        public required string C_dec { get; init; }
        public required string C_numeric { get; init; }
        public required string C_fixed { get; init; }
        public required double? C_float { get; init; }
        public required double? C_double { get; init; }
        public required double? C_double_precision { get; init; }
        public required string C_date { get; init; }
        public required string C_time { get; init; }
        public required string C_datetime { get; init; }
        public required string C_timestamp { get; init; }
        public required int? C_year { get; init; }
        public required string C_char { get; init; }
        public required string C_nchar { get; init; }
        public required string C_national_char { get; init; }
        public required string C_varchar { get; init; }
        public required byte[]? C_binary { get; init; }
        public required byte[]? C_varbinary { get; init; }
        public required byte[]? C_tinyblob { get; init; }
        public required string C_tinytext { get; init; }
        public required byte[]? C_blob { get; init; }
        public required string C_text { get; init; }
        public required byte[]? C_mediumblob { get; init; }
        public required string C_mediumtext { get; init; }
        public required byte[]? C_longblob { get; init; }
        public required string C_longtext { get; init; }
        public required object? C_json { get; init; }
    };
    public async Task<TestRow?> Test()
    {
        await using var connection = new MySqlConnection(connectionString);
        connection.Open();
        await using var command = new MySqlCommand(TestSql, connection);
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
            return new TestRow
            {
                C_bit = reader.IsDBNull(0) ? null : Utils.GetBytes(reader, 0),
                C_tinyint = reader.IsDBNull(1) ? null : reader.GetInt32(1),
                C_bool = reader.IsDBNull(2) ? null : reader.GetInt32(2),
                C_boolean = reader.IsDBNull(3) ? null : reader.GetInt32(3),
                C_smallint = reader.IsDBNull(4) ? null : reader.GetInt32(4),
                C_mediumint = reader.IsDBNull(5) ? null : reader.GetInt32(5),
                C_int = reader.IsDBNull(6) ? null : reader.GetInt32(6),
                C_integer = reader.IsDBNull(7) ? null : reader.GetInt32(7),
                C_bigint = reader.IsDBNull(8) ? null : reader.GetInt64(8),
                C_serial = reader.GetInt64(9),
                C_decimal = reader.IsDBNull(10) ? string.Empty : reader.GetString(10),
                C_dec = reader.IsDBNull(11) ? string.Empty : reader.GetString(11),
                C_numeric = reader.IsDBNull(12) ? string.Empty : reader.GetString(12),
                C_fixed = reader.IsDBNull(13) ? string.Empty : reader.GetString(13),
                C_float = reader.IsDBNull(14) ? null : reader.GetDouble(14),
                C_double = reader.IsDBNull(15) ? null : reader.GetDouble(15),
                C_double_precision = reader.IsDBNull(16) ? null : reader.GetDouble(16),
                C_date = reader.IsDBNull(17) ? string.Empty : reader.GetString(17),
                C_time = reader.IsDBNull(18) ? string.Empty : reader.GetString(18),
                C_datetime = reader.IsDBNull(19) ? string.Empty : reader.GetString(19),
                C_timestamp = reader.IsDBNull(20) ? string.Empty : reader.GetString(20),
                C_year = reader.IsDBNull(21) ? null : reader.GetInt32(21),
                C_char = reader.IsDBNull(22) ? string.Empty : reader.GetString(22),
                C_nchar = reader.IsDBNull(23) ? string.Empty : reader.GetString(23),
                C_national_char = reader.IsDBNull(24) ? string.Empty : reader.GetString(24),
                C_varchar = reader.IsDBNull(25) ? string.Empty : reader.GetString(25),
                C_binary = reader.IsDBNull(26) ? null : Utils.GetBytes(reader, 26),
                C_varbinary = reader.IsDBNull(27) ? null : Utils.GetBytes(reader, 27),
                C_tinyblob = reader.IsDBNull(28) ? null : Utils.GetBytes(reader, 28),
                C_tinytext = reader.IsDBNull(29) ? string.Empty : reader.GetString(29),
                C_blob = reader.IsDBNull(30) ? null : Utils.GetBytes(reader, 30),
                C_text = reader.IsDBNull(31) ? string.Empty : reader.GetString(31),
                C_mediumblob = reader.IsDBNull(32) ? null : Utils.GetBytes(reader, 32),
                C_mediumtext = reader.IsDBNull(33) ? string.Empty : reader.GetString(33),
                C_longblob = reader.IsDBNull(34) ? null : Utils.GetBytes(reader, 34),
                C_longtext = reader.IsDBNull(35) ? string.Empty : reader.GetString(35),
                C_json = reader.IsDBNull(36) ? null : reader.GetString(36)
            };
        return null;
    }
}