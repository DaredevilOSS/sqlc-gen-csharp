using Microsoft.CodeAnalysis.CSharp.Syntax;
using SqlcGenCsharp.Drivers;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using System;
using Microsoft.CodeAnalysis;
using File = Plugin.File;


namespace SqlcGenCsharp.Generators;

public static class UtilsGenerator
{
    private const string ClassName = "Utils";
    
    public static File GenerateFile(string namespaceName)
    {
        var namespaceDeclaration = FileScopedNamespaceDeclaration(IdentifierName(namespaceName));
        var classDeclaration = GetUtilsClass();
        var root = CompilationUnit()
            .AddUsings(GetUsingDirectives())
            .AddMembers(namespaceDeclaration, classDeclaration)
            .AddCommentOnTop($"// auto-generated by sqlc at {DateTime.Now:g} - do not edit")
            .NormalizeWhitespace();

        return new File
        {
            Name = $"Utils.cs",
            Contents = root.ToByteString()
        };
    }

    private static UsingDirectiveSyntax[] GetUsingDirectives()
    {
        return
        [
            UsingDirective(ParseName("System")),
            UsingDirective(ParseName("System.Data"))
        ];
    }
    private static MemberDeclarationSyntax GetUtilsClass()
    {
        // TODO move to RESOURCES file
        // TODO fix function is nested within another block unnecessarily
        const string utilsClass = """
                                  public static class Utils
                                  {                                                            
                                      public static byte[] GetBytes(IDataRecord reader, int ordinal)
                                      {
                                          const int bufferSize = 100000;
                                          ArgumentNullException.ThrowIfNull(reader);
                                          var buffer = new byte[bufferSize];
                                          
                                          var (bytesRead, offset) = (0, 0);
                                          while (bytesRead < bufferSize)
                                          {
                                              var read = (int) reader.GetBytes(
                                                  ordinal,
                                                  bufferSize + bytesRead,
                                                  buffer,
                                                  offset,
                                                  bufferSize - bytesRead);
                                              if (read == 0)
                                                  break;
                                              bytesRead += read;
                                              offset += read;
                                          }
                                      
                                          if (bytesRead < bufferSize)
                                              Array.Resize(ref buffer, bytesRead);
                                          return buffer;
                                      }
                                  }
                                  """;
        ;
        return ParseMemberDeclaration(utilsClass)!.AppendNewLine();
    }
}