using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Plugin;
using SqlcGenCsharp.Drivers;
using System;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;


namespace SqlcGenCsharp.Generators;

internal class QueriesGen(DbDriver dbDriver, string namespaceName)
{
    private static readonly string[] ResharperDisables =
    [
        "UnusedAutoPropertyAccessor.Global",
        "NotAccessedPositionalProperty.Global",
        "ConvertToUsingDeclaration",
        "UseAwaitUsing",
        "UseObjectOrCollectionInitializer"
    ];

    private RootGen RootGen { get; } = new(dbDriver.Options);

    private DataClassesGen DataClassesGen { get; } = new(dbDriver);

    public File GenerateFile(IEnumerable<Query> queries, string className)
    {
        var (usingDirectives, classDeclaration) = GenerateClass(queries, className);
        var root = RootGen.CompilationRootGen(
            IdentifierName(namespaceName), usingDirectives.ToArray(), [classDeclaration]);
        root = AddResharperDisables(root);
        root = root.AddCommentOnTop(Consts.AutoGeneratedComment);

        return new File
        {
            Name = $"{className}.cs",
            Contents = root.ToByteString()
        };
    }

    private static CompilationUnitSyntax AddResharperDisables(CompilationUnitSyntax compilationUnit)
    {
        return ResharperDisables
            .Aggregate(compilationUnit, (current, resharperDisable) =>
                current.AddCommentOnTop($"// ReSharper disable {resharperDisable}"));
    }

    private (IList<UsingDirectiveSyntax>, MemberDeclarationSyntax) GenerateClass(IEnumerable<Query> queries,
        string className)
    {
        var usingDirectives = dbDriver.GetUsingDirectives();
        var classMembers = queries.SelectMany(GetMembersForSingleQuery);
        if (dbDriver.Options.DriverName == DriverName.Npgsql && dbDriver.Options.UseDapper)
            classMembers = classMembers.Concat(GetPostgresConstMembers());
        return (usingDirectives, GetClassDeclaration(className, classMembers));
    }

    private IEnumerable<MemberDeclarationSyntax> GetPostgresConstMembers()
    {
        var optionalDotnetCoreSuffex = dbDriver.Options.DotnetFramework != DotnetFramework.DotnetStandard20 ? " where T : notnull" : string.Empty;
        var optionalDotnetCoreNullable = dbDriver.Options.DotnetFramework != DotnetFramework.DotnetStandard20 ? "?" : string.Empty;
        var genericMapperClass = $$"""
        public class NpgsqlTypeHandler<T> : SqlMapper.TypeHandler<T>{{optionalDotnetCoreSuffex}}
            {
                public override T Parse(object value)
                {
                    return (T)value;
                }
                
                public override void SetValue(IDbDataParameter parameter, T{{optionalDotnetCoreNullable}} value)
                {
                    parameter.Value = value;
                }

            }
        """;
        var genericMapper = $$"""
        private void RegisterNpgsqlTypeHandler<T>(){{optionalDotnetCoreSuffex}}
        {
            SqlMapper.AddTypeHandler(typeof(T), new NpgsqlTypeHandler<T>());
        }
        """;
        var mapperConfiguration = $$"""
        private void ConfigureSqlMapper()
        {
            RegisterNpgsqlTypeHandler<NpgsqlPoint>();
            RegisterNpgsqlTypeHandler<NpgsqlLine>();
            RegisterNpgsqlTypeHandler<NpgsqlLSeg>();
            RegisterNpgsqlTypeHandler<NpgsqlBox>();
            RegisterNpgsqlTypeHandler<NpgsqlPath>();
            RegisterNpgsqlTypeHandler<NpgsqlPolygon>();
            RegisterNpgsqlTypeHandler<NpgsqlCircle>();
        }
        """;
        return new List<MemberDeclarationSyntax>()
            .Append(ParseMemberDeclaration(mapperConfiguration)!)
            .Append(ParseMemberDeclaration(genericMapperClass)!)
            .Append(ParseMemberDeclaration(genericMapper)!);
    }

    private ClassDeclarationSyntax GetClassDeclaration(string className,
        IEnumerable<MemberDeclarationSyntax> classMembers)
    {
        var optionalDapperConfig = dbDriver.Options.UseDapper
            ? Environment.NewLine + "        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;"
            : "";

        var optionalPostgresconfigurationCall = dbDriver.Options.DriverName == DriverName.Npgsql && dbDriver.Options.UseDapper
            ? Environment.NewLine + "        ConfigureSqlMapper();"
            : "";
        var classDeclaration = (ClassDeclarationSyntax)ParseMemberDeclaration(
                $$"""
                  class {{className}}
                  {
                      public {{className}}(string {{Variable.ConnectionString.AsVarName()}})
                      {
                          this.{{Variable.ConnectionString.AsPropertyName()}} = {{Variable.ConnectionString.AsVarName()}};{{optionalDapperConfig}}{{optionalPostgresconfigurationCall}}
                      }
                      private string {{Variable.ConnectionString.AsPropertyName()}} { get; }
                  }
                  """)!
            .AddModifiers(Token(SyntaxKind.PublicKeyword));

        return classDeclaration.AddMembers(classMembers.ToArray());
    }

    private IEnumerable<MemberDeclarationSyntax> GetMembersForSingleQuery(Query query)
    {
        return new List<MemberDeclarationSyntax>()
            .AppendIfNotNull(GetQueryTextConstant(query))
            .AppendIfNotNull(GetQueryColumnsDataclass(query))
            .AppendIfNotNull(GetQueryParamsDataclass(query))
            .Append(AddMethodDeclaration(query));
    }

    private MemberDeclarationSyntax? GetQueryColumnsDataclass(Query query)
    {
        if (query.Columns.Count <= 0) return null;
        return DataClassesGen.Generate(query.Name, ClassMember.Row, query.Columns, dbDriver.Options);
    }

    private MemberDeclarationSyntax? GetQueryParamsDataclass(Query query)
    {
        if (query.Params.Count <= 0) return null;
        var columns = query.Params.Select(dbDriver.GetColumnFromParam).ToList();
        return DataClassesGen.Generate(query.Name, ClassMember.Args, columns, dbDriver.Options);
    }

    private MemberDeclarationSyntax? GetQueryTextConstant(Query query)
    {
        var transformQueryText = dbDriver.TransformQueryText(query);
        if (transformQueryText == string.Empty)
            return null;
        return ParseMemberDeclaration(
                $"""
                 private const string {ClassMember.Sql.Name(query.Name)} = "{transformQueryText}";
                 """)!
            .AppendNewLine();
    }

    private MemberDeclarationSyntax AddMethodDeclaration(Query query)
    {
        var queryTextConstant = ClassMember.Sql.Name(query.Name);
        var argInterface = ClassMember.Args.Name(query.Name);
        var returnInterface = ClassMember.Row.Name(query.Name);

        return query.Cmd switch
        {
            ":exec" => ((IExec)dbDriver).ExecDeclare(queryTextConstant, argInterface, query),
            ":one" => ((IOne)dbDriver).OneDeclare(queryTextConstant, argInterface, returnInterface, query),
            ":many" => ((IMany)dbDriver).ManyDeclare(queryTextConstant, argInterface, returnInterface, query),
            ":execrows" => ((IExecRows)dbDriver).ExecRowsDeclare(queryTextConstant, argInterface, query),
            ":execlastid" => ((IExecLastId)dbDriver).ExecLastIdDeclare(queryTextConstant, argInterface, query),
            ":copyfrom" => ((ICopyFrom)dbDriver).CopyFromDeclare(queryTextConstant, argInterface, query),
            _ => throw new NotSupportedException($"{query.Cmd} is not supported")
        };
    }
}