using Microsoft.CodeAnalysis.CSharp.Syntax;
using SqlcGenCsharp.Drivers;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using File = Plugin.File;

namespace SqlcGenCsharp.Generators;

internal class UtilsGen(DbDriver dbDriver, string namespaceName)
{
    private const string ClassName = "Utils";

    private string NamespaceName { get; } = namespaceName;

    private RootGen RootGen { get; } = new(dbDriver.Options);

    public File? GenerateFile()
    {
        var classImpl = GetClass();
        if (classImpl == null)
            return null;

        var root = RootGen.CompilationRootGen(
            IdentifierName(NamespaceName), dbDriver.GetUsingDirectivesForUtils(), [classImpl]);
        root = root.AddCommentOnTop(Consts.AutoGeneratedComment);

        return new File
        {
            Name = $"{ClassName}.cs",
            Contents = root.ToByteString()
        };
    }

    private ClassDeclarationSyntax? GetClass()
    {
        var classMembers = dbDriver.GetMemberDeclarationsForUtils();
        if (classMembers.Length == 0)
            return null;

        var classDeclaration = (ClassDeclarationSyntax)ParseMemberDeclaration(
            $$"""public static class {{ClassName}} { }""")!;
        return classDeclaration.AddMembers(classMembers);
    }
}