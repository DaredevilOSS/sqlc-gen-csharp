using Google.Protobuf;
using System;
using File = Plugin.File;


namespace SqlcGenCsharp.Generators;

internal class CsprojGen(string projectName, string namespaceName, Options options)
{
    public File GenerateFile()
    {
        var csprojContents = GetFileContents();
        return new File
        {
            Name = $"{projectName}.csproj",
            Contents = ByteString.CopyFromUtf8(csprojContents)
        };
    }

    private string GetFileContents()
    {
        var nullableProperty = options.DotnetFramework.LatestDotnetSupported() ? "<Nullable>enable</Nullable>" : "";
        // TODO: extract version to user input
        var additionalProperty = options.useDapper
            ? "\n        <PackageReference Include=\"Dapper\" Version=\"2.0.123\"/>"
            : "";


        return $"""
                <!--{Consts.AutoGeneratedComment}-->
                <!--Run the following to add the project to the solution:
                   dotnet sln add {projectName}/{projectName}.csproj
                  -->
                <Project Sdk="Microsoft.NET.Sdk">
                
                    <PropertyGroup>
                        <TargetFramework>{options.DotnetFramework.ToName()}</TargetFramework>
                        <RootNamespace>{namespaceName}</RootNamespace>
                        <OutputType>Library</OutputType>
                        {nullableProperty}
                    </PropertyGroup>
                
                    <ItemGroup>
                        <PackageReference Include="{options.DriverName.ToName()}" Version="{GetPackageVersion(options.DriverName)}"/>{additionalProperty}
                    </ItemGroup>

                </Project>
                """;
    }

    private static string GetPackageVersion(DriverName driverName)
    {
        return driverName switch
        {
            DriverName.Npgsql => "8.0.3",
            DriverName.MySqlConnector => "2.3.6",
            DriverName.Sqlite => "8.0.10",
            _ => throw new NotSupportedException($"unsupported driver: {driverName}")
        };
    }
}