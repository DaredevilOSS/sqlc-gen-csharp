using Microsoft.CodeAnalysis.CSharp.Syntax;
using Plugin;
using SqlcGenCsharp.Drivers;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;


namespace SqlcGenCsharp.Generators;

internal class ModelsGen(DbDriver dbDriver, string namespaceName)
{
    private const string ClassName = "Models";

    private RootGen RootGen { get; } = new(dbDriver.Options);

    private DataClassesGen DataClassesGen { get; } = new(dbDriver);


    private EnumsGen EnumsGen { get; } = new(dbDriver);

    public File GenerateFile(
        Dictionary<string, Dictionary<string, Table>> tables,
        Dictionary<string, Dictionary<string, Enum>> enums)
    {
        var usingDirectives = dbDriver.GetUsingDirectivesForModels();
        var dataclassModels = GenerateDataClasses(tables);
        var enumModels = GenerateEnums(enums);

        var root = RootGen.CompilationRootGen(
            IdentifierName(namespaceName),
            usingDirectives,
            dataclassModels.Concat(enumModels).ToArray());
        root = root.AddCommentOnTop(Consts.AutoGeneratedComment);

        return new File
        {
            Name = $"{ClassName}.cs",
            Contents = root.ToByteString()
        };
    }

    private MemberDeclarationSyntax[] GenerateDataClasses(Dictionary<string, Dictionary<string, Table>> tables)
    {
        return (
            from schemaTables in tables
            from table in schemaTables.Value
            let className = $"{table.Value.Rel.Schema}_{table.Value.Rel.Name}".ToModelName()
            select DataClassesGen.Generate(className, ClassMember.Model, table.Value.Columns, dbDriver.Options)
        ).ToArray();
    }

    private MemberDeclarationSyntax[] GenerateEnums(Dictionary<string, Dictionary<string, Enum>> enums)
    {
        return enums.SelectMany(s =>
        {
            var schemaName = s.Key == dbDriver.DefaultSchema ? string.Empty : s.Key;
            return s.Value.SelectMany(e =>
            {
                var enumName = $"{schemaName}_{e.Value.Name}".ToModelName();
                return EnumsGen.Generate(enumName, e.Value.Vals);
            });
        }).ToArray();
    }
}