using Microsoft.CodeAnalysis.CSharp.Syntax;
using Plugin;
using SqlcGenCsharp.Drivers;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;


namespace SqlcGenCsharp.Generators;

internal class ModelsGen(DbDriver dbDriver, string namespaceName)
{
    private const string ClassName = "Models";

    private RootGen RootGen { get; } = new(dbDriver.Options);

    private DataClassesGen DataClassesGen { get; } = new(dbDriver);

    public File GenerateFile(Dictionary<string, Table> tables)
    {
        var models = GenerateModelsDataClasses(tables);
        var directives = GetDirectives();
        var root = RootGen.CompilationRootGen(IdentifierName(namespaceName), directives, models);
        root = root.AddCommentOnTop(Consts.AutoGeneratedComment);

        return new File
        {
            Name = $"{ClassName}.cs",
            Contents = root.ToByteString()
        };
    }

    private UsingDirectiveSyntax[] GetDirectives()
    {
        IEnumerable<UsingDirectiveSyntax> usingDirectives = [UsingDirective(ParseName("System"))];

        if (dbDriver.Options.DriverName is DriverName.Npgsql)
        {
            usingDirectives = usingDirectives.Concat([
                UsingDirective(ParseName("NpgsqlTypes")),
            ]);
        }
        return usingDirectives.ToArray();
    }

    private MemberDeclarationSyntax[] GenerateModelsDataClasses(Dictionary<string, Table> tables)
    {
        return (
            from table in tables.Values
            let className = $"{table.Rel.Schema}_{table.Rel.Name}"
            select DataClassesGen.Generate(className.ToModelName(), ClassMember.Model, table.Columns, dbDriver.Options)
        ).ToArray();
    }
}