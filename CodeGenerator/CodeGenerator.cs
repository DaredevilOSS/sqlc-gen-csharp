using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Plugin;
using SqlcGenCsharp.Drivers;
using SqlcGenCsharp.Generators;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using File = Plugin.File;

namespace SqlcGenCsharp;

public class CodeGenerator
{
    private static readonly char[] Separator = ['/'];

    private static readonly string[] ResharperDisables =
    [
        "InconsistentNaming",
        "UnusedAutoPropertyAccessor.Global",
        "NotAccessedPositionalProperty.Global"
    ];

    private string? _namespaceName;
    private Options? _options;
    private DbDriver? _dbDriver;
    private DataClassesGen? _dataClassesGen;
    private RootGen? _rootGen;
    private UtilsGen? _utilsGen;
    private CsprojGen? _csprojGen;

    private void InitGenerators(GenerateRequest generateRequest)
    {
        Options = new Options(generateRequest);
        NamespaceName = GenerateNamespace(generateRequest);
        DbDriver = InstantiateDriver();

        // initialize file generators
        var projectName = new DirectoryInfo(generateRequest.Settings.Codegen.Out).Name;
        CsprojGen = new CsprojGen(projectName, Options);
        RootGen = new RootGen(Options);
        UtilsGen = new UtilsGen(NamespaceName, Options);
        DataClassesGen = new DataClassesGen(DbDriver);
    }

    private string NamespaceName
    {
        get => _namespaceName!;
        set => _namespaceName = value;
    }

    private Options Options
    {
        get => _options!;
        set => _options = value;
    }

    private DbDriver DbDriver
    {
        get => _dbDriver!;
        set => _dbDriver = value;
    }

    private DataClassesGen DataClassesGen
    {
        get => _dataClassesGen!;
        set => _dataClassesGen = value;
    }

    private RootGen RootGen
    {
        get => _rootGen!;
        set => _rootGen = value;
    }

    private UtilsGen UtilsGen
    {
        get => _utilsGen!;
        set => _utilsGen = value;
    }

    private CsprojGen CsprojGen
    {
        get => _csprojGen!;
        set => _csprojGen = value;
    }

    private DbDriver InstantiateDriver()
    {
        return Options.DriverName switch
        {
            DriverName.MySqlConnector => new MySqlConnectorDriver(Options.DotnetFramework),
            DriverName.Npgsql => new NpgsqlDriver(Options.DotnetFramework),
            DriverName.Sqlite => new SqliteDriver(Options.DotnetFramework),
            _ => throw new ArgumentException($"unknown driver: {Options.DriverName}")
        };
    }

    public Task<GenerateResponse> Generate(GenerateRequest generateRequest)
    {
        InitGenerators(generateRequest); // the request is necessary in order to know which generators are needed
        var fileQueries = GetFileQueries();
        var files = fileQueries
            .Select(fq => GenerateFile(fq.Value, fq.Key))
            .Append(UtilsGen.GenerateFile())
            .AppendIf(CsprojGen.GenerateFile(), Options.GenerateCsproj);

        return Task.FromResult(new GenerateResponse { Files = { files } });

        Dictionary<string, Query[]> GetFileQueries()
        {
            return generateRequest.Queries
                .GroupBy(query => QueryFilenameToClassName(query.Filename))
                .ToDictionary(
                    group => group.Key,
                    group => group.ToArray());
        }

        string QueryFilenameToClassName(string filenameWithExtension)
        {
            return string.Concat(
                Path.GetFileNameWithoutExtension(filenameWithExtension).FirstCharToUpper(),
                Path.GetExtension(filenameWithExtension)[1..].FirstCharToUpper());
        }
    }

    private string GenerateNamespace(GenerateRequest generateRequest)
    {
        var parts = generateRequest.Settings.Codegen.Out
            .Split(Separator, StringSplitOptions.RemoveEmptyEntries);
        return parts.Length > 0 ? parts[0] : "GeneratedNamespace";
    }

    private File GenerateFile(IEnumerable<Query> queries, string className)
    {
        var (usingDirectives, classDeclaration) = GenerateClass(queries, className);
        var root = RootGen.CompilationRootGen(
            IdentifierName(NamespaceName), usingDirectives.ToArray(), classDeclaration);
        root = AddResharperDisables(root);
        root = root.AddCommentOnTop(Consts.AutoGeneratedComment);

        return new File
        {
            Name = $"{className}.cs",
            Contents = root.ToByteString()
        };
    }

    private static CompilationUnitSyntax AddResharperDisables(CompilationUnitSyntax compilationUnit)
    {
        return ResharperDisables
            .Aggregate(compilationUnit, (current, resharperDisable) =>
                current.AddCommentOnTop($"// ReSharper disable {resharperDisable}"));
    }

    private (IList<UsingDirectiveSyntax>, MemberDeclarationSyntax) GenerateClass(IEnumerable<Query> queries,
        string className)
    {
        var usingDirectives = DbDriver.GetUsingDirectives();
        var classMembers = queries.SelectMany(GetMembersForSingleQuery);
        return (usingDirectives, GetClassDeclaration(className, classMembers));
    }

    private ClassDeclarationSyntax GetClassDeclaration(string className,
        IEnumerable<MemberDeclarationSyntax> classMembers)
    {
        var classDeclaration = (ClassDeclarationSyntax)(Options.DotnetFramework.LatestDotnetSupported()
            ? GetWithPrimaryConstructor()
            : GetWithRegularConstructor());
        return classDeclaration.AddMembers(classMembers.ToArray());

        MemberDeclarationSyntax GetWithPrimaryConstructor()
        {
            return ParseMemberDeclaration(
                    $"class {className}(string {Variable.ConnectionString.Name()})" + "{}")!
                .AddModifiers(Token(SyntaxKind.PublicKeyword));
        }

        MemberDeclarationSyntax GetWithRegularConstructor()
        {
            return ParseMemberDeclaration(
                    $$"""
                      class {{className}}
                      {
                          public {{className}}(string {{Variable.ConnectionString.Name()}})
                          {
                              this.{{Variable.ConnectionString.Name()}} = {{Variable.ConnectionString.Name()}};
                          }
                          private string {{Variable.ConnectionString.Name()}} { get; }
                      }
                      """)!
                .AddModifiers(Token(SyntaxKind.PublicKeyword));
        }
    }

    private IEnumerable<MemberDeclarationSyntax> GetMembersForSingleQuery(Query query)
    {
        return new List<MemberDeclarationSyntax>()
            .Append(GetQueryTextConstant(query))
            .AppendIfNotNull(GetQueryColumnsDataclass(query))
            .AppendIfNotNull(GetQueryParamsDataclass(query))
            .Append(AddMethodDeclaration(query));
    }

    private MemberDeclarationSyntax? GetQueryColumnsDataclass(Query query)
    {
        return query.Columns.Count <= 0
            ? null
            : DataClassesGen.Generate(query.Name, ClassMember.Row, query.Columns, Options);
    }

    private MemberDeclarationSyntax? GetQueryParamsDataclass(Query query)
    {
        if (query.Params.Count <= 0) return null;
        var columns = query.Params.Select(p => p.Column);
        return DataClassesGen.Generate(query.Name, ClassMember.Args, columns, Options);
    }

    private MemberDeclarationSyntax GetQueryTextConstant(Query query)
    {
        return ParseMemberDeclaration(
                $"private const string {query.Name}{ClassMember.Sql.Name()} = \"{DbDriver.TransformQueryText(query)}\";")
            !
            .AppendNewLine();
    }

    private MemberDeclarationSyntax AddMethodDeclaration(Query query)
    {
        var queryTextConstant = GetInterfaceName(ClassMember.Sql);
        var argInterface = GetInterfaceName(ClassMember.Args);
        var returnInterface = GetInterfaceName(ClassMember.Row);

        return query.Cmd switch
        {
            ":exec" => DbDriver.ExecDeclare(queryTextConstant, argInterface, query),
            ":one" => DbDriver.OneDeclare(queryTextConstant, argInterface, returnInterface, query),
            ":many" => DbDriver.ManyDeclare(queryTextConstant, argInterface, returnInterface, query),
            ":execlastid" => ((IExecLastId)DbDriver).ExecLastIdDeclare(queryTextConstant, argInterface, query),
            ":copyfrom" => ((ICopyFrom)DbDriver).CopyFromDeclare(queryTextConstant, argInterface, query),
            ":execrows" => ((IExecRows)DbDriver).ExecRowsDeclare(queryTextConstant, argInterface, query),
            _ => throw new NotImplementedException($"{query.Cmd} is not implemented")
        };

        string GetInterfaceName(ClassMember classMemberType)
        {
            return $"{query.Name}{classMemberType.Name()}";
        }
    }
}