using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using Google.Protobuf;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Plugin;
using SqlcGenCsharp.Drivers;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using File = Plugin.File;

namespace SqlcGenCsharp;

public class CodeGenerator
{
    private static readonly char[] Separator = ['/'];

    public CodeGenerator(GenerateRequest generateRequest)
    {
        Options = OptionsParser.Parse(generateRequest);
        DbDriver = Options.InstantiateDriver();
        DataClasses = new DataClasses(DbDriver);
        
        // TODO move tout of constructor
        DebugHelper.Instance.Append("generating response");
        GenerateResponse = Generate(generateRequest);
    }

    private ValidOptions Options { get; }
    private IDbDriver DbDriver { get; }
    
    private DataClasses DataClasses { get; }
    public GenerateResponse GenerateResponse { get; }

    private static ByteString ToByteString(CompilationUnitSyntax compilationUnit)
    {
        var syntaxTree = CSharpSyntaxTree.Create(compilationUnit);
        var sourceText = syntaxTree.GetText().ToString();
        return ByteString.CopyFromUtf8(sourceText);
    }

    private GenerateResponse Generate(GenerateRequest generateRequest)
    {
        var namespaceName = GenerateNamespace();
        var fileQueries = generateRequest.Queries
            .GroupBy(query => query.Filename)
            .ToImmutableDictionary(
                group => group.Key,
                group => group.ToArray());

        var files = fileQueries.Select(fq => GenerateFile(
            namespaceName, fq.Value, fq.Key));
        return new GenerateResponse { Files = { files } };

        string GenerateNamespace()
        {
            var parts = generateRequest.Settings.Codegen.Out
                .Split(Separator, StringSplitOptions.RemoveEmptyEntries);
            return parts.Length > 0 ? parts[0] : "GeneratedNamespace";
        }
    }

    private File GenerateFile(string namespaceName, Query[] queries, string filename)
    {
        var namespaceDeclaration = FileScopedNamespaceDeclaration(IdentifierName(namespaceName));
        var (usingDb, className, classDeclaration) = GenerateClass(queries, filename);
        var root = CompilationUnit()
            .AddUsings(usingDb)
            .AddMembers(namespaceDeclaration, classDeclaration)
            .NormalizeWhitespace();

        var compilationUnit = root.WithLeadingTrivia(root.GetLeadingTrivia()
            .Insert(0, Comment($"// auto-generated by sqlc at {DateTime.Now:g} - do not edit"))
            .Insert(1, Whitespace("\n")));

        return new File
        {
            Name = $"{className}.cs",
            Contents = ToByteString(compilationUnit)
        };
    }

    private (UsingDirectiveSyntax[], string, MemberDeclarationSyntax) GenerateClass(Query[] queries, string filename)
    {
        var className = QueryFilenameToClassName(filename);
        var (usingDirectives, sharedMemberDeclarations) = DbDriver.Preamble();
        var perQueryMembers = queries.SelectMany(GetMembersForSingleQuery).ToArray();
        return (usingDirectives, className, GetClassDeclaration());

        string QueryFilenameToClassName(string filenameWithExtension)
        {
            return string.Concat(
                Path.GetFileNameWithoutExtension(filenameWithExtension).FirstCharToUpper(),
                Path.GetExtension(filenameWithExtension)[1..].FirstCharToUpper());
        }

        ClassDeclarationSyntax GetClassDeclaration()
        {
            var classDeclaration = (ClassDeclarationSyntax)ParseMemberDeclaration(
                    $"class {className}(string {Variable.ConnectionString.Name()})" + "{}")!
                .AddModifiers(Token(SyntaxKind.PublicKeyword));

            return classDeclaration
                .AddMembers(sharedMemberDeclarations)
                .AddMembers(perQueryMembers);
        }
    }

    private MemberDeclarationSyntax[] GetMembersForSingleQuery(Query query)
    {
        return new[]
            {
                GetQueryTextConstant(query),
                GetQueryColumnsDataclass(query),
                GetQueryParamsDataclass(query),
                AddMethodDeclaration(query)
            }
            .Where(member => member != null)
            .Cast<MemberDeclarationSyntax>()
            .ToArray();
    }

    private MemberDeclarationSyntax AddMethodDeclaration(Query query)
    {
        var queryTextConstant = GetInterfaceName(ClassMember.Sql);
        var argInterface = GetInterfaceName(ClassMember.Args);
        var returnInterface = GetInterfaceName(ClassMember.Row);

        return query.Cmd switch
        {
            ":exec" => DbDriver.ExecDeclare(query.Name, queryTextConstant, argInterface, query.Params),
            ":one" => DbDriver.OneDeclare(query.Name, queryTextConstant, argInterface, returnInterface,
                query.Params, query.Columns),
            ":many" => DbDriver.ManyDeclare(query.Name, queryTextConstant, argInterface, returnInterface,
                query.Params, query.Columns),
            ":execlastid" => DbDriver.ExecLastIdDeclare(query.Name, queryTextConstant, argInterface, returnInterface,
                query.Params, query.Columns),
            _ => throw new InvalidDataException()
        };

        string GetInterfaceName(ClassMember classMemberType)
        {
            return $"{query.Name}{classMemberType.Name()}";
        }
    }

    private MemberDeclarationSyntax? GetQueryColumnsDataclass(Query query)
    {
        if (query.Columns.Count <= 0) return null;
        return DataClasses.Generate(query.Name, ClassMember.Row, query.Columns, Options);
    }

    private MemberDeclarationSyntax? GetQueryParamsDataclass(Query query)
    {
        if (query.Params.Count <= 0) return null;
        var columns = query.Params.Select(p => p.Column);
        return DataClasses.Generate(query.Name, ClassMember.Args, columns, Options);
    }

    private MemberDeclarationSyntax GetQueryTextConstant(Query query)
    {
        return ParseMemberDeclaration(
                $"private const string {query.Name}{ClassMember.Sql.Name()} = \"{DbDriver.TransformQuery(query)}\";")!
            .AppendNewLine();
    }
}