// auto-generated by sqlc - do not edit
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Dapper;
using MySqlConnector;

namespace MySqlConnectorDapperExampleGen;
public class QuerySql(string connectionString)
{
    private const string GetAuthorSql = "SELECT id, name, bio, created FROM authors WHERE name = @name LIMIT 1";
    public class GetAuthorRow
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
        public DateTime Created { get; set; }
    };
    public class GetAuthorArgs
    {
        public string Name { get; set; }
    };
    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var result = await connection.QueryFirstOrDefaultAsync<GetAuthorRow?>(GetAuthorSql, new { name = args.Name });
            return result;
        }
    }

    private const string ListAuthorsSql = "SELECT id, name, bio, created FROM authors ORDER BY name";
    public class ListAuthorsRow
    {
        public long Id { get; set; }
        public string Name { get; set; }
        public string? Bio { get; set; }
        public DateTime Created { get; set; }
    };
    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var results = await connection.QueryAsync<ListAuthorsRow>(ListAuthorsSql);
            return results.AsList();
        }
    }

    private const string CreateAuthorSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public class CreateAuthorArgs
    {
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public async Task CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            await connection.ExecuteAsync(CreateAuthorSql, new { name = args.Name, bio = args.Bio });
        }
    }

    private const string UpdateAuthorSql = "UPDATE authors SET bio = @bio WHERE id = @id";
    public class UpdateAuthorArgs
    {
        public string? Bio { get; set; }
        public long Id { get; set; }
    };
    public async Task UpdateAuthor(UpdateAuthorArgs args)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            await connection.ExecuteAsync(UpdateAuthorSql, new { bio = args.Bio, id = args.Id });
        }
    }

    private const string CreateAuthorReturnIdSql = "INSERT INTO authors (name, bio) VALUES (@name, @bio)";
    public class CreateAuthorReturnIdArgs
    {
        public string Name { get; set; }
        public string? Bio { get; set; }
    };
    public async Task<long> CreateAuthorReturnId(CreateAuthorReturnIdArgs args)
    {
        {
            await using var connection = new MySqlConnection(connectionString);
            connection.Open();
            await using var command = new MySqlCommand(CreateAuthorReturnIdSql, connection);
            command.Parameters.AddWithValue("@name", args.Name);
            command.Parameters.AddWithValue("@bio", args.Bio!);
            await command.ExecuteNonQueryAsync();
            return command.LastInsertedId;
        }
    }

    private const string DeleteAuthorSql = "DELETE FROM authors WHERE name = @name";
    public class DeleteAuthorArgs
    {
        public string Name { get; set; }
    };
    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            await connection.ExecuteAsync(DeleteAuthorSql, new { name = args.Name });
        }
    }

    private const string TruncateAuthorsSql = "TRUNCATE TABLE authors";
    public async Task TruncateAuthors()
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            await connection.ExecuteAsync(TruncateAuthorsSql);
        }
    }

    private const string TestSql = "SELECT c_bit, c_tinyint, c_bool, c_boolean, c_smallint, c_mediumint, c_int, c_integer, c_bigint, c_serial, c_decimal, c_dec, c_numeric, c_fixed, c_float, c_double, c_double_precision, c_date, c_time, c_datetime, c_timestamp, c_year, c_char, c_nchar, c_national_char, c_varchar, c_binary, c_varbinary, c_tinyblob, c_tinytext, c_blob, c_text, c_mediumblob, c_mediumtext, c_longblob, c_longtext, c_json FROM node_mysql_types LIMIT 1";
    public class TestRow
    {
        public byte[]? C_bit { get; set; }
        public int? C_tinyint { get; set; }
        public int? C_bool { get; set; }
        public int? C_boolean { get; set; }
        public int? C_smallint { get; set; }
        public int? C_mediumint { get; set; }
        public int? C_int { get; set; }
        public int? C_integer { get; set; }
        public long? C_bigint { get; set; }
        public long C_serial { get; set; }
        public string? C_decimal { get; set; }
        public string? C_dec { get; set; }
        public string? C_numeric { get; set; }
        public string? C_fixed { get; set; }
        public double? C_float { get; set; }
        public double? C_double { get; set; }
        public double? C_double_precision { get; set; }
        public DateTime? C_date { get; set; }
        public string? C_time { get; set; }
        public DateTime? C_datetime { get; set; }
        public DateTime? C_timestamp { get; set; }
        public int? C_year { get; set; }
        public string? C_char { get; set; }
        public string? C_nchar { get; set; }
        public string? C_national_char { get; set; }
        public string? C_varchar { get; set; }
        public byte[]? C_binary { get; set; }
        public byte[]? C_varbinary { get; set; }
        public byte[]? C_tinyblob { get; set; }
        public string? C_tinytext { get; set; }
        public byte[]? C_blob { get; set; }
        public string? C_text { get; set; }
        public byte[]? C_mediumblob { get; set; }
        public string? C_mediumtext { get; set; }
        public byte[]? C_longblob { get; set; }
        public string? C_longtext { get; set; }
        public object? C_json { get; set; }
    };
    public async Task<TestRow?> Test()
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var result = await connection.QueryFirstOrDefaultAsync<TestRow?>(TestSql);
            return result;
        }
    }
}